
am2320.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08005658  08005658  00015658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  200001dc  08005b0c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a0  08005b0c  000202a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cf05  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000207a  00000000  00000000  0002d111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005ccc  00000000  00000000  0002f18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000820  00000000  00000000  00034e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf8  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000050b5  00000000  00000000  00036270  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000032e1  00000000  00000000  0003b325  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e606  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002138  00000000  00000000  0003e684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005640 	.word	0x08005640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005640 	.word	0x08005640

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_InitTick+0x3c>)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_InitTick+0x40>)
{
 8000ec6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	7818      	ldrb	r0, [r3, #0]
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed8:	f000 f8aa 	bl	8001030 <HAL_SYSTICK_Config>
 8000edc:	4604      	mov	r4, r0
 8000ede:	b958      	cbnz	r0, 8000ef8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	2d0f      	cmp	r5, #15
 8000ee2:	d809      	bhi.n	8000ef8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f85e 	bl	8000fac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_InitTick+0x44>)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	601d      	str	r5, [r3, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x30>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f82f 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ffc8 	bl	8000ec0 <HAL_InitTick>
  HAL_MspInit();
 8000f30:	f002 f9c8 	bl	80032c4 <HAL_MspInit>
}
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd08      	pop	{r3, pc}
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x10>)
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_IncTick+0x14>)
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	440b      	add	r3, r1
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000204 	.word	0x20000204
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f54:	4b01      	ldr	r3, [pc, #4]	; (8000f5c <HAL_GetTick+0x8>)
 8000f56:	6818      	ldr	r0, [r3, #0]
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000204 	.word	0x20000204

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff6 	bl	8000f54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f68:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	bf1c      	itt	ne
 8000f6c:	4b05      	ldrne	r3, [pc, #20]	; (8000f84 <HAL_Delay+0x24>)
 8000f6e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f72:	bf18      	it	ne
 8000f74:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	f7ff ffed 	bl	8000f54 <HAL_GetTick>
 8000f7a:	1b40      	subs	r0, r0, r5
 8000f7c:	4284      	cmp	r4, r0
 8000f7e:	d8fa      	bhi.n	8000f76 <HAL_Delay+0x16>
  {
  }
}
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
 8000f82:	bf00      	nop
 8000f84:	20000000 	.word	0x20000000

08000f88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	0200      	lsls	r0, r0, #8
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fa4:	60d3      	str	r3, [r2, #12]
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b530      	push	{r4, r5, lr}
 8000fb0:	68dc      	ldr	r4, [r3, #12]
 8000fb2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	bf28      	it	cs
 8000fc0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 0501 	mov.w	r5, #1
 8000fc8:	fa05 f303 	lsl.w	r3, r5, r3
 8000fcc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd0:	bf8c      	ite	hi
 8000fd2:	3c03      	subhi	r4, #3
 8000fd4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fda:	fa05 f404 	lsl.w	r4, r5, r4
 8000fde:	3c01      	subs	r4, #1
 8000fe0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	ea42 0201 	orr.w	r2, r2, r1
 8000fe8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	bfad      	iteet	ge
 8000fee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	f000 000f 	andlt.w	r0, r0, #15
 8000ff6:	4b06      	ldrlt	r3, [pc, #24]	; (8001010 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	bfb5      	itete	lt
 8000ffe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	e000ed14 	.word	0xe000ed14

08001014 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001014:	2800      	cmp	r0, #0
 8001016:	db08      	blt.n	800102a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001018:	0942      	lsrs	r2, r0, #5
 800101a:	2301      	movs	r3, #1
 800101c:	f000 001f 	and.w	r0, r0, #31
 8001020:	fa03 f000 	lsl.w	r0, r3, r0
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_NVIC_EnableIRQ+0x18>)
 8001026:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100

08001030 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	3801      	subs	r0, #1
 8001032:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001036:	d20a      	bcs.n	800104e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	21f0      	movs	r1, #240	; 0xf0
 8001040:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001060:	2b02      	cmp	r3, #2
 8001062:	d003      	beq.n	800106c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
 800106a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800106e:	2305      	movs	r3, #5
 8001070:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800107c:	2000      	movs	r0, #0
}
 800107e:	4770      	bx	lr

08001080 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001080:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001084:	4770      	bx	lr
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001230 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4a64      	ldr	r2, [pc, #400]	; (8001228 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001098:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010a0:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a4:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80010a8:	42b7      	cmp	r7, r6
 80010aa:	f040 80ad 	bne.w	8001208 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ae:	684c      	ldr	r4, [r1, #4]
 80010b0:	f024 0a10 	bic.w	sl, r4, #16
 80010b4:	f1ba 0f02 	cmp.w	sl, #2
 80010b8:	d116      	bne.n	80010e8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80010ba:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80010be:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010c6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010ce:	f04f 0e0f 	mov.w	lr, #15
 80010d2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80010d6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010da:	690d      	ldr	r5, [r1, #16]
 80010dc:	fa05 f50b 	lsl.w	r5, r5, fp
 80010e0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010e4:	f8cc 5020 	str.w	r5, [ip, #32]
 80010e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ec:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80010ee:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f2:	fa05 f50c 	lsl.w	r5, r5, ip
 80010f6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001100:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001110:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001112:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001116:	d815      	bhi.n	8001144 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001118:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001120:	68cd      	ldr	r5, [r1, #12]
 8001122:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001126:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800112a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800112e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001132:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001136:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800113a:	fa0e fe03 	lsl.w	lr, lr, r3
 800113e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001142:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001144:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	9d00      	ldr	r5, [sp, #0]
 8001148:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	688f      	ldr	r7, [r1, #8]
 800114c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001150:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001152:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001154:	00e5      	lsls	r5, r4, #3
 8001156:	d557      	bpl.n	8001208 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	f04f 0b00 	mov.w	fp, #0
 800115c:	f8cd b00c 	str.w	fp, [sp, #12]
 8001160:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001164:	4d31      	ldr	r5, [pc, #196]	; (800122c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800116a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800116e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001172:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001176:	9703      	str	r7, [sp, #12]
 8001178:	9f03      	ldr	r7, [sp, #12]
 800117a:	f023 0703 	bic.w	r7, r3, #3
 800117e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001182:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001186:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001192:	f04f 0e0f 	mov.w	lr, #15
 8001196:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a0:	d039      	beq.n	8001216 <HAL_GPIO_Init+0x18e>
 80011a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d037      	beq.n	800121a <HAL_GPIO_Init+0x192>
 80011aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ae:	42a8      	cmp	r0, r5
 80011b0:	d035      	beq.n	800121e <HAL_GPIO_Init+0x196>
 80011b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b6:	42a8      	cmp	r0, r5
 80011b8:	d033      	beq.n	8001222 <HAL_GPIO_Init+0x19a>
 80011ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011be:	42a8      	cmp	r0, r5
 80011c0:	bf14      	ite	ne
 80011c2:	2507      	movne	r5, #7
 80011c4:	2504      	moveq	r5, #4
 80011c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80011ca:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ce:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80011d0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80011d8:	bf0c      	ite	eq
 80011da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011dc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80011de:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80011e0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80011e6:	bf0c      	ite	eq
 80011e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011ea:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80011ec:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011f4:	bf0c      	ite	eq
 80011f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011f8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011fa:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001200:	bf54      	ite	pl
 8001202:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001204:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001206:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001208:	3301      	adds	r3, #1
 800120a:	2b10      	cmp	r3, #16
 800120c:	f47f af47 	bne.w	800109e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001210:	b005      	add	sp, #20
 8001212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	465d      	mov	r5, fp
 8001218:	e7d5      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 800121a:	2501      	movs	r5, #1
 800121c:	e7d3      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 800121e:	2502      	movs	r5, #2
 8001220:	e7d1      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 8001222:	2503      	movs	r5, #3
 8001224:	e7cf      	b.n	80011c6 <HAL_GPIO_Init+0x13e>
 8001226:	bf00      	nop
 8001228:	40013c00 	.word	0x40013c00
 800122c:	40020000 	.word	0x40020000
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	b10a      	cbz	r2, 800123a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	6181      	str	r1, [r0, #24]
 8001238:	4770      	bx	lr
 800123a:	0409      	lsls	r1, r1, #16
 800123c:	e7fb      	b.n	8001236 <HAL_GPIO_WritePin+0x2>

0800123e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800123e:	6801      	ldr	r1, [r0, #0]
 8001240:	694b      	ldr	r3, [r1, #20]
 8001242:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	d010      	beq.n	800126e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800124c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001250:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001252:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001254:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001256:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800125a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800125e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001260:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
 800126c:	4770      	bx	lr
  }
  return HAL_OK;
 800126e:	4618      	mov	r0, r3
}
 8001270:	4770      	bx	lr

08001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001276:	4604      	mov	r4, r0
 8001278:	4617      	mov	r7, r2
 800127a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800127c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001280:	b28e      	uxth	r6, r1
 8001282:	6825      	ldr	r5, [r4, #0]
 8001284:	f1b8 0f01 	cmp.w	r8, #1
 8001288:	bf0c      	ite	eq
 800128a:	696b      	ldreq	r3, [r5, #20]
 800128c:	69ab      	ldrne	r3, [r5, #24]
 800128e:	ea36 0303 	bics.w	r3, r6, r3
 8001292:	bf14      	ite	ne
 8001294:	2001      	movne	r0, #1
 8001296:	2000      	moveq	r0, #0
 8001298:	b908      	cbnz	r0, 800129e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800129a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800129e:	696b      	ldr	r3, [r5, #20]
 80012a0:	055a      	lsls	r2, r3, #21
 80012a2:	d516      	bpl.n	80012d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ac:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012b0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80012b2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012c2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012c6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80012c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80012cc:	2001      	movs	r0, #1
 80012ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012d2:	1c7b      	adds	r3, r7, #1
 80012d4:	d0d5      	beq.n	8001282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff fe3d 	bl	8000f54 <HAL_GetTick>
 80012da:	eba0 0009 	sub.w	r0, r0, r9
 80012de:	4287      	cmp	r7, r0
 80012e0:	d301      	bcc.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d1cd      	bne.n	8001282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012e6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80012e8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012ea:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012f6:	f042 0220 	orr.w	r2, r2, #32
 80012fa:	e7e4      	b.n	80012c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080012fc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	075b      	lsls	r3, r3, #29
 800130a:	d501      	bpl.n	8001310 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff94 	bl	800123e <I2C_IsAcknowledgeFailed>
 8001316:	b9a8      	cbnz	r0, 8001344 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001318:	1c6a      	adds	r2, r5, #1
 800131a:	d0f3      	beq.n	8001304 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800131c:	f7ff fe1a 	bl	8000f54 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	4285      	cmp	r5, r0
 8001324:	d301      	bcc.n	800132a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001326:	2d00      	cmp	r5, #0
 8001328:	d1ec      	bne.n	8001304 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800132a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800132c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800132e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001330:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001334:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001338:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800133a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800133e:	f042 0220 	orr.w	r2, r2, #32
 8001342:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001344:	2001      	movs	r0, #1
}
 8001346:	bd70      	pop	{r4, r5, r6, pc}

08001348 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4604      	mov	r4, r0
 800134c:	460d      	mov	r5, r1
 800134e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001350:	6820      	ldr	r0, [r4, #0]
 8001352:	6943      	ldr	r3, [r0, #20]
 8001354:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001358:	d001      	beq.n	800135e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800135a:	2000      	movs	r0, #0
}
 800135c:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800135e:	6942      	ldr	r2, [r0, #20]
 8001360:	06d2      	lsls	r2, r2, #27
 8001362:	d50e      	bpl.n	8001382 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001364:	f06f 0210 	mvn.w	r2, #16
 8001368:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800136a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800136c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800136e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001372:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001376:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001378:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800137a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800137e:	2001      	movs	r0, #1
 8001380:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001382:	f7ff fde7 	bl	8000f54 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	42a8      	cmp	r0, r5
 800138a:	d801      	bhi.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800138c:	2d00      	cmp	r5, #0
 800138e:	d1df      	bne.n	8001350 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001390:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001392:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001394:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001396:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800139a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800139e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013a0:	f042 0220 	orr.w	r2, r2, #32
 80013a4:	e7e8      	b.n	8001378 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080013a6 <I2C_WaitOnFlagUntilTimeout>:
{
 80013a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013aa:	9e08      	ldr	r6, [sp, #32]
 80013ac:	4604      	mov	r4, r0
 80013ae:	4690      	mov	r8, r2
 80013b0:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80013b6:	b28d      	uxth	r5, r1
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	f1b9 0f01 	cmp.w	r9, #1
 80013be:	bf0c      	ite	eq
 80013c0:	695b      	ldreq	r3, [r3, #20]
 80013c2:	699b      	ldrne	r3, [r3, #24]
 80013c4:	ea35 0303 	bics.w	r3, r5, r3
 80013c8:	bf0c      	ite	eq
 80013ca:	2301      	moveq	r3, #1
 80013cc:	2300      	movne	r3, #0
 80013ce:	4543      	cmp	r3, r8
 80013d0:	d002      	beq.n	80013d8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80013d2:	2000      	movs	r0, #0
}
 80013d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80013d8:	1c7b      	adds	r3, r7, #1
 80013da:	d0ed      	beq.n	80013b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013dc:	f7ff fdba 	bl	8000f54 <HAL_GetTick>
 80013e0:	1b80      	subs	r0, r0, r6
 80013e2:	4287      	cmp	r7, r0
 80013e4:	d301      	bcc.n	80013ea <I2C_WaitOnFlagUntilTimeout+0x44>
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d1e6      	bne.n	80013b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ea:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80013ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001404:	2001      	movs	r0, #1
 8001406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800140a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	061b      	lsls	r3, r3, #24
 8001418:	d501      	bpl.n	800141e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
 800141c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff ff0d 	bl	800123e <I2C_IsAcknowledgeFailed>
 8001424:	b9a8      	cbnz	r0, 8001452 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001426:	1c6a      	adds	r2, r5, #1
 8001428:	d0f3      	beq.n	8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff fd93 	bl	8000f54 <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	4285      	cmp	r5, r0
 8001432:	d301      	bcc.n	8001438 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001434:	2d00      	cmp	r5, #0
 8001436:	d1ec      	bne.n	8001412 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001438:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800143a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800143c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800143e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001442:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001446:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001448:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800144c:	f042 0220 	orr.w	r2, r2, #32
 8001450:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
}
 8001454:	bd70      	pop	{r4, r5, r6, pc}
	...

08001458 <HAL_I2C_Init>:
{
 8001458:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800145a:	4604      	mov	r4, r0
 800145c:	b908      	cbnz	r0, 8001462 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
 8001460:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001462:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001466:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800146a:	b91b      	cbnz	r3, 8001474 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800146c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001470:	f001 ff48 	bl	8003304 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001474:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001476:	2324      	movs	r3, #36	; 0x24
 8001478:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001484:	f001 fab4 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001488:	6865      	ldr	r5, [r4, #4]
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_I2C_Init+0x138>)
 800148c:	429d      	cmp	r5, r3
 800148e:	d84d      	bhi.n	800152c <HAL_I2C_Init+0xd4>
 8001490:	4b40      	ldr	r3, [pc, #256]	; (8001594 <HAL_I2C_Init+0x13c>)
 8001492:	4298      	cmp	r0, r3
 8001494:	d9e3      	bls.n	800145e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001496:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001498:	493f      	ldr	r1, [pc, #252]	; (8001598 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800149c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014a8:	6a13      	ldr	r3, [r2, #32]
 80014aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ae:	3101      	adds	r1, #1
 80014b0:	4319      	orrs	r1, r3
 80014b2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b4:	69d1      	ldr	r1, [r2, #28]
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_I2C_Init+0x138>)
 80014b8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80014bc:	429d      	cmp	r5, r3
 80014be:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014c2:	f100 30ff 	add.w	r0, r0, #4294967295
 80014c6:	d848      	bhi.n	800155a <HAL_I2C_Init+0x102>
 80014c8:	006d      	lsls	r5, r5, #1
 80014ca:	fbb0 f0f5 	udiv	r0, r0, r5
 80014ce:	3001      	adds	r0, #1
 80014d0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	bf38      	it	cc
 80014d8:	2304      	movcc	r3, #4
 80014da:	430b      	orrs	r3, r1
 80014dc:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	6a20      	ldr	r0, [r4, #32]
 80014e2:	69e3      	ldr	r3, [r4, #28]
 80014e4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80014e8:	4303      	orrs	r3, r0
 80014ea:	430b      	orrs	r3, r1
 80014ec:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014ee:	6891      	ldr	r1, [r2, #8]
 80014f0:	68e0      	ldr	r0, [r4, #12]
 80014f2:	6923      	ldr	r3, [r4, #16]
 80014f4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80014f8:	4303      	orrs	r3, r0
 80014fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014fe:	430b      	orrs	r3, r1
 8001500:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001502:	68d1      	ldr	r1, [r2, #12]
 8001504:	69a0      	ldr	r0, [r4, #24]
 8001506:	6963      	ldr	r3, [r4, #20]
 8001508:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800150c:	4303      	orrs	r3, r0
 800150e:	430b      	orrs	r3, r1
 8001510:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800151c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001520:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001524:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001526:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800152a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_I2C_Init+0x144>)
 800152e:	4298      	cmp	r0, r3
 8001530:	d995      	bls.n	800145e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001532:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001534:	4e18      	ldr	r6, [pc, #96]	; (8001598 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001536:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001538:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001540:	4333      	orrs	r3, r6
 8001542:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001544:	6a13      	ldr	r3, [r2, #32]
 8001546:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800154a:	4371      	muls	r1, r6
 800154c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001550:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001554:	fbb1 f1f6 	udiv	r1, r1, r6
 8001558:	e7a9      	b.n	80014ae <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800155a:	68a3      	ldr	r3, [r4, #8]
 800155c:	b953      	cbnz	r3, 8001574 <HAL_I2C_Init+0x11c>
 800155e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001562:	fbb0 f0f3 	udiv	r0, r0, r3
 8001566:	1c43      	adds	r3, r0, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	b16b      	cbz	r3, 800158a <HAL_I2C_Init+0x132>
 800156e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001572:	e7b2      	b.n	80014da <HAL_I2C_Init+0x82>
 8001574:	2319      	movs	r3, #25
 8001576:	436b      	muls	r3, r5
 8001578:	fbb0 f0f3 	udiv	r0, r0, r3
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	b113      	cbz	r3, 800158a <HAL_I2C_Init+0x132>
 8001584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001588:	e7a7      	b.n	80014da <HAL_I2C_Init+0x82>
 800158a:	2301      	movs	r3, #1
 800158c:	e7a5      	b.n	80014da <HAL_I2C_Init+0x82>
 800158e:	bf00      	nop
 8001590:	000186a0 	.word	0x000186a0
 8001594:	001e847f 	.word	0x001e847f
 8001598:	000f4240 	.word	0x000f4240
 800159c:	003d08ff 	.word	0x003d08ff

080015a0 <HAL_I2C_Master_Transmit>:
{
 80015a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80015a4:	4604      	mov	r4, r0
 80015a6:	461f      	mov	r7, r3
 80015a8:	460d      	mov	r5, r1
 80015aa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff fcd2 	bl	8000f54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80015b4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80015b6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b8:	d004      	beq.n	80015c4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80015ba:	2502      	movs	r5, #2
}
 80015bc:	4628      	mov	r0, r5
 80015be:	b004      	add	sp, #16
 80015c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015c4:	9000      	str	r0, [sp, #0]
 80015c6:	2319      	movs	r3, #25
 80015c8:	2201      	movs	r2, #1
 80015ca:	4958      	ldr	r1, [pc, #352]	; (800172c <HAL_I2C_Master_Transmit+0x18c>)
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff feea 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d1f1      	bne.n	80015ba <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80015d6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d0ed      	beq.n	80015ba <HAL_I2C_Master_Transmit+0x1a>
 80015de:	2301      	movs	r3, #1
 80015e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80015ea:	bf5e      	ittt	pl
 80015ec:	681a      	ldrpl	r2, [r3, #0]
 80015ee:	f042 0201 	orrpl.w	r2, r2, #1
 80015f2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015fc:	2221      	movs	r2, #33	; 0x21
 80015fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001602:	2210      	movs	r2, #16
 8001604:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001608:	2200      	movs	r2, #0
 800160a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800160c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800160e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001610:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001612:	4a47      	ldr	r2, [pc, #284]	; (8001730 <HAL_I2C_Master_Transmit+0x190>)
 8001614:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001618:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800161c:	2a08      	cmp	r2, #8
 800161e:	d004      	beq.n	800162a <HAL_I2C_Master_Transmit+0x8a>
 8001620:	2a01      	cmp	r2, #1
 8001622:	d002      	beq.n	800162a <HAL_I2C_Master_Transmit+0x8a>
 8001624:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001628:	d104      	bne.n	8001634 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e002      	b.n	800163a <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001634:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001636:	2a12      	cmp	r2, #18
 8001638:	d0f7      	beq.n	800162a <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800163a:	9600      	str	r6, [sp, #0]
 800163c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff feae 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 800164a:	b108      	cbz	r0, 8001650 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 800164c:	2501      	movs	r5, #1
 800164e:	e7b5      	b.n	80015bc <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001650:	6923      	ldr	r3, [r4, #16]
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001658:	d113      	bne.n	8001682 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800165a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800165e:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001660:	4633      	mov	r3, r6
 8001662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001664:	4933      	ldr	r1, [pc, #204]	; (8001734 <HAL_I2C_Master_Transmit+0x194>)
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fe03 	bl	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800166c:	4605      	mov	r5, r0
 800166e:	2800      	cmp	r0, #0
 8001670:	d1ec      	bne.n	800164c <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	9003      	str	r0, [sp, #12]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	9203      	str	r2, [sp, #12]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	9303      	str	r3, [sp, #12]
 800167e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001680:	e044      	b.n	800170c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001682:	11eb      	asrs	r3, r5, #7
 8001684:	f003 0306 	and.w	r3, r3, #6
 8001688:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800168c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800168e:	492a      	ldr	r1, [pc, #168]	; (8001738 <HAL_I2C_Master_Transmit+0x198>)
 8001690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001692:	4633      	mov	r3, r6
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fdec 	bl	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800169a:	2800      	cmp	r0, #0
 800169c:	d1d6      	bne.n	800164c <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	b2ed      	uxtb	r5, r5
 80016a2:	611d      	str	r5, [r3, #16]
 80016a4:	e7dc      	b.n	8001660 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	4632      	mov	r2, r6
 80016a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff fead 	bl	800140a <I2C_WaitOnTXEFlagUntilTimeout>
 80016b0:	b140      	cbz	r0, 80016c4 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b4:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b6:	bf01      	itttt	eq
 80016b8:	6822      	ldreq	r2, [r4, #0]
 80016ba:	6813      	ldreq	r3, [r2, #0]
 80016bc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80016c0:	6013      	streq	r3, [r2, #0]
 80016c2:	e7c3      	b.n	800164c <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f812 1b01 	ldrb.w	r1, [r2], #1
 80016ce:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80016d0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016d4:	3a01      	subs	r2, #1
 80016d6:	b292      	uxth	r2, r2
 80016d8:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016dc:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80016de:	1e51      	subs	r1, r2, #1
 80016e0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016e2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80016e4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016e6:	d50a      	bpl.n	80016fe <HAL_I2C_Master_Transmit+0x15e>
 80016e8:	b149      	cbz	r1, 80016fe <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ea:	7859      	ldrb	r1, [r3, #1]
 80016ec:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80016ee:	3302      	adds	r3, #2
 80016f0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80016f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80016f8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80016fa:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016fc:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016fe:	4632      	mov	r2, r6
 8001700:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fdfa 	bl	80012fc <I2C_WaitOnBTFFlagUntilTimeout>
 8001708:	2800      	cmp	r0, #0
 800170a:	d1d2      	bne.n	80016b2 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 800170c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1c9      	bne.n	80016a6 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001712:	6821      	ldr	r1, [r4, #0]
 8001714:	680a      	ldr	r2, [r1, #0]
 8001716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	2220      	movs	r2, #32
 800171e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001722:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001726:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800172a:	e747      	b.n	80015bc <HAL_I2C_Master_Transmit+0x1c>
 800172c:	00100002 	.word	0x00100002
 8001730:	ffff0000 	.word	0xffff0000
 8001734:	00010002 	.word	0x00010002
 8001738:	00010008 	.word	0x00010008

0800173c <HAL_I2C_Master_Receive>:
{
 800173c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001740:	4604      	mov	r4, r0
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	4698      	mov	r8, r3
 8001746:	460f      	mov	r7, r1
 8001748:	4691      	mov	r9, r2
 800174a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fc02 	bl	8000f54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001750:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001754:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001756:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001758:	d004      	beq.n	8001764 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800175a:	2702      	movs	r7, #2
}
 800175c:	4638      	mov	r0, r7
 800175e:	b009      	add	sp, #36	; 0x24
 8001760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001764:	9000      	str	r0, [sp, #0]
 8001766:	2319      	movs	r3, #25
 8001768:	2201      	movs	r2, #1
 800176a:	49a6      	ldr	r1, [pc, #664]	; (8001a04 <HAL_I2C_Master_Receive+0x2c8>)
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff fe1a 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001772:	2800      	cmp	r0, #0
 8001774:	d1f1      	bne.n	800175a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001776:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d0ed      	beq.n	800175a <HAL_I2C_Master_Receive+0x1e>
 800177e:	2301      	movs	r3, #1
 8001780:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800178a:	bf5e      	ittt	pl
 800178c:	681a      	ldrpl	r2, [r3, #0]
 800178e:	f042 0201 	orrpl.w	r2, r2, #1
 8001792:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800179c:	2222      	movs	r2, #34	; 0x22
 800179e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017a2:	2210      	movs	r2, #16
 80017a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a8:	2200      	movs	r2, #0
 80017aa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80017ac:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017b2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b4:	4a94      	ldr	r2, [pc, #592]	; (8001a08 <HAL_I2C_Master_Receive+0x2cc>)
 80017b6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ba:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80017bc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017c4:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017c6:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017c8:	d004      	beq.n	80017d4 <HAL_I2C_Master_Receive+0x98>
 80017ca:	2a01      	cmp	r2, #1
 80017cc:	d002      	beq.n	80017d4 <HAL_I2C_Master_Receive+0x98>
 80017ce:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017d2:	d104      	bne.n	80017de <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017e0:	2a11      	cmp	r2, #17
 80017e2:	d0f7      	beq.n	80017d4 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e4:	9500      	str	r5, [sp, #0]
 80017e6:	4633      	mov	r3, r6
 80017e8:	2200      	movs	r2, #0
 80017ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff fdd9 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 80017f4:	b108      	cbz	r0, 80017fa <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 80017f6:	2701      	movs	r7, #1
 80017f8:	e7b0      	b.n	800175c <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017fa:	6923      	ldr	r3, [r4, #16]
 80017fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	d140      	bne.n	8001886 <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001804:	f047 0701 	orr.w	r7, r7, #1
 8001808:	b2ff      	uxtb	r7, r7
 800180a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800180c:	462b      	mov	r3, r5
 800180e:	4632      	mov	r2, r6
 8001810:	497e      	ldr	r1, [pc, #504]	; (8001a0c <HAL_I2C_Master_Receive+0x2d0>)
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff fd2d 	bl	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001818:	4607      	mov	r7, r0
 800181a:	2800      	cmp	r0, #0
 800181c:	d1eb      	bne.n	80017f6 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800181e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	2a00      	cmp	r2, #0
 8001824:	d063      	beq.n	80018ee <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8001826:	2a01      	cmp	r2, #1
 8001828:	d174      	bne.n	8001914 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001830:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001832:	9704      	str	r7, [sp, #16]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	9204      	str	r2, [sp, #16]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	9204      	str	r2, [sp, #16]
 800183c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001846:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001a14 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 800184a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d058      	beq.n	8001902 <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8001850:	2b03      	cmp	r3, #3
 8001852:	f200 80ba 	bhi.w	80019ca <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 8001856:	2b01      	cmp	r3, #1
 8001858:	d177      	bne.n	800194a <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	462a      	mov	r2, r5
 800185c:	4631      	mov	r1, r6
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fd72 	bl	8001348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001864:	2800      	cmp	r0, #0
 8001866:	d1c6      	bne.n	80017f6 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800186c:	6912      	ldr	r2, [r2, #16]
 800186e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001872:	3301      	adds	r3, #1
 8001874:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001876:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800187c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001884:	e7e1      	b.n	800184a <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001886:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800188a:	f008 0806 	and.w	r8, r8, #6
 800188e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001892:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001894:	495e      	ldr	r1, [pc, #376]	; (8001a10 <HAL_I2C_Master_Receive+0x2d4>)
 8001896:	462b      	mov	r3, r5
 8001898:	4632      	mov	r2, r6
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff fce9 	bl	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d1a8      	bne.n	80017f6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a4:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018a6:	4959      	ldr	r1, [pc, #356]	; (8001a0c <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a8:	b2ff      	uxtb	r7, r7
 80018aa:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ac:	4632      	mov	r2, r6
 80018ae:	462b      	mov	r3, r5
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fcde 	bl	8001272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b6:	4602      	mov	r2, r0
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d19c      	bne.n	80017f6 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	9007      	str	r0, [sp, #28]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	9107      	str	r1, [sp, #28]
 80018c4:	6999      	ldr	r1, [r3, #24]
 80018c6:	9107      	str	r1, [sp, #28]
 80018c8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018d0:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d2:	4620      	mov	r0, r4
 80018d4:	9500      	str	r5, [sp, #0]
 80018d6:	4633      	mov	r3, r6
 80018d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018dc:	f7ff fd63 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d188      	bne.n	80017f6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80018ea:	6113      	str	r3, [r2, #16]
 80018ec:	e78e      	b.n	800180c <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	9703      	str	r7, [sp, #12]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	9203      	str	r2, [sp, #12]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	9203      	str	r2, [sp, #12]
 80018f8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001900:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001902:	2320      	movs	r3, #32
 8001904:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001908:	2300      	movs	r3, #0
 800190a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800190e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001912:	e723      	b.n	800175c <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8001914:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001916:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001918:	d10d      	bne.n	8001936 <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001926:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001928:	9705      	str	r7, [sp, #20]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	9205      	str	r2, [sp, #20]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	9305      	str	r3, [sp, #20]
 8001932:	9b05      	ldr	r3, [sp, #20]
 8001934:	e787      	b.n	8001846 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800193a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193c:	9706      	str	r7, [sp, #24]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	9206      	str	r2, [sp, #24]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	9306      	str	r3, [sp, #24]
 8001946:	9b06      	ldr	r3, [sp, #24]
 8001948:	e77d      	b.n	8001846 <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 800194a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800194c:	9500      	str	r5, [sp, #0]
 800194e:	4633      	mov	r3, r6
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4641      	mov	r1, r8
 8001956:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001958:	d11a      	bne.n	8001990 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800195a:	f7ff fd24 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 800195e:	2800      	cmp	r0, #0
 8001960:	f47f af49 	bne.w	80017f6 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001976:	1c53      	adds	r3, r2, #1
 8001978:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800197a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800197c:	3b01      	subs	r3, #1
 800197e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001980:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001982:	3b01      	subs	r3, #1
 8001984:	b29b      	uxth	r3, r3
 8001986:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001988:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	7053      	strb	r3, [r2, #1]
 800198e:	e76f      	b.n	8001870 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001990:	f7ff fd09 	bl	80013a6 <I2C_WaitOnFlagUntilTimeout>
 8001994:	4602      	mov	r2, r0
 8001996:	2800      	cmp	r0, #0
 8001998:	f47f af2d 	bne.w	80017f6 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019a4:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 80019ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ae:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80019b0:	3301      	adds	r3, #1
 80019b2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80019b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019c2:	4641      	mov	r1, r8
 80019c4:	4633      	mov	r3, r6
 80019c6:	4620      	mov	r0, r4
 80019c8:	e7c7      	b.n	800195a <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ca:	462a      	mov	r2, r5
 80019cc:	4631      	mov	r1, r6
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fcba 	bl	8001348 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	f47f af0e 	bne.w	80017f6 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019de:	6912      	ldr	r2, [r2, #16]
 80019e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80019e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019e4:	1c53      	adds	r3, r2, #1
 80019e6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80019e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019ea:	3b01      	subs	r3, #1
 80019ec:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	6959      	ldr	r1, [r3, #20]
 80019fa:	0749      	lsls	r1, r1, #29
 80019fc:	f57f af25 	bpl.w	800184a <HAL_I2C_Master_Receive+0x10e>
 8001a00:	e7c3      	b.n	800198a <HAL_I2C_Master_Receive+0x24e>
 8001a02:	bf00      	nop
 8001a04:	00100002 	.word	0x00100002
 8001a08:	ffff0000 	.word	0xffff0000
 8001a0c:	00010002 	.word	0x00010002
 8001a10:	00010008 	.word	0x00010008
 8001a14:	00010004 	.word	0x00010004

08001a18 <HAL_I2C_MasterTxCpltCallback>:
 8001a18:	4770      	bx	lr

08001a1a <HAL_I2C_MasterRxCpltCallback>:
 8001a1a:	4770      	bx	lr

08001a1c <HAL_I2C_SlaveTxCpltCallback>:
 8001a1c:	4770      	bx	lr

08001a1e <HAL_I2C_SlaveRxCpltCallback>:
 8001a1e:	4770      	bx	lr

08001a20 <HAL_I2C_AddrCallback>:
{
 8001a20:	4770      	bx	lr

08001a22 <HAL_I2C_ListenCpltCallback>:
 8001a22:	4770      	bx	lr

08001a24 <HAL_I2C_MemTxCpltCallback>:
 8001a24:	4770      	bx	lr

08001a26 <HAL_I2C_MemRxCpltCallback>:
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2C_ErrorCallback>:
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_AbortCpltCallback>:
{
 8001a2a:	4770      	bx	lr

08001a2c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001a2c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a30:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8001a34:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a36:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001a38:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001a3a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001a3c:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a3e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001a42:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001a44:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a46:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001a48:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8001a4a:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001a4c:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001a4e:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001a52:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a56:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001a5a:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a5c:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a5e:	d108      	bne.n	8001a72 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001a60:	2220      	movs	r2, #32
 8001a62:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a66:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a6a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a6c:	f7ff ffdd 	bl	8001a2a <HAL_I2C_AbortCpltCallback>
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a72:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001a76:	2928      	cmp	r1, #40	; 0x28
 8001a78:	d10d      	bne.n	8001a96 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 8001a7a:	6814      	ldr	r4, [r2, #0]
 8001a7c:	f044 0401 	orr.w	r4, r4, #1
 8001a80:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a82:	6814      	ldr	r4, [r2, #0]
 8001a84:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001a88:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a8a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a8c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8001a90:	f7ff ffca 	bl	8001a28 <HAL_I2C_ErrorCallback>
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	2220      	movs	r2, #32
 8001a98:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001aa0:	e7f6      	b.n	8001a90 <I2C_DMAAbort+0x64>
	...

08001aa4 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001aa4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001aa8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001aac:	2b10      	cmp	r3, #16
{
 8001aae:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ab0:	b2d2      	uxtb	r2, r2
{
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001ab6:	d105      	bne.n	8001ac4 <I2C_ITError+0x20>
 8001ab8:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001aba:	bf02      	ittt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 8001ac2:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ac4:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001ac8:	2928      	cmp	r1, #40	; 0x28
 8001aca:	d13a      	bne.n	8001b42 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001acc:	2200      	movs	r2, #0
 8001ace:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ad0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001ada:	d059      	beq.n	8001b90 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001adc:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ade:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001ae6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <I2C_ITError+0x13c>)
 8001aee:	d035      	beq.n	8001b5c <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001af0:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001af2:	f7ff fab3 	bl	800105c <HAL_DMA_Abort_IT>
 8001af6:	b150      	cbz	r0, 8001b0e <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8001af8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001afa:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001afc:	6813      	ldr	r3, [r2, #0]
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	2320      	movs	r3, #32
 8001b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b0c:	4798      	blx	r3
  CurrentState = hi2c->State;
 8001b0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001b12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b14:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8001b16:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001b18:	d512      	bpl.n	8001b40 <I2C_ITError+0x9c>
 8001b1a:	2b28      	cmp	r3, #40	; 0x28
 8001b1c:	d110      	bne.n	8001b40 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6853      	ldr	r3, [r2, #4]
 8001b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <I2C_ITError+0x140>)
 8001b2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b2c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b32:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001b38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b3c:	f7ff ff71 	bl	8001a22 <HAL_I2C_ListenCpltCallback>
 8001b40:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	0509      	lsls	r1, r1, #20
 8001b46:	d404      	bmi.n	8001b52 <I2C_ITError+0xae>
 8001b48:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	bf1c      	itt	ne
 8001b4c:	2220      	movne	r2, #32
 8001b4e:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	2200      	movs	r2, #0
 8001b54:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b56:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001b5a:	e7bb      	b.n	8001ad4 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b5e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001b60:	f7ff fa7c 	bl	800105c <HAL_DMA_Abort_IT>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d0d2      	beq.n	8001b0e <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	0652      	lsls	r2, r2, #25
 8001b6e:	d505      	bpl.n	8001b7c <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001b7c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001b8e:	e7bc      	b.n	8001b0a <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b90:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001b94:	2960      	cmp	r1, #96	; 0x60
 8001b96:	d115      	bne.n	8001bc4 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	2120      	movs	r1, #32
 8001b9a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9e:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	0650      	lsls	r0, r2, #25
 8001ba4:	d505      	bpl.n	8001bb2 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001bb2:	6822      	ldr	r2, [r4, #0]
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff ff34 	bl	8001a2a <HAL_I2C_AbortCpltCallback>
 8001bc2:	e7a4      	b.n	8001b0e <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	0651      	lsls	r1, r2, #25
 8001bc8:	d505      	bpl.n	8001bd6 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff ff26 	bl	8001a28 <HAL_I2C_ErrorCallback>
 8001bdc:	e797      	b.n	8001b0e <I2C_ITError+0x6a>
 8001bde:	bf00      	nop
 8001be0:	08001a2d 	.word	0x08001a2d
 8001be4:	ffff0000 	.word	0xffff0000

08001be8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001be8:	6803      	ldr	r3, [r0, #0]
{
 8001bea:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001bec:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bee:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bf0:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8001bf4:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bf6:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bf8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bfc:	2910      	cmp	r1, #16
{
 8001bfe:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c00:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c02:	d002      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x22>
 8001c04:	2940      	cmp	r1, #64	; 0x40
 8001c06:	f040 82b6 	bne.w	8002176 <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c0a:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c0c:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c0e:	f011 0f01 	tst.w	r1, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_I2C_EV_IRQHandler+0x3c>
 8001c14:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001c18:	d002      	beq.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 8001c1a:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001c1e:	d152      	bne.n	8001cc6 <HAL_I2C_EV_IRQHandler+0xde>
}
 8001c20:	b00d      	add	sp, #52	; 0x34
 8001c22:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c24:	0595      	lsls	r5, r2, #22
 8001c26:	d54e      	bpl.n	8001cc6 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c2a:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001c2e:	d10c      	bne.n	8001c4a <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001c30:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001c32:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c34:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001c38:	2a40      	cmp	r2, #64	; 0x40
 8001c3a:	d111      	bne.n	8001c60 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001c3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c3e:	b952      	cbnz	r2, 8001c56 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	e7ea      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001c4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c4c:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001c50:	d1f0      	bne.n	8001c34 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001c52:	2208      	movs	r2, #8
 8001c54:	e7ed      	b.n	8001c32 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c56:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	e7f2      	b.n	8001c46 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c60:	6922      	ldr	r2, [r4, #16]
 8001c62:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001c66:	d11b      	bne.n	8001ca0 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c68:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001c6c:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c70:	d112      	bne.n	8001c98 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c76:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001c78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001c7a:	b912      	cbnz	r2, 8001c82 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001c7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c7e:	2900      	cmp	r1, #0
 8001c80:	d0ce      	beq.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c84:	b91a      	cbnz	r2, 8001c8e <HAL_I2C_EV_IRQHandler+0xa6>
 8001c86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d0c8      	beq.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	e7c3      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	e7ea      	b.n	8001c76 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001ca0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ca2:	b932      	cbnz	r2, 8001cb2 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ca4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ca6:	11d2      	asrs	r2, r2, #7
 8001ca8:	f002 0206 	and.w	r2, r2, #6
 8001cac:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001cb0:	e7c9      	b.n	8001c46 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001cb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cb4:	2a01      	cmp	r2, #1
 8001cb6:	d1b3      	bne.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001cb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cba:	11d2      	asrs	r2, r2, #7
 8001cbc:	f002 0206 	and.w	r2, r2, #6
 8001cc0:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001cc4:	e7bf      	b.n	8001c46 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc6:	070d      	lsls	r5, r1, #28
 8001cc8:	d503      	bpl.n	8001cd2 <HAL_I2C_EV_IRQHandler+0xea>
 8001cca:	0595      	lsls	r5, r2, #22
 8001ccc:	d501      	bpl.n	8001cd2 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001cce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cd0:	e7e4      	b.n	8001c9c <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd2:	078d      	lsls	r5, r1, #30
 8001cd4:	f140 80e1 	bpl.w	8001e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001cd8:	0595      	lsls	r5, r2, #22
 8001cda:	f140 80de 	bpl.w	8001e9a <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001cde:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001ce4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ce6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001cea:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001cec:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cee:	f040 80cc 	bne.w	8001e8a <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001cf2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001cf4:	b940      	cbnz	r0, 8001d08 <HAL_I2C_EV_IRQHandler+0x120>
 8001cf6:	2940      	cmp	r1, #64	; 0x40
 8001cf8:	d106      	bne.n	8001d08 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	9001      	str	r0, [sp, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	9201      	str	r2, [sp, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	9b01      	ldr	r3, [sp, #4]
 8001d06:	e78b      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d0a:	b981      	cbnz	r1, 8001d2e <HAL_I2C_EV_IRQHandler+0x146>
 8001d0c:	6920      	ldr	r0, [r4, #16]
 8001d0e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001d12:	d10c      	bne.n	8001d2e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d14:	9102      	str	r1, [sp, #8]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	9202      	str	r2, [sp, #8]
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	9202      	str	r2, [sp, #8]
 8001d1e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d26:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001d28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	e028      	b.n	8001d80 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8001d2e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d30:	b289      	uxth	r1, r1
 8001d32:	b951      	cbnz	r1, 8001d4a <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d34:	9103      	str	r1, [sp, #12]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	9203      	str	r2, [sp, #12]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	9203      	str	r2, [sp, #12]
 8001d3e:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e019      	b.n	8001d7e <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001d4a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d4c:	b289      	uxth	r1, r1
 8001d4e:	2901      	cmp	r1, #1
 8001d50:	d14a      	bne.n	8001de8 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d52:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d56:	d11c      	bne.n	8001d92 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001d66:	d00d      	beq.n	8001d84 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d70:	2200      	movs	r2, #0
 8001d72:	9204      	str	r2, [sp, #16]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	9204      	str	r2, [sp, #16]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	9304      	str	r3, [sp, #16]
 8001d7c:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6523      	str	r3, [r4, #80]	; 0x50
 8001d82:	e74d      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d84:	9205      	str	r2, [sp, #20]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	9205      	str	r2, [sp, #20]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	9205      	str	r2, [sp, #20]
 8001d8e:	9a05      	ldr	r2, [sp, #20]
 8001d90:	e7d6      	b.n	8001d40 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001d92:	2a08      	cmp	r2, #8
 8001d94:	d01c      	beq.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1e8>
 8001d96:	2a20      	cmp	r2, #32
 8001d98:	d01a      	beq.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001d9a:	2d12      	cmp	r5, #18
 8001d9c:	d10d      	bne.n	8001dba <HAL_I2C_EV_IRQHandler+0x1d2>
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d116      	bne.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da8:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2200      	movs	r2, #0
 8001dac:	9206      	str	r2, [sp, #24]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	9206      	str	r2, [sp, #24]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	9306      	str	r3, [sp, #24]
 8001db6:	9b06      	ldr	r3, [sp, #24]
 8001db8:	e7e1      	b.n	8001d7e <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001dba:	2a10      	cmp	r2, #16
 8001dbc:	d8f1      	bhi.n	8001da2 <HAL_I2C_EV_IRQHandler+0x1ba>
 8001dbe:	498e      	ldr	r1, [pc, #568]	; (8001ff8 <HAL_I2C_EV_IRQHandler+0x410>)
 8001dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8001dc4:	07d0      	lsls	r0, r2, #31
 8001dc6:	d5ec      	bpl.n	8001da2 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dce:	e7eb      	b.n	8001da8 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	9207      	str	r2, [sp, #28]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	9207      	str	r2, [sp, #28]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	9207      	str	r2, [sp, #28]
 8001de4:	9a07      	ldr	r2, [sp, #28]
 8001de6:	e7ab      	b.n	8001d40 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8001de8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001dea:	b289      	uxth	r1, r1
 8001dec:	2902      	cmp	r1, #2
 8001dee:	d12c      	bne.n	8001e4a <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001df0:	2a10      	cmp	r2, #16
 8001df2:	d803      	bhi.n	8001dfc <HAL_I2C_EV_IRQHandler+0x214>
 8001df4:	4980      	ldr	r1, [pc, #512]	; (8001ff8 <HAL_I2C_EV_IRQHandler+0x410>)
 8001df6:	40d1      	lsrs	r1, r2
 8001df8:	07c9      	lsls	r1, r1, #31
 8001dfa:	d422      	bmi.n	8001e42 <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e02:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0a:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	050d      	lsls	r5, r1, #20
 8001e10:	d50f      	bpl.n	8001e32 <HAL_I2C_EV_IRQHandler+0x24a>
 8001e12:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e16:	d008      	beq.n	8001e2a <HAL_I2C_EV_IRQHandler+0x242>
 8001e18:	1e51      	subs	r1, r2, #1
 8001e1a:	291f      	cmp	r1, #31
 8001e1c:	bf9d      	ittte	ls
 8001e1e:	4a77      	ldrls	r2, [pc, #476]	; (8001ffc <HAL_I2C_EV_IRQHandler+0x414>)
 8001e20:	40ca      	lsrls	r2, r1
 8001e22:	43d2      	mvnls	r2, r2
 8001e24:	2201      	movhi	r2, #1
 8001e26:	07d0      	lsls	r0, r2, #31
 8001e28:	d403      	bmi.n	8001e32 <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e30:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e32:	2200      	movs	r2, #0
 8001e34:	9208      	str	r2, [sp, #32]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	9208      	str	r2, [sp, #32]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	9308      	str	r3, [sp, #32]
 8001e3e:	9b08      	ldr	r3, [sp, #32]
 8001e40:	e79d      	b.n	8001d7e <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001e48:	e7df      	b.n	8001e0a <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001e50:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	0509      	lsls	r1, r1, #20
 8001e56:	d510      	bpl.n	8001e7a <HAL_I2C_EV_IRQHandler+0x292>
 8001e58:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e5c:	d009      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0x28a>
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	2a1f      	cmp	r2, #31
 8001e62:	bf9d      	ittte	ls
 8001e64:	4965      	ldrls	r1, [pc, #404]	; (8001ffc <HAL_I2C_EV_IRQHandler+0x414>)
 8001e66:	fa21 f202 	lsrls.w	r2, r1, r2
 8001e6a:	43d2      	mvnls	r2, r2
 8001e6c:	2201      	movhi	r2, #1
 8001e6e:	07d2      	lsls	r2, r2, #31
 8001e70:	d403      	bmi.n	8001e7a <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e78:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	9209      	str	r2, [sp, #36]	; 0x24
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	9309      	str	r3, [sp, #36]	; 0x24
 8001e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e88:	e779      	b.n	8001d7e <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	920a      	str	r2, [sp, #40]	; 0x28
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	920a      	str	r2, [sp, #40]	; 0x28
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	930a      	str	r3, [sp, #40]	; 0x28
 8001e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e98:	e6c2      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e9a:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e9e:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ea0:	f000 80ae 	beq.w	8002000 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ea4:	0505      	lsls	r5, r0, #20
 8001ea6:	f53f aebb 	bmi.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eaa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001eae:	f001 0104 	and.w	r1, r1, #4
 8001eb2:	d069      	beq.n	8001f88 <HAL_I2C_EV_IRQHandler+0x3a0>
 8001eb4:	0550      	lsls	r0, r2, #21
 8001eb6:	d567      	bpl.n	8001f88 <HAL_I2C_EV_IRQHandler+0x3a0>
 8001eb8:	2900      	cmp	r1, #0
 8001eba:	d165      	bne.n	8001f88 <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ebc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ec0:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ec2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ec6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ec8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eca:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ecc:	b9c5      	cbnz	r5, 8001f00 <HAL_I2C_EV_IRQHandler+0x318>
 8001ece:	2a21      	cmp	r2, #33	; 0x21
 8001ed0:	d118      	bne.n	8001f04 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ed2:	2808      	cmp	r0, #8
 8001ed4:	d078      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001ed6:	2820      	cmp	r0, #32
 8001ed8:	d076      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001eda:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001ede:	d073      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ee6:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ee8:	2311      	movs	r3, #17
 8001eea:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff fd8d 	bl	8001a18 <HAL_I2C_MasterTxCpltCallback>
 8001efe:	e68f      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f00:	2a21      	cmp	r2, #33	; 0x21
 8001f02:	d005      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x328>
 8001f04:	2940      	cmp	r1, #64	; 0x40
 8001f06:	f47f ae8b 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f0a:	2a22      	cmp	r2, #34	; 0x22
 8001f0c:	f47f ae88 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001f10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f12:	b292      	uxth	r2, r2
 8001f14:	b91a      	cbnz	r2, 8001f1e <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1c:	e6ba      	b.n	8001c94 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f1e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001f22:	2a40      	cmp	r2, #64	; 0x40
 8001f24:	d126      	bne.n	8001f74 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 8001f26:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f28:	b962      	cbnz	r2, 8001f44 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f2a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001f2c:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f30:	d104      	bne.n	8001f3c <HAL_I2C_EV_IRQHandler+0x354>
 8001f32:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f34:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001f36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f38:	3302      	adds	r3, #2
 8001f3a:	e721      	b.n	8001d80 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	e6f1      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001f44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d102      	bne.n	8001f50 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	e7f7      	b.n	8001f40 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8001f50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001f52:	2a02      	cmp	r2, #2
 8001f54:	f47f ae64 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f58:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f5c:	2a22      	cmp	r2, #34	; 0x22
 8001f5e:	d104      	bne.n	8001f6a <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e65a      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f6a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f6e:	2a21      	cmp	r2, #33	; 0x21
 8001f70:	f47f ae56 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f76:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f7a:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001f7c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001f86:	e64b      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	f43f ae49 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 8001f8e:	0592      	lsls	r2, r2, #22
 8001f90:	f57f ae46 	bpl.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f96:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001f9a:	2a21      	cmp	r2, #33	; 0x21
 8001f9c:	f47f ae40 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8001fa0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d1e5      	bne.n	8001f74 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fa8:	2908      	cmp	r1, #8
 8001faa:	d00d      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001fac:	2920      	cmp	r1, #32
 8001fae:	d00b      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
 8001fb0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001fb4:	d008      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001fbc:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fbe:	2311      	movs	r3, #17
 8001fc0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001fc6:	e794      	b.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fd8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fdc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fea:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001fec:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fee:	d184      	bne.n	8001efa <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ff0:	f7ff fd18 	bl	8001a24 <HAL_I2C_MemTxCpltCallback>
 8001ff4:	e614      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 8001ff6:	bf00      	nop
 8001ff8:	00010014 	.word	0x00010014
 8001ffc:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002000:	0505      	lsls	r5, r0, #20
 8002002:	f53f ae0d 	bmi.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002006:	f011 0f40 	tst.w	r1, #64	; 0x40
 800200a:	f001 0104 	and.w	r1, r1, #4
 800200e:	d048      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0x4ba>
 8002010:	0550      	lsls	r0, r2, #21
 8002012:	d546      	bpl.n	80020a2 <HAL_I2C_EV_IRQHandler+0x4ba>
 8002014:	2900      	cmp	r1, #0
 8002016:	d144      	bne.n	80020a2 <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002018:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800201c:	2a22      	cmp	r2, #34	; 0x22
 800201e:	f47f adff 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8002022:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002024:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002026:	2a03      	cmp	r2, #3
 8002028:	d914      	bls.n	8002054 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002032:	3301      	adds	r3, #1
 8002034:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002038:	3b01      	subs	r3, #1
 800203a:	b29b      	uxth	r3, r3
 800203c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800203e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	2b03      	cmp	r3, #3
 8002044:	f47f adec 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	6853      	ldr	r3, [r2, #4]
 800204c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002050:	6053      	str	r3, [r2, #4]
 8002052:	e5e5      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002054:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002056:	2802      	cmp	r0, #2
 8002058:	f43f ade2 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 800205c:	2a01      	cmp	r2, #1
 800205e:	f63f addf 	bhi.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002070:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207a:	3301      	adds	r3, #1
 800207c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800207e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002086:	2320      	movs	r3, #32
 8002088:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800208c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d168      	bne.n	800216a <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fcc3 	bl	8001a26 <HAL_I2C_MemRxCpltCallback>
 80020a0:	e5be      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a2:	2900      	cmp	r1, #0
 80020a4:	f43f adbc 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 80020a8:	0592      	lsls	r2, r2, #22
 80020aa:	f57f adb9 	bpl.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80020b0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80020b2:	b289      	uxth	r1, r1
 80020b4:	2904      	cmp	r1, #4
 80020b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80020b8:	d109      	bne.n	80020ce <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80020c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	6263      	str	r3, [r4, #36]	; 0x24
 80020cc:	e757      	b.n	8001f7e <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 80020ce:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80020d0:	b280      	uxth	r0, r0
 80020d2:	2803      	cmp	r0, #3
 80020d4:	d10c      	bne.n	80020f0 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020d6:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020d8:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020da:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80020de:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80020e0:	d0ef      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0x4da>
 80020e2:	2a02      	cmp	r2, #2
 80020e4:	d0ed      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e7e8      	b.n	80020c2 <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 80020f0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80020f2:	b280      	uxth	r0, r0
 80020f4:	2802      	cmp	r0, #2
 80020f6:	d1e4      	bne.n	80020c2 <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_EV_IRQHandler+0x518>
 80020fc:	2a10      	cmp	r2, #16
 80020fe:	d128      	bne.n	8002152 <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002106:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800210c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800210e:	1c53      	adds	r3, r2, #1
 8002110:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002112:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002114:	3b01      	subs	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8002120:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002122:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8002124:	3301      	adds	r3, #1
 8002126:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002128:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800212a:	3b01      	subs	r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002130:	6853      	ldr	r3, [r2, #4]
 8002132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002136:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	2320      	movs	r3, #32
 800213a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800213e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214c:	d10d      	bne.n	800216a <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	6323      	str	r3, [r4, #48]	; 0x30
 8002150:	e7a3      	b.n	800209a <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002152:	2a04      	cmp	r2, #4
 8002154:	d001      	beq.n	800215a <HAL_I2C_EV_IRQHandler+0x572>
 8002156:	2a02      	cmp	r2, #2
 8002158:	d103      	bne.n	8002162 <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002160:	e7d1      	b.n	8002106 <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002168:	e7cd      	b.n	8002106 <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800216a:	2312      	movs	r3, #18
 800216c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff fc53 	bl	8001a1a <HAL_I2C_MasterRxCpltCallback>
 8002174:	e554      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002176:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002178:	b321      	cbz	r1, 80021c4 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800217a:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800217c:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217e:	f011 0f02 	tst.w	r1, #2
 8002182:	d029      	beq.n	80021d8 <HAL_I2C_EV_IRQHandler+0x5f0>
 8002184:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002188:	d026      	beq.n	80021d8 <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800218a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800218c:	b102      	cbz	r2, 8002190 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800218e:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002190:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002194:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002198:	2a28      	cmp	r2, #40	; 0x28
 800219a:	d116      	bne.n	80021ca <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80021a4:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80021a8:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80021aa:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80021ae:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80021b2:	bf54      	ite	pl
 80021b4:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80021b6:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 80021b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff fc2f 	bl	8001a20 <HAL_I2C_AddrCallback>
 80021c2:	e52d      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021c4:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021c6:	6959      	ldr	r1, [r3, #20]
 80021c8:	e7d9      	b.n	800217e <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ca:	f06f 0202 	mvn.w	r2, #2
 80021ce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80021d0:	2300      	movs	r3, #0
 80021d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80021d6:	e523      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d8:	06cd      	lsls	r5, r1, #27
 80021da:	f140 80af 	bpl.w	800233c <HAL_I2C_EV_IRQHandler+0x754>
 80021de:	0595      	lsls	r5, r2, #22
 80021e0:	f140 80ac 	bpl.w	800233c <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021ee:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80021f0:	2200      	movs	r2, #0
 80021f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002208:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800220e:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002210:	d520      	bpl.n	8002254 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002212:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002216:	2a22      	cmp	r2, #34	; 0x22
 8002218:	d148      	bne.n	80022ac <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800221a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800221c:	6802      	ldr	r2, [r0, #0]
 800221e:	6852      	ldr	r2, [r2, #4]
 8002220:	b292      	uxth	r2, r2
 8002222:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002224:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002226:	b292      	uxth	r2, r2
 8002228:	b11a      	cbz	r2, 8002232 <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800222a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800222c:	f042 0204 	orr.w	r2, r2, #4
 8002230:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002238:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800223a:	f7fe ff21 	bl	8001080 <HAL_DMA_GetState>
 800223e:	2801      	cmp	r0, #1
 8002240:	d008      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002242:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002244:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_I2C_EV_IRQHandler+0x840>)
 8002246:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002248:	f7fe ff08 	bl	800105c <HAL_DMA_Abort_IT>
 800224c:	b110      	cbz	r0, 8002254 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800224e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002250:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002252:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002254:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	b313      	cbz	r3, 80022a0 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	0752      	lsls	r2, r2, #29
 8002260:	d509      	bpl.n	8002276 <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800226a:	3301      	adds	r3, #1
 800226c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800226e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002270:	3b01      	subs	r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	0650      	lsls	r0, r2, #25
 800227c:	d509      	bpl.n	8002292 <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002286:	3301      	adds	r3, #1
 8002288:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800228a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800228c:	3b01      	subs	r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	b11b      	cbz	r3, 80022a0 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022a2:	b303      	cbz	r3, 80022e6 <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff fbfd 	bl	8001aa4 <I2C_ITError>
 80022aa:	e4b9      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80022ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022ae:	6802      	ldr	r2, [r0, #0]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	b292      	uxth	r2, r2
 80022b4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80022b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80022b8:	b292      	uxth	r2, r2
 80022ba:	b11a      	cbz	r2, 80022c4 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022cc:	f7fe fed8 	bl	8001080 <HAL_DMA_GetState>
 80022d0:	2801      	cmp	r0, #1
 80022d2:	d0bf      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_I2C_EV_IRQHandler+0x840>)
 80022d8:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022da:	f7fe febf 	bl	800105c <HAL_DMA_Abort_IT>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d0b8      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022e4:	e7b4      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022e6:	2d2a      	cmp	r5, #42	; 0x2a
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022ec:	2328      	movs	r3, #40	; 0x28
 80022ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff fb93 	bl	8001a1e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022fc:	2b28      	cmp	r3, #40	; 0x28
 80022fe:	d10c      	bne.n	800231a <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002300:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_I2C_EV_IRQHandler+0x844>)
 8002302:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002304:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 800230a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 800230c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002314:	f7ff fb85 	bl	8001a22 <HAL_I2C_ListenCpltCallback>
 8002318:	e482      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800231a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800231c:	2b22      	cmp	r3, #34	; 0x22
 800231e:	d002      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0x73e>
 8002320:	2d22      	cmp	r5, #34	; 0x22
 8002322:	f47f ac7d 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002328:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800232a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800232c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff fb72 	bl	8001a1e <HAL_I2C_SlaveRxCpltCallback>
 800233a:	e471      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800233c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002340:	2821      	cmp	r0, #33	; 0x21
 8002342:	f001 0504 	and.w	r5, r1, #4
 8002346:	d135      	bne.n	80023b4 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002348:	0609      	lsls	r1, r1, #24
 800234a:	d527      	bpl.n	800239c <HAL_I2C_EV_IRQHandler+0x7b4>
 800234c:	0551      	lsls	r1, r2, #21
 800234e:	d525      	bpl.n	800239c <HAL_I2C_EV_IRQHandler+0x7b4>
 8002350:	bb25      	cbnz	r5, 800239c <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002352:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002356:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002358:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800235a:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 800235c:	2a00      	cmp	r2, #0
 800235e:	f43f ac5f 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002362:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002364:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002368:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800236a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800236c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800236e:	3a01      	subs	r2, #1
 8002370:	b292      	uxth	r2, r2
 8002372:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002374:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002376:	b292      	uxth	r2, r2
 8002378:	2a00      	cmp	r2, #0
 800237a:	f47f ac51 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 800237e:	2929      	cmp	r1, #41	; 0x29
 8002380:	f47f ac4e 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238a:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800238c:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800238e:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002390:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fb41 	bl	8001a1c <HAL_I2C_SlaveTxCpltCallback>
 800239a:	e441      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800239c:	2d00      	cmp	r5, #0
 800239e:	f43f ac3f 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 80023a2:	0595      	lsls	r5, r2, #22
 80023a4:	f57f ac3c 	bpl.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80023a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023aa:	b292      	uxth	r2, r2
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	f47f ade1 	bne.w	8001f74 <HAL_I2C_EV_IRQHandler+0x38c>
 80023b2:	e435      	b.n	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023b4:	0648      	lsls	r0, r1, #25
 80023b6:	d527      	bpl.n	8002408 <HAL_I2C_EV_IRQHandler+0x820>
 80023b8:	0551      	lsls	r1, r2, #21
 80023ba:	d525      	bpl.n	8002408 <HAL_I2C_EV_IRQHandler+0x820>
 80023bc:	bb25      	cbnz	r5, 8002408 <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023be:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80023c2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80023c4:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c6:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80023c8:	2900      	cmp	r1, #0
 80023ca:	f43f ac29 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80023d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80023da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f ac1a 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 80023ec:	2a2a      	cmp	r2, #42	; 0x2a
 80023ee:	f47f ac17 	bne.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	6853      	ldr	r3, [r2, #4]
 80023f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023fa:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023fc:	2322      	movs	r3, #34	; 0x22
 80023fe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002400:	2328      	movs	r3, #40	; 0x28
 8002402:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002406:	e795      	b.n	8002334 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002408:	2d00      	cmp	r5, #0
 800240a:	f43f ac09 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
 800240e:	0592      	lsls	r2, r2, #22
 8002410:	f57f ac06 	bpl.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002414:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002416:	b292      	uxth	r2, r2
 8002418:	2a00      	cmp	r2, #0
 800241a:	f43f ac01 	beq.w	8001c20 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	7013      	strb	r3, [r2, #0]
 8002424:	e64f      	b.n	80020c6 <HAL_I2C_EV_IRQHandler+0x4de>
 8002426:	bf00      	nop
 8002428:	08001a2d 	.word	0x08001a2d
 800242c:	ffff0000 	.word	0xffff0000

08002430 <HAL_I2C_ER_IRQHandler>:
{
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002432:	6803      	ldr	r3, [r0, #0]
 8002434:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002436:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002438:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 800243c:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800243e:	d006      	beq.n	800244e <HAL_I2C_ER_IRQHandler+0x1e>
 8002440:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002444:	bf1e      	ittt	ne
 8002446:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 800244a:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 800244c:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800244e:	05b9      	lsls	r1, r7, #22
 8002450:	d506      	bpl.n	8002460 <HAL_I2C_ER_IRQHandler+0x30>
 8002452:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002454:	bf42      	ittt	mi
 8002456:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 800245a:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800245e:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002460:	0578      	lsls	r0, r7, #21
 8002462:	d537      	bpl.n	80024d4 <HAL_I2C_ER_IRQHandler+0xa4>
 8002464:	05f1      	lsls	r1, r6, #23
 8002466:	d535      	bpl.n	80024d4 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002468:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 800246c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800246e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002472:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002474:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8002478:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800247a:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800247c:	d15a      	bne.n	8002534 <HAL_I2C_ER_IRQHandler+0x104>
 800247e:	2900      	cmp	r1, #0
 8002480:	d158      	bne.n	8002534 <HAL_I2C_ER_IRQHandler+0x104>
 8002482:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002486:	2921      	cmp	r1, #33	; 0x21
 8002488:	d003      	beq.n	8002492 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800248a:	2a28      	cmp	r2, #40	; 0x28
 800248c:	d152      	bne.n	8002534 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800248e:	2821      	cmp	r0, #33	; 0x21
 8002490:	d150      	bne.n	8002534 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002492:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002496:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002498:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800249a:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_ER_IRQHandler+0x72>
 800249e:	2920      	cmp	r1, #32
 80024a0:	d12a      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xc8>
 80024a2:	2a28      	cmp	r2, #40	; 0x28
 80024a4:	d128      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <HAL_I2C_ER_IRQHandler+0x128>)
 80024a8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024b6:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c0:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80024c2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80024c6:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80024c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80024d0:	f7ff faa7 	bl	8001a22 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024d4:	053a      	lsls	r2, r7, #20
 80024d6:	d53c      	bpl.n	8002552 <HAL_I2C_ER_IRQHandler+0x122>
 80024d8:	05f3      	lsls	r3, r6, #23
 80024da:	d53a      	bpl.n	8002552 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 80024e2:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024e6:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80024e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ea:	431d      	orrs	r5, r3
 80024ec:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 80024ee:	4620      	mov	r0, r4
}
 80024f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80024f4:	f7ff bad6 	b.w	8001aa4 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024f8:	2a21      	cmp	r2, #33	; 0x21
 80024fa:	d117      	bne.n	800252c <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024fc:	4916      	ldr	r1, [pc, #88]	; (8002558 <HAL_I2C_ER_IRQHandler+0x128>)
 80024fe:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002500:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002502:	2220      	movs	r2, #32
 8002504:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002508:	2200      	movs	r2, #0
 800250a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002514:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800251a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff fa79 	bl	8001a1c <HAL_I2C_SlaveTxCpltCallback>
 800252a:	e7d3      	b.n	80024d4 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	e7cf      	b.n	80024d4 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002538:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800253a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800253e:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	bf04      	itt	eq
 8002542:	681a      	ldreq	r2, [r3, #0]
 8002544:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002548:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	bf08      	it	eq
 800254e:	601a      	streq	r2, [r3, #0]
 8002550:	e7c0      	b.n	80024d4 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8002552:	2d00      	cmp	r5, #0
 8002554:	d1c8      	bne.n	80024e8 <HAL_I2C_ER_IRQHandler+0xb8>
 8002556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002558:	ffff0000 	.word	0xffff0000

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	4604      	mov	r4, r0
 8002562:	b918      	cbnz	r0, 800256c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002566:	b002      	add	sp, #8
 8002568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256c:	6803      	ldr	r3, [r0, #0]
 800256e:	07dd      	lsls	r5, r3, #31
 8002570:	d410      	bmi.n	8002594 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	0798      	lsls	r0, r3, #30
 8002576:	d458      	bmi.n	800262a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	071a      	lsls	r2, r3, #28
 800257c:	f100 809a 	bmi.w	80026b4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	075b      	lsls	r3, r3, #29
 8002584:	f100 80b8 	bmi.w	80026f8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002588:	69a2      	ldr	r2, [r4, #24]
 800258a:	2a00      	cmp	r2, #0
 800258c:	f040 8119 	bne.w	80027c2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002590:	2000      	movs	r0, #0
 8002592:	e7e8      	b.n	8002566 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002594:	4ba6      	ldr	r3, [pc, #664]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	f002 020c 	and.w	r2, r2, #12
 800259c:	2a04      	cmp	r2, #4
 800259e:	d007      	beq.n	80025b0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	2a08      	cmp	r2, #8
 80025a8:	d10a      	bne.n	80025c0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	0259      	lsls	r1, r3, #9
 80025ae:	d507      	bpl.n	80025c0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4b9f      	ldr	r3, [pc, #636]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	039a      	lsls	r2, r3, #14
 80025b6:	d5dc      	bpl.n	8002572 <HAL_RCC_OscConfig+0x16>
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1d9      	bne.n	8002572 <HAL_RCC_OscConfig+0x16>
 80025be:	e7d1      	b.n	8002564 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	4d9b      	ldr	r5, [pc, #620]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d111      	bne.n	80025ee <HAL_RCC_OscConfig+0x92>
 80025ca:	682b      	ldr	r3, [r5, #0]
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025d2:	f7fe fcbf 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4d96      	ldr	r5, [pc, #600]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80025d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	682b      	ldr	r3, [r5, #0]
 80025dc:	039b      	lsls	r3, r3, #14
 80025de:	d4c8      	bmi.n	8002572 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fcb8 	bl	8000f54 <HAL_GetTick>
 80025e4:	1b80      	subs	r0, r0, r6
 80025e6:	2864      	cmp	r0, #100	; 0x64
 80025e8:	d9f7      	bls.n	80025da <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80025ea:	2003      	movs	r0, #3
 80025ec:	e7bb      	b.n	8002566 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f2:	d104      	bne.n	80025fe <HAL_RCC_OscConfig+0xa2>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fa:	602b      	str	r3, [r5, #0]
 80025fc:	e7e5      	b.n	80025ca <HAL_RCC_OscConfig+0x6e>
 80025fe:	682a      	ldr	r2, [r5, #0]
 8002600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002604:	602a      	str	r2, [r5, #0]
 8002606:	682a      	ldr	r2, [r5, #0]
 8002608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800260c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1df      	bne.n	80025d2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002612:	f7fe fc9f 	bl	8000f54 <HAL_GetTick>
 8002616:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	039f      	lsls	r7, r3, #14
 800261c:	d5a9      	bpl.n	8002572 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261e:	f7fe fc99 	bl	8000f54 <HAL_GetTick>
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	2864      	cmp	r0, #100	; 0x64
 8002626:	d9f7      	bls.n	8002618 <HAL_RCC_OscConfig+0xbc>
 8002628:	e7df      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	4b81      	ldr	r3, [pc, #516]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	f012 0f0c 	tst.w	r2, #12
 8002632:	d007      	beq.n	8002644 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	2a08      	cmp	r2, #8
 800263c:	d111      	bne.n	8002662 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	025e      	lsls	r6, r3, #9
 8002642:	d40e      	bmi.n	8002662 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	4b7a      	ldr	r3, [pc, #488]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	0795      	lsls	r5, r2, #30
 800264a:	d502      	bpl.n	8002652 <HAL_RCC_OscConfig+0xf6>
 800264c:	68e2      	ldr	r2, [r4, #12]
 800264e:	2a01      	cmp	r2, #1
 8002650:	d188      	bne.n	8002564 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6921      	ldr	r1, [r4, #16]
 8002656:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800265a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800265e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002660:	e78a      	b.n	8002578 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002662:	68e2      	ldr	r2, [r4, #12]
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x2d8>)
 8002666:	b1b2      	cbz	r2, 8002696 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800266c:	f7fe fc72 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4d6f      	ldr	r5, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002672:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	0798      	lsls	r0, r3, #30
 8002678:	d507      	bpl.n	800268a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	682b      	ldr	r3, [r5, #0]
 800267c:	6922      	ldr	r2, [r4, #16]
 800267e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002682:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002686:	602b      	str	r3, [r5, #0]
 8002688:	e776      	b.n	8002578 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fc63 	bl	8000f54 <HAL_GetTick>
 800268e:	1b80      	subs	r0, r0, r6
 8002690:	2802      	cmp	r0, #2
 8002692:	d9ef      	bls.n	8002674 <HAL_RCC_OscConfig+0x118>
 8002694:	e7a9      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002696:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002698:	f7fe fc5c 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269c:	4d64      	ldr	r5, [pc, #400]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800269e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	0799      	lsls	r1, r3, #30
 80026a4:	f57f af68 	bpl.w	8002578 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fc54 	bl	8000f54 <HAL_GetTick>
 80026ac:	1b80      	subs	r0, r0, r6
 80026ae:	2802      	cmp	r0, #2
 80026b0:	d9f6      	bls.n	80026a0 <HAL_RCC_OscConfig+0x144>
 80026b2:	e79a      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b4:	6962      	ldr	r2, [r4, #20]
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x2dc>)
 80026b8:	b17a      	cbz	r2, 80026da <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026be:	f7fe fc49 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4d5b      	ldr	r5, [pc, #364]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80026c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026c8:	079f      	lsls	r7, r3, #30
 80026ca:	f53f af59 	bmi.w	8002580 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7fe fc41 	bl	8000f54 <HAL_GetTick>
 80026d2:	1b80      	subs	r0, r0, r6
 80026d4:	2802      	cmp	r0, #2
 80026d6:	d9f6      	bls.n	80026c6 <HAL_RCC_OscConfig+0x16a>
 80026d8:	e787      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80026da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026dc:	f7fe fc3a 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4d53      	ldr	r5, [pc, #332]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80026e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026e6:	0798      	lsls	r0, r3, #30
 80026e8:	f57f af4a 	bpl.w	8002580 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fc32 	bl	8000f54 <HAL_GetTick>
 80026f0:	1b80      	subs	r0, r0, r6
 80026f2:	2802      	cmp	r0, #2
 80026f4:	d9f6      	bls.n	80026e4 <HAL_RCC_OscConfig+0x188>
 80026f6:	e778      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002700:	d128      	bne.n	8002754 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002706:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002716:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4d48      	ldr	r5, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x2e0>)
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	05d9      	lsls	r1, r3, #23
 800271e:	d51b      	bpl.n	8002758 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	68a3      	ldr	r3, [r4, #8]
 8002722:	4d43      	ldr	r5, [pc, #268]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 8002724:	2b01      	cmp	r3, #1
 8002726:	d127      	bne.n	8002778 <HAL_RCC_OscConfig+0x21c>
 8002728:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002730:	f7fe fc10 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4d3e      	ldr	r5, [pc, #248]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002736:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800273e:	079b      	lsls	r3, r3, #30
 8002740:	d539      	bpl.n	80027b6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002742:	2e00      	cmp	r6, #0
 8002744:	f43f af20 	beq.w	8002588 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4a39      	ldr	r2, [pc, #228]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 800274a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	e719      	b.n	8002588 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002754:	2600      	movs	r6, #0
 8002756:	e7df      	b.n	8002718 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002760:	f7fe fbf8 	bl	8000f54 <HAL_GetTick>
 8002764:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	05da      	lsls	r2, r3, #23
 800276a:	d4d9      	bmi.n	8002720 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fbf2 	bl	8000f54 <HAL_GetTick>
 8002770:	1bc0      	subs	r0, r0, r7
 8002772:	2802      	cmp	r0, #2
 8002774:	d9f7      	bls.n	8002766 <HAL_RCC_OscConfig+0x20a>
 8002776:	e738      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	2b05      	cmp	r3, #5
 800277a:	d104      	bne.n	8002786 <HAL_RCC_OscConfig+0x22a>
 800277c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	672b      	str	r3, [r5, #112]	; 0x70
 8002784:	e7d0      	b.n	8002728 <HAL_RCC_OscConfig+0x1cc>
 8002786:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	672a      	str	r2, [r5, #112]	; 0x70
 800278e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ca      	bne.n	8002730 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800279a:	f7fe fbdb 	bl	8000f54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027a6:	0798      	lsls	r0, r3, #30
 80027a8:	d5cb      	bpl.n	8002742 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fbd3 	bl	8000f54 <HAL_GetTick>
 80027ae:	1bc0      	subs	r0, r0, r7
 80027b0:	4540      	cmp	r0, r8
 80027b2:	d9f7      	bls.n	80027a4 <HAL_RCC_OscConfig+0x248>
 80027b4:	e719      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fbcd 	bl	8000f54 <HAL_GetTick>
 80027ba:	1bc0      	subs	r0, r0, r7
 80027bc:	4540      	cmp	r0, r8
 80027be:	d9bd      	bls.n	800273c <HAL_RCC_OscConfig+0x1e0>
 80027c0:	e713      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c2:	4d1b      	ldr	r5, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
 80027c4:	68ab      	ldr	r3, [r5, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	f43f aeca 	beq.w	8002564 <HAL_RCC_OscConfig+0x8>
 80027d0:	4e1b      	ldr	r6, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x2e4>)
 80027d2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80027d6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	d134      	bne.n	8002844 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80027da:	f7fe fbbb 	bl	8000f54 <HAL_GetTick>
 80027de:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	0199      	lsls	r1, r3, #6
 80027e4:	d41e      	bmi.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e6:	6a22      	ldr	r2, [r4, #32]
 80027e8:	69e3      	ldr	r3, [r4, #28]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4c0d      	ldr	r4, [pc, #52]	; (8002830 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	3a01      	subs	r2, #1
 8002800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002804:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002806:	2301      	movs	r3, #1
 8002808:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800280a:	f7fe fba3 	bl	8000f54 <HAL_GetTick>
 800280e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	019a      	lsls	r2, r3, #6
 8002814:	f53f aebc 	bmi.w	8002590 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe fb9c 	bl	8000f54 <HAL_GetTick>
 800281c:	1b40      	subs	r0, r0, r5
 800281e:	2802      	cmp	r0, #2
 8002820:	d9f6      	bls.n	8002810 <HAL_RCC_OscConfig+0x2b4>
 8002822:	e6e2      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fb96 	bl	8000f54 <HAL_GetTick>
 8002828:	1bc0      	subs	r0, r0, r7
 800282a:	2802      	cmp	r0, #2
 800282c:	d9d8      	bls.n	80027e0 <HAL_RCC_OscConfig+0x284>
 800282e:	e6dc      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
 8002830:	40023800 	.word	0x40023800
 8002834:	42470000 	.word	0x42470000
 8002838:	42470e80 	.word	0x42470e80
 800283c:	40007000 	.word	0x40007000
 8002840:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002844:	f7fe fb86 	bl	8000f54 <HAL_GetTick>
 8002848:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	682b      	ldr	r3, [r5, #0]
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	f57f ae9f 	bpl.w	8002590 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe fb7f 	bl	8000f54 <HAL_GetTick>
 8002856:	1b00      	subs	r0, r0, r4
 8002858:	2802      	cmp	r0, #2
 800285a:	d9f6      	bls.n	800284a <HAL_RCC_OscConfig+0x2ee>
 800285c:	e6c5      	b.n	80025ea <HAL_RCC_OscConfig+0x8e>
 800285e:	bf00      	nop

08002860 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4913      	ldr	r1, [pc, #76]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002862:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002864:	688b      	ldr	r3, [r1, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x16>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002872:	4810      	ldr	r0, [pc, #64]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002874:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002876:	4810      	ldr	r0, [pc, #64]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002878:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002880:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	bf14      	ite	ne
 8002886:	480c      	ldrne	r0, [pc, #48]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002888:	480a      	ldreq	r0, [pc, #40]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800288e:	bf18      	it	ne
 8002890:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002892:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	fba1 0100 	umull	r0, r1, r1, r0
 800289a:	f7fe f989 	bl	8000bb0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x50>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80028aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80028ae:	bd08      	pop	{r3, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_ClockConfig>:
{
 80028bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80028c2:	4604      	mov	r4, r0
 80028c4:	b910      	cbnz	r0, 80028cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_ClockConfig+0x124>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f002 020f 	and.w	r2, r2, #15
 80028d4:	428a      	cmp	r2, r1
 80028d6:	d328      	bcc.n	800292a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	6821      	ldr	r1, [r4, #0]
 80028da:	078f      	lsls	r7, r1, #30
 80028dc:	d42d      	bmi.n	800293a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	07c8      	lsls	r0, r1, #31
 80028e0:	d440      	bmi.n	8002964 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_ClockConfig+0x124>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f002 020f 	and.w	r2, r2, #15
 80028ea:	4295      	cmp	r5, r2
 80028ec:	d366      	bcc.n	80029bc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	0751      	lsls	r1, r2, #29
 80028f2:	d46c      	bmi.n	80029ce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	0713      	lsls	r3, r2, #28
 80028f6:	d507      	bpl.n	8002908 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f8:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
 80028fa:	6921      	ldr	r1, [r4, #16]
 80028fc:	6893      	ldr	r3, [r2, #8]
 80028fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002902:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002906:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002908:	f7ff ffaa 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
 800290e:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <HAL_RCC_ClockConfig+0x12c>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	40d8      	lsrs	r0, r3
 800291a:	4b34      	ldr	r3, [pc, #208]	; (80029ec <HAL_RCC_ClockConfig+0x130>)
 800291c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe face 	bl	8000ec0 <HAL_InitTick>
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4299      	cmp	r1, r3
 8002936:	d1c6      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xa>
 8002938:	e7ce      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1c>
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	bf1e      	ittt	ne
 8002942:	689a      	ldrne	r2, [r3, #8]
 8002944:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002948:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800294c:	bf42      	ittt	mi
 800294e:	689a      	ldrmi	r2, [r3, #8]
 8002950:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002954:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	68a0      	ldr	r0, [r4, #8]
 800295a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800295e:	4302      	orrs	r2, r0
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	e7bc      	b.n	80028de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002964:	6862      	ldr	r2, [r4, #4]
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
 8002968:	2a01      	cmp	r2, #1
 800296a:	d11d      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	d0a8      	beq.n	80028c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002974:	4e1b      	ldr	r6, [pc, #108]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
 8002976:	68b3      	ldr	r3, [r6, #8]
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	4313      	orrs	r3, r2
 800297e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002980:	f7fe fae8 	bl	8000f54 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002988:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	68b3      	ldr	r3, [r6, #8]
 800298c:	6862      	ldr	r2, [r4, #4]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002996:	d0a4      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fadc 	bl	8000f54 <HAL_GetTick>
 800299c:	1bc0      	subs	r0, r0, r7
 800299e:	4540      	cmp	r0, r8
 80029a0:	d9f3      	bls.n	800298a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80029a2:	2003      	movs	r0, #3
}
 80029a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a8:	1e91      	subs	r1, r2, #2
 80029aa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	d802      	bhi.n	80029b6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029b4:	e7dd      	b.n	8002972 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	f013 0f02 	tst.w	r3, #2
 80029ba:	e7da      	b.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	b2ea      	uxtb	r2, r5
 80029be:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	429d      	cmp	r5, r3
 80029c8:	f47f af7d 	bne.w	80028c6 <HAL_RCC_ClockConfig+0xa>
 80029cc:	e78f      	b.n	80028ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ce:	4905      	ldr	r1, [pc, #20]	; (80029e4 <HAL_RCC_ClockConfig+0x128>)
 80029d0:	68e0      	ldr	r0, [r4, #12]
 80029d2:	688b      	ldr	r3, [r1, #8]
 80029d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80029d8:	4303      	orrs	r3, r0
 80029da:	608b      	str	r3, [r1, #8]
 80029dc:	e78a      	b.n	80028f4 <HAL_RCC_ClockConfig+0x38>
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080056ad 	.word	0x080056ad
 80029ec:	20000008 	.word	0x20000008

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029fe:	6810      	ldr	r0, [r2, #0]
}
 8002a00:	40d8      	lsrs	r0, r3
 8002a02:	4770      	bx	lr
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080056bd 	.word	0x080056bd
 8002a0c:	20000008 	.word	0x20000008

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a1e:	6810      	ldr	r0, [r2, #0]
}
 8002a20:	40d8      	lsrs	r0, r3
 8002a22:	4770      	bx	lr
 8002a24:	40023800 	.word	0x40023800
 8002a28:	080056bd 	.word	0x080056bd
 8002a2c:	20000008 	.word	0x20000008

08002a30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a30:	6803      	ldr	r3, [r0, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a42:	2320      	movs	r3, #32
 8002a44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002a48:	4770      	bx	lr
	...

08002a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a50:	6806      	ldr	r6, [r0, #0]
 8002a52:	68c2      	ldr	r2, [r0, #12]
 8002a54:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a56:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6133      	str	r3, [r6, #16]
{
 8002a60:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a62:	6883      	ldr	r3, [r0, #8]
 8002a64:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002a66:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a68:	4303      	orrs	r3, r0
 8002a6a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002a6c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a70:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a72:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a76:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7c:	6973      	ldr	r3, [r6, #20]
 8002a7e:	69a2      	ldr	r2, [r4, #24]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a84:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a86:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8a:	6173      	str	r3, [r6, #20]
 8002a8c:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a8e:	d17c      	bne.n	8002b8a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a90:	429e      	cmp	r6, r3
 8002a92:	d003      	beq.n	8002a9c <UART_SetConfig+0x50>
 8002a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a98:	429e      	cmp	r6, r3
 8002a9a:	d144      	bne.n	8002b26 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a9c:	f7ff ffb8 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002aa0:	2519      	movs	r5, #25
 8002aa2:	fb05 f300 	mul.w	r3, r5, r0
 8002aa6:	6860      	ldr	r0, [r4, #4]
 8002aa8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002aac:	0040      	lsls	r0, r0, #1
 8002aae:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ab2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ab6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002aba:	f7ff ffa9 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	4368      	muls	r0, r5
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb0 f7f3 	udiv	r7, r0, r3
 8002ac8:	f7ff ffa2 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002acc:	6863      	ldr	r3, [r4, #4]
 8002ace:	4368      	muls	r0, r5
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ada:	fb09 7313 	mls	r3, r9, r3, r7
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3332      	adds	r3, #50	; 0x32
 8002ae2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002aec:	f7ff ff90 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002af0:	6862      	ldr	r2, [r4, #4]
 8002af2:	4368      	muls	r0, r5
 8002af4:	0052      	lsls	r2, r2, #1
 8002af6:	fbb0 faf2 	udiv	sl, r0, r2
 8002afa:	f7ff ff89 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002afe:	6863      	ldr	r3, [r4, #4]
 8002b00:	4368      	muls	r0, r5
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b0c:	fb09 a313 	mls	r3, r9, r3, sl
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	3332      	adds	r3, #50	; 0x32
 8002b14:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b1e:	443b      	add	r3, r7
 8002b20:	60b3      	str	r3, [r6, #8]
 8002b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b26:	f7ff ff63 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002b2a:	2519      	movs	r5, #25
 8002b2c:	fb05 f300 	mul.w	r3, r5, r0
 8002b30:	6860      	ldr	r0, [r4, #4]
 8002b32:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b36:	0040      	lsls	r0, r0, #1
 8002b38:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b3c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b44:	f7ff ff54 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002b48:	6863      	ldr	r3, [r4, #4]
 8002b4a:	4368      	muls	r0, r5
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b52:	f7ff ff4d 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002b56:	6863      	ldr	r3, [r4, #4]
 8002b58:	4368      	muls	r0, r5
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b64:	fb09 7313 	mls	r3, r9, r3, r7
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	3332      	adds	r3, #50	; 0x32
 8002b6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002b76:	f7ff ff3b 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002b7a:	6862      	ldr	r2, [r4, #4]
 8002b7c:	4368      	muls	r0, r5
 8002b7e:	0052      	lsls	r2, r2, #1
 8002b80:	fbb0 faf2 	udiv	sl, r0, r2
 8002b84:	f7ff ff34 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002b88:	e7b9      	b.n	8002afe <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b8a:	429e      	cmp	r6, r3
 8002b8c:	d002      	beq.n	8002b94 <UART_SetConfig+0x148>
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <UART_SetConfig+0x230>)
 8002b90:	429e      	cmp	r6, r3
 8002b92:	d140      	bne.n	8002c16 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b94:	f7ff ff3c 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002b98:	6867      	ldr	r7, [r4, #4]
 8002b9a:	2519      	movs	r5, #25
 8002b9c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002ba0:	fb05 f300 	mul.w	r3, r5, r0
 8002ba4:	00bf      	lsls	r7, r7, #2
 8002ba6:	fbb3 f3f7 	udiv	r3, r3, r7
 8002baa:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bae:	011f      	lsls	r7, r3, #4
 8002bb0:	f7ff ff2e 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	4368      	muls	r0, r5
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fbb0 f8f3 	udiv	r8, r0, r3
 8002bbe:	f7ff ff27 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	4368      	muls	r0, r5
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bcc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bd0:	fb09 8313 	mls	r3, r9, r3, r8
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bdc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002be0:	f7ff ff16 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8002be4:	6862      	ldr	r2, [r4, #4]
 8002be6:	4368      	muls	r0, r5
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	fbb0 faf2 	udiv	sl, r0, r2
 8002bee:	f7ff ff0f 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bf2:	6863      	ldr	r3, [r4, #4]
 8002bf4:	4368      	muls	r0, r5
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c00:	fb09 a313 	mls	r3, r9, r3, sl
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	ea43 0308 	orr.w	r3, r3, r8
 8002c14:	e783      	b.n	8002b1e <UART_SetConfig+0xd2>
 8002c16:	f7ff feeb 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002c1a:	6867      	ldr	r7, [r4, #4]
 8002c1c:	2519      	movs	r5, #25
 8002c1e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002c22:	fb05 f300 	mul.w	r3, r5, r0
 8002c26:	00bf      	lsls	r7, r7, #2
 8002c28:	fbb3 f3f7 	udiv	r3, r3, r7
 8002c2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c30:	011f      	lsls	r7, r3, #4
 8002c32:	f7ff fedd 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002c36:	6863      	ldr	r3, [r4, #4]
 8002c38:	4368      	muls	r0, r5
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002c40:	f7ff fed6 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	4368      	muls	r0, r5
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c52:	fb09 8313 	mls	r3, r9, r3, r8
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	3332      	adds	r3, #50	; 0x32
 8002c5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c5e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002c62:	f7ff fec5 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	4368      	muls	r0, r5
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	fbb0 faf2 	udiv	sl, r0, r2
 8002c70:	f7ff febe 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8002c74:	e7bd      	b.n	8002bf2 <UART_SetConfig+0x1a6>
 8002c76:	bf00      	nop
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400

08002c80 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	4604      	mov	r4, r0
 8002c84:	460e      	mov	r6, r1
 8002c86:	4617      	mov	r7, r2
 8002c88:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8a:	6821      	ldr	r1, [r4, #0]
 8002c8c:	680b      	ldr	r3, [r1, #0]
 8002c8e:	ea36 0303 	bics.w	r3, r6, r3
 8002c92:	d101      	bne.n	8002c98 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002c94:	2000      	movs	r0, #0
}
 8002c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	1c6b      	adds	r3, r5, #1
 8002c9a:	d0f7      	beq.n	8002c8c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c9c:	b995      	cbnz	r5, 8002cc4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ca6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc4:	f7fe f946 	bl	8000f54 <HAL_GetTick>
 8002cc8:	1bc0      	subs	r0, r0, r7
 8002cca:	4285      	cmp	r5, r0
 8002ccc:	d2dd      	bcs.n	8002c8a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002cce:	e7e6      	b.n	8002c9e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002cd0 <HAL_UART_Init>:
{
 8002cd0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	b340      	cbz	r0, 8002d28 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cde:	b91b      	cbnz	r3, 8002ce8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002ce0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002ce4:	f000 fb58 	bl	8003398 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002ce8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cea:	2324      	movs	r3, #36	; 0x24
 8002cec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002cf0:	68d3      	ldr	r3, [r2, #12]
 8002cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cf6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff fea7 	bl	8002a4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d16:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d1a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d22:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002d26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d28:	2001      	movs	r0, #1
}
 8002d2a:	bd10      	pop	{r4, pc}

08002d2c <HAL_UART_Transmit>:
{
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d30:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d36:	2b20      	cmp	r3, #32
{
 8002d38:	4604      	mov	r4, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3e:	d14f      	bne.n	8002de0 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d04a      	beq.n	8002dda <HAL_UART_Transmit+0xae>
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	d048      	beq.n	8002dda <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002d48:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d047      	beq.n	8002de0 <HAL_UART_Transmit+0xb4>
 8002d50:	2301      	movs	r3, #1
 8002d52:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5a:	2321      	movs	r3, #33	; 0x21
 8002d5c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002d60:	f7fe f8f8 	bl	8000f54 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002d64:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002d68:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002d6a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b96b      	cbnz	r3, 8002d90 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d74:	463b      	mov	r3, r7
 8002d76:	4632      	mov	r2, r6
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff ff80 	bl	8002c80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002d80:	b9b0      	cbnz	r0, 8002db0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002d82:	2320      	movs	r3, #32
 8002d84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002d88:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002d90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d98:	68a3      	ldr	r3, [r4, #8]
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	4632      	mov	r2, r6
 8002da0:	463b      	mov	r3, r7
 8002da2:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002da6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002da8:	d10e      	bne.n	8002dc8 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	f7ff ff69 	bl	8002c80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002dae:	b110      	cbz	r0, 8002db6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002db0:	2003      	movs	r0, #3
 8002db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002db6:	882b      	ldrh	r3, [r5, #0]
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dc0:	6923      	ldr	r3, [r4, #16]
 8002dc2:	b943      	cbnz	r3, 8002dd6 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002dc4:	3502      	adds	r5, #2
 8002dc6:	e7d2      	b.n	8002d6e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc8:	f7ff ff5a 	bl	8002c80 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d1ef      	bne.n	8002db0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	782a      	ldrb	r2, [r5, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	3501      	adds	r5, #1
 8002dd8:	e7c9      	b.n	8002d6e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002de0:	2002      	movs	r0, #2
}
 8002de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002de6 <HAL_UART_TxCpltCallback>:
 8002de6:	4770      	bx	lr

08002de8 <HAL_UART_RxCpltCallback>:
 8002de8:	4770      	bx	lr

08002dea <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dea:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002dee:	2b22      	cmp	r3, #34	; 0x22
{
 8002df0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df2:	d136      	bne.n	8002e62 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002df4:	6883      	ldr	r3, [r0, #8]
 8002df6:	6901      	ldr	r1, [r0, #16]
 8002df8:	6802      	ldr	r2, [r0, #0]
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e00:	d123      	bne.n	8002e4a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e02:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e04:	b9e9      	cbnz	r1, 8002e42 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002e0e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002e10:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002e12:	3c01      	subs	r4, #1
 8002e14:	b2a4      	uxth	r4, r4
 8002e16:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002e18:	b98c      	cbnz	r4, 8002e3e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	f022 0220 	bic.w	r2, r2, #32
 8002e22:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e2a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002e34:	2320      	movs	r3, #32
 8002e36:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002e3a:	f7ff ffd5 	bl	8002de8 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002e3e:	2000      	movs	r0, #0
}
 8002e40:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f823 2b01 	strh.w	r2, [r3], #1
 8002e48:	e7e1      	b.n	8002e0e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e4a:	b921      	cbnz	r1, 8002e56 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	6852      	ldr	r2, [r2, #4]
 8002e50:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e7dc      	b.n	8002e10 <UART_Receive_IT+0x26>
 8002e56:	6852      	ldr	r2, [r2, #4]
 8002e58:	1c59      	adds	r1, r3, #1
 8002e5a:	6281      	str	r1, [r0, #40]	; 0x28
 8002e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e60:	e7f7      	b.n	8002e52 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002e62:	2002      	movs	r0, #2
 8002e64:	bd10      	pop	{r4, pc}

08002e66 <HAL_UART_ErrorCallback>:
 8002e66:	4770      	bx	lr

08002e68 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e6c:	68d9      	ldr	r1, [r3, #12]
{
 8002e6e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002e70:	0716      	lsls	r6, r2, #28
{
 8002e72:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e74:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002e76:	d107      	bne.n	8002e88 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e78:	0696      	lsls	r6, r2, #26
 8002e7a:	d55a      	bpl.n	8002f32 <HAL_UART_IRQHandler+0xca>
 8002e7c:	068d      	lsls	r5, r1, #26
 8002e7e:	d558      	bpl.n	8002f32 <HAL_UART_IRQHandler+0xca>
}
 8002e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002e84:	f7ff bfb1 	b.w	8002dea <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e88:	f015 0501 	ands.w	r5, r5, #1
 8002e8c:	d102      	bne.n	8002e94 <HAL_UART_IRQHandler+0x2c>
 8002e8e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002e92:	d04e      	beq.n	8002f32 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e94:	07d3      	lsls	r3, r2, #31
 8002e96:	d505      	bpl.n	8002ea4 <HAL_UART_IRQHandler+0x3c>
 8002e98:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9a:	bf42      	ittt	mi
 8002e9c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002e9e:	f043 0301 	orrmi.w	r3, r3, #1
 8002ea2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea4:	0750      	lsls	r0, r2, #29
 8002ea6:	d504      	bpl.n	8002eb2 <HAL_UART_IRQHandler+0x4a>
 8002ea8:	b11d      	cbz	r5, 8002eb2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eb2:	0793      	lsls	r3, r2, #30
 8002eb4:	d504      	bpl.n	8002ec0 <HAL_UART_IRQHandler+0x58>
 8002eb6:	b11d      	cbz	r5, 8002ec0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec0:	0716      	lsls	r6, r2, #28
 8002ec2:	d504      	bpl.n	8002ece <HAL_UART_IRQHandler+0x66>
 8002ec4:	b11d      	cbz	r5, 8002ece <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d066      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed4:	0695      	lsls	r5, r2, #26
 8002ed6:	d504      	bpl.n	8002ee2 <HAL_UART_IRQHandler+0x7a>
 8002ed8:	0688      	lsls	r0, r1, #26
 8002eda:	d502      	bpl.n	8002ee2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff ff84 	bl	8002dea <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ee6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ee8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002eea:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eec:	d402      	bmi.n	8002ef4 <HAL_UART_IRQHandler+0x8c>
 8002eee:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002ef2:	d01a      	beq.n	8002f2a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002ef4:	f7ff fd9c 	bl	8002a30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	0652      	lsls	r2, r2, #25
 8002efe:	d510      	bpl.n	8002f22 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f00:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f02:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f08:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f0a:	b150      	cbz	r0, 8002f22 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_UART_IRQHandler+0x13c>)
 8002f0e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f10:	f7fe f8a4 	bl	800105c <HAL_DMA_Abort_IT>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d044      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f18:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002f20:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff ff9f 	bl	8002e66 <HAL_UART_ErrorCallback>
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002f2a:	f7ff ff9c 	bl	8002e66 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f32:	0616      	lsls	r6, r2, #24
 8002f34:	d527      	bpl.n	8002f86 <HAL_UART_IRQHandler+0x11e>
 8002f36:	060d      	lsls	r5, r1, #24
 8002f38:	d525      	bpl.n	8002f86 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f3a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002f3e:	2a21      	cmp	r2, #33	; 0x21
 8002f40:	d12f      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f42:	68a2      	ldr	r2, [r4, #8]
 8002f44:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f48:	6a22      	ldr	r2, [r4, #32]
 8002f4a:	d117      	bne.n	8002f7c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f4c:	8811      	ldrh	r1, [r2, #0]
 8002f4e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002f52:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f54:	6921      	ldr	r1, [r4, #16]
 8002f56:	b979      	cbnz	r1, 8002f78 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002f58:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002f5a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002f5c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	b292      	uxth	r2, r2
 8002f62:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002f64:	b9ea      	cbnz	r2, 8002fa2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002f78:	3201      	adds	r2, #1
 8002f7a:	e7ee      	b.n	8002f5a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f7c:	1c51      	adds	r1, r2, #1
 8002f7e:	6221      	str	r1, [r4, #32]
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	e7ea      	b.n	8002f5c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f86:	0650      	lsls	r0, r2, #25
 8002f88:	d50b      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0x13a>
 8002f8a:	064a      	lsls	r2, r1, #25
 8002f8c:	d509      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f94:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002f96:	2320      	movs	r3, #32
 8002f98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7ff ff22 	bl	8002de6 <HAL_UART_TxCpltCallback>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	08002fa9 	.word	0x08002fa9

08002fa8 <UART_DMAAbortOnError>:
{
 8002fa8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002faa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fb0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002fb2:	f7ff ff58 	bl	8002e66 <HAL_UART_ErrorCallback>
 8002fb6:	bd08      	pop	{r3, pc}

08002fb8 <am2320_init>:
Am2320_HandleTypeDef am2320_init(I2C_HandleTypeDef* i2c_handel,
		uint8_t device_address) {
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handel = i2c_handel;
	AM2320_.device_address = device_address;
	return AM2320_;
 8002fb8:	6001      	str	r1, [r0, #0]
 8002fba:	7102      	strb	r2, [r0, #4]
}
 8002fbc:	4770      	bx	lr
	...

08002fc0 <am2320_readValue1>:

uint8_t am2320_readValue1(Am2320_HandleTypeDef *am2320) {
 8002fc0:	b530      	push	{r4, r5, lr}
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <am2320_readValue1+0x70>)
	HAL_I2C_Master_Transmit(am2320->i2c_handel, am2320->device_address, 0x00, 0,
 8002fc4:	7901      	ldrb	r1, [r0, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	789b      	ldrb	r3, [r3, #2]
uint8_t am2320_readValue1(Am2320_HandleTypeDef *am2320) {
 8002fca:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(am2320->i2c_handel, am2320->device_address, 0x00, 0,
 8002fcc:	f04f 35ff 	mov.w	r5, #4294967295
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002fd0:	f88d 300e 	strb.w	r3, [sp, #14]
	HAL_I2C_Master_Transmit(am2320->i2c_handel, am2320->device_address, 0x00, 0,
 8002fd4:	9500      	str	r5, [sp, #0]
 8002fd6:	2300      	movs	r3, #0
uint8_t am2320_readValue1(Am2320_HandleTypeDef *am2320) {
 8002fd8:	4604      	mov	r4, r0
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8002fda:	f8ad 200c 	strh.w	r2, [sp, #12]
	HAL_I2C_Master_Transmit(am2320->i2c_handel, am2320->device_address, 0x00, 0,
 8002fde:	6800      	ldr	r0, [r0, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f7fe fadd 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fd ffba 	bl	8000f60 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handel, am2320->device_address,
 8002fec:	7921      	ldrb	r1, [r4, #4]
 8002fee:	9500      	str	r5, [sp, #0]
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	aa03      	add	r2, sp, #12
 8002ff4:	6820      	ldr	r0, [r4, #0]
 8002ff6:	f7fe fad3 	bl	80015a0 <HAL_I2C_Master_Transmit>
 8002ffa:	b9a0      	cbnz	r0, 8003026 <am2320_readValue1+0x66>
			registers, 3, HAL_MAX_DELAY) != HAL_OK) {
		return 1;
	}
	HAL_Delay(2);
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f7fd ffaf 	bl	8000f60 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handel, am2320->device_address,
 8003002:	7921      	ldrb	r1, [r4, #4]
 8003004:	9500      	str	r5, [sp, #0]
 8003006:	2308      	movs	r3, #8
 8003008:	1d62      	adds	r2, r4, #5
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	f7fe fb96 	bl	800173c <HAL_I2C_Master_Receive>
 8003010:	b958      	cbnz	r0, 800302a <am2320_readValue1+0x6a>
			am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
		return 2;
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 8003012:	79a3      	ldrb	r3, [r4, #6]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d004      	beq.n	8003022 <am2320_readValue1+0x62>
 8003018:	7963      	ldrb	r3, [r4, #5]
		return 3;
 800301a:	2b03      	cmp	r3, #3
 800301c:	bf0c      	ite	eq
 800301e:	2000      	moveq	r0, #0
 8003020:	2003      	movne	r0, #3
	}
	//TODO 04.08.2019 add CRC calculation
	return 0;
}
 8003022:	b005      	add	sp, #20
 8003024:	bd30      	pop	{r4, r5, pc}
		return 1;
 8003026:	2001      	movs	r0, #1
 8003028:	e7fb      	b.n	8003022 <am2320_readValue1+0x62>
		return 2;
 800302a:	2002      	movs	r0, #2
 800302c:	e7f9      	b.n	8003022 <am2320_readValue1+0x62>
 800302e:	bf00      	nop
 8003030:	08005658 	.word	0x08005658

08003034 <am2320_getValue>:

void am2320_getValue(Am2320_HandleTypeDef *am2320, float *temperature,
		float *humidity) {
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4604      	mov	r4, r0
 8003038:	4615      	mov	r5, r2
 800303a:	460e      	mov	r6, r1
	int read = am2320_readValue1(am2320);
 800303c:	f7ff ffc0 	bl	8002fc0 <am2320_readValue1>
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 8003040:	7a63      	ldrb	r3, [r4, #9]
 8003042:	7aa0      	ldrb	r0, [r4, #10]
 8003044:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003048:	b200      	sxth	r0, r0
 800304a:	b283      	uxth	r3, r0
	if (temp_temperature & 0x8000) {
 800304c:	2800      	cmp	r0, #0
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 800304e:	bfbe      	ittt	lt
 8003050:	f3c3 030e 	ubfxlt	r3, r3, #0, #15
 8003054:	425b      	neglt	r3, r3
 8003056:	b29b      	uxthlt	r3, r3
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003060:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003064:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003068:	edc6 6a00 	vstr	s13, [r6]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 800306c:	79e2      	ldrb	r2, [r4, #7]
 800306e:	7a23      	ldrb	r3, [r4, #8]
 8003070:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003080:	edc5 6a00 	vstr	s13, [r5]
 8003084:	bd70      	pop	{r4, r5, r6, pc}
	...

08003088 <vprint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 8003088:	b500      	push	{lr}
 800308a:	b0b3      	sub	sp, #204	; 0xcc
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 800308c:	460a      	mov	r2, r1
 800308e:	4601      	mov	r1, r0
 8003090:	4668      	mov	r0, sp
 8003092:	f000 fef9 	bl	8003e88 <vsiprintf>
 8003096:	2800      	cmp	r0, #0
 8003098:	dd09      	ble.n	80030ae <vprint+0x26>
			{
		HAL_UART_Transmit(&huart2, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 800309a:	4668      	mov	r0, sp
 800309c:	f7fd f8a0 	bl	80001e0 <strlen>
 80030a0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80030a4:	b282      	uxth	r2, r0
 80030a6:	4669      	mov	r1, sp
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <vprint+0x2c>)
 80030aa:	f7ff fe3f 	bl	8002d2c <HAL_UART_Transmit>
	}
}
 80030ae:	b033      	add	sp, #204	; 0xcc
 80030b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b4:	2000025c 	.word	0x2000025c

080030b8 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 80030b8:	b40f      	push	{r0, r1, r2, r3}
 80030ba:	b507      	push	{r0, r1, r2, lr}
 80030bc:	a904      	add	r1, sp, #16
 80030be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list argp;
	va_start(argp, fmt);
 80030c2:	9101      	str	r1, [sp, #4]
	vprint(fmt, argp);
 80030c4:	f7ff ffe0 	bl	8003088 <vprint>
	va_end(argp);
}
 80030c8:	b003      	add	sp, #12
 80030ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80030ce:	b004      	add	sp, #16
 80030d0:	4770      	bx	lr
	...

080030d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030d4:	b530      	push	{r4, r5, lr}
 80030d6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80030d8:	2230      	movs	r2, #48	; 0x30
 80030da:	2100      	movs	r1, #0
 80030dc:	a808      	add	r0, sp, #32
 80030de:	f000 fa47 	bl	8003570 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80030e2:	2100      	movs	r1, #0
 80030e4:	2214      	movs	r2, #20
 80030e6:	a803      	add	r0, sp, #12
 80030e8:	f000 fa42 	bl	8003570 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80030ec:	2400      	movs	r4, #0
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <SystemClock_Config+0x8c>)
 80030f0:	9401      	str	r4, [sp, #4]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <SystemClock_Config+0x90>)
	__HAL_RCC_PWR_CLK_ENABLE()
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003106:	9402      	str	r4, [sp, #8]
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	6813      	ldr	r3, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003116:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003120:	2301      	movs	r3, #1
 8003122:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003124:	2310      	movs	r3, #16
 8003126:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 16;
 8003128:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800312a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800312e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003130:	2304      	movs	r3, #4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003132:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003134:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003136:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003138:	2307      	movs	r3, #7
 800313a:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800313c:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800313e:	950e      	str	r5, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003140:	f7ff fa0c 	bl	800255c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003144:	230f      	movs	r3, #15
 8003146:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003148:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800314a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800314e:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003150:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003152:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003154:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003156:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003158:	f7ff fbb0 	bl	80028bc <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 800315c:	b015      	add	sp, #84	; 0x54
 800315e:	bd30      	pop	{r4, r5, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000

08003168 <main>:
int main(void) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b08e      	sub	sp, #56	; 0x38
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800316c:	ae09      	add	r6, sp, #36	; 0x24
	HAL_Init();
 800316e:	f7fd fecb 	bl	8000f08 <HAL_Init>
	SystemClock_Config();
 8003172:	f7ff ffaf 	bl	80030d4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003176:	2214      	movs	r2, #20
 8003178:	2100      	movs	r1, #0
 800317a:	4630      	mov	r0, r6
 800317c:	f000 f9f8 	bl	8003570 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003180:	2400      	movs	r4, #0
 8003182:	4b44      	ldr	r3, [pc, #272]	; (8003294 <main+0x12c>)
 8003184:	9406      	str	r4, [sp, #24]
 8003186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003188:	4843      	ldr	r0, [pc, #268]	; (8003298 <main+0x130>)
	hi2c1.Instance = I2C1;
 800318a:	4d44      	ldr	r5, [pc, #272]	; (800329c <main+0x134>)
		my_printf("=====================================\r\n");
 800318c:	4f44      	ldr	r7, [pc, #272]	; (80032a0 <main+0x138>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800318e:	f042 0204 	orr.w	r2, r2, #4
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	f002 0204 	and.w	r2, r2, #4
 800319a:	9206      	str	r2, [sp, #24]
 800319c:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800319e:	9407      	str	r4, [sp, #28]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	f002 0201 	and.w	r2, r2, #1
 80031ae:	9207      	str	r2, [sp, #28]
 80031b0:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80031b2:	9408      	str	r4, [sp, #32]
 80031b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b6:	f042 0202 	orr.w	r2, r2, #2
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031c2:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80031c4:	9308      	str	r3, [sp, #32]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031c6:	2120      	movs	r1, #32
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80031c8:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031ca:	f7fe f833 	bl	8001234 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80031ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031d4:	4631      	mov	r1, r6
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031d6:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <main+0x13c>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031d8:	4833      	ldr	r0, [pc, #204]	; (80032a8 <main+0x140>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031da:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031de:	f7fd ff53 	bl	8001088 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80031e2:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031e4:	4631      	mov	r1, r6
	GPIO_InitStruct.Pin = LD2_Pin;
 80031e6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031e8:	482b      	ldr	r0, [pc, #172]	; (8003298 <main+0x130>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ec:	2301      	movs	r3, #1
 80031ee:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f7fd ff49 	bl	8001088 <HAL_GPIO_Init>
	hi2c1.Init.ClockSpeed = 100000;
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <main+0x144>)
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <main+0x148>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031fa:	60ac      	str	r4, [r5, #8]
	hi2c1.Init.ClockSpeed = 100000;
 80031fc:	e885 000c 	stmia.w	r5, {r2, r3}
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003200:	4628      	mov	r0, r5
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8003206:	60ec      	str	r4, [r5, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003208:	612b      	str	r3, [r5, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800320a:	616c      	str	r4, [r5, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800320c:	61ac      	str	r4, [r5, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800320e:	61ec      	str	r4, [r5, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003210:	622c      	str	r4, [r5, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003212:	f7fe f921 	bl	8001458 <HAL_I2C_Init>
	huart2.Instance = USART2;
 8003216:	4827      	ldr	r0, [pc, #156]	; (80032b4 <main+0x14c>)
	huart2.Init.BaudRate = 115200;
 8003218:	4927      	ldr	r1, [pc, #156]	; (80032b8 <main+0x150>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800321a:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 800321c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003220:	e880 000a 	stmia.w	r0, {r1, r3}
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003224:	230c      	movs	r3, #12
 8003226:	6143      	str	r3, [r0, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003228:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800322a:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322c:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800322e:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003230:	f7ff fd4e 	bl	8002cd0 <HAL_UART_Init>
	Am2320_ = am2320_init(&hi2c1, 0x5C << 1);
 8003234:	4629      	mov	r1, r5
 8003236:	22b8      	movs	r2, #184	; 0xb8
 8003238:	4668      	mov	r0, sp
 800323a:	f7ff febd 	bl	8002fb8 <am2320_init>
 800323e:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 8003242:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		my_printf("Temperature: %.1fºC\r\n", temperature-9);
 8003246:	4d1d      	ldr	r5, [pc, #116]	; (80032bc <main+0x154>)
		my_printf("Humidity: %.1f%%\r\n", humidity);
 8003248:	4c1d      	ldr	r4, [pc, #116]	; (80032c0 <main+0x158>)
		am2320_getValue(&Am2320_, &temperature, &humidity);
 800324a:	aa05      	add	r2, sp, #20
 800324c:	a904      	add	r1, sp, #16
 800324e:	4630      	mov	r0, r6
 8003250:	f7ff fef0 	bl	8003034 <am2320_getValue>
		my_printf("=====================================\r\n");
 8003254:	4638      	mov	r0, r7
 8003256:	f7ff ff2f 	bl	80030b8 <my_printf>
		my_printf("Temperature: %.1fºC\r\n", temperature-9);
 800325a:	ed9d 7a04 	vldr	s14, [sp, #16]
 800325e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003266:	ee17 0a90 	vmov	r0, s15
 800326a:	f7fd f975 	bl	8000558 <__aeabi_f2d>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4628      	mov	r0, r5
 8003274:	f7ff ff20 	bl	80030b8 <my_printf>
		my_printf("Humidity: %.1f%%\r\n", humidity);
 8003278:	9805      	ldr	r0, [sp, #20]
 800327a:	f7fd f96d 	bl	8000558 <__aeabi_f2d>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff ff18 	bl	80030b8 <my_printf>
		HAL_Delay(3000);
 8003288:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800328c:	f7fd fe68 	bl	8000f60 <HAL_Delay>
 8003290:	e7db      	b.n	800324a <main+0xe2>
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	20000208 	.word	0x20000208
 80032a0:	0800565b 	.word	0x0800565b
 80032a4:	10210000 	.word	0x10210000
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40005400 	.word	0x40005400
 80032b0:	000186a0 	.word	0x000186a0
 80032b4:	2000025c 	.word	0x2000025c
 80032b8:	40004400 	.word	0x40004400
 80032bc:	08005683 	.word	0x08005683
 80032c0:	0800569a 	.word	0x0800569a

080032c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HAL_MspInit+0x3c>)
 80032c8:	2100      	movs	r1, #0
 80032ca:	9100      	str	r1, [sp, #0]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
 80032d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032da:	9200      	str	r2, [sp, #0]
 80032dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	9101      	str	r1, [sp, #4]
 80032e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032f0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032f4:	f7fd fe48 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f8:	b003      	add	sp, #12
 80032fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	4604      	mov	r4, r0
 8003308:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	2214      	movs	r2, #20
 800330c:	2100      	movs	r1, #0
 800330e:	a803      	add	r0, sp, #12
 8003310:	f000 f92e 	bl	8003570 <memset>
  if(hi2c->Instance==I2C1)
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_I2C_MspInit+0x88>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d134      	bne.n	8003386 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	2500      	movs	r5, #0
 800331e:	4c1c      	ldr	r4, [pc, #112]	; (8003390 <HAL_I2C_MspInit+0x8c>)
 8003320:	9501      	str	r5, [sp, #4]
 8003322:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	481b      	ldr	r0, [pc, #108]	; (8003394 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	6323      	str	r3, [r4, #48]	; 0x30
 800332c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800333a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800333c:	2312      	movs	r3, #18
 800333e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003340:	2301      	movs	r3, #1
 8003342:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2303      	movs	r3, #3
 8003346:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003348:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800334a:	2304      	movs	r3, #4
 800334c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f7fd fe9b 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003352:	9502      	str	r5, [sp, #8]
 8003354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800335a:	6423      	str	r3, [r4, #64]	; 0x40
 800335c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800335e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003362:	462a      	mov	r2, r5
 8003364:	4629      	mov	r1, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003366:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003368:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800336c:	f7fd fe1e 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003370:	201f      	movs	r0, #31
 8003372:	f7fd fe4f 	bl	8001014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003376:	2020      	movs	r0, #32
 8003378:	462a      	mov	r2, r5
 800337a:	4629      	mov	r1, r5
 800337c:	f7fd fe16 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003380:	2020      	movs	r0, #32
 8003382:	f7fd fe47 	bl	8001014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003386:	b009      	add	sp, #36	; 0x24
 8003388:	bd30      	pop	{r4, r5, pc}
 800338a:	bf00      	nop
 800338c:	40005400 	.word	0x40005400
 8003390:	40023800 	.word	0x40023800
 8003394:	40020400 	.word	0x40020400

08003398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003398:	b510      	push	{r4, lr}
 800339a:	4604      	mov	r4, r0
 800339c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339e:	2214      	movs	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	a803      	add	r0, sp, #12
 80033a4:	f000 f8e4 	bl	8003570 <memset>
  if(huart->Instance==USART2)
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <HAL_UART_MspInit+0x70>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d128      	bne.n	8003402 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80033b4:	2400      	movs	r4, #0
 80033b6:	9401      	str	r4, [sp, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ba:	4814      	ldr	r0, [pc, #80]	; (800340c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80033bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
 80033c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80033c8:	9201      	str	r2, [sp, #4]
 80033ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	9402      	str	r4, [sp, #8]
 80033ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033e0:	230c      	movs	r3, #12
 80033e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ea:	2307      	movs	r3, #7
 80033ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	f7fd fe4b 	bl	8001088 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033f2:	2026      	movs	r0, #38	; 0x26
 80033f4:	4622      	mov	r2, r4
 80033f6:	4621      	mov	r1, r4
 80033f8:	f7fd fdd8 	bl	8000fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033fc:	2026      	movs	r0, #38	; 0x26
 80033fe:	f7fd fe09 	bl	8001014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003402:	b008      	add	sp, #32
 8003404:	bd10      	pop	{r4, pc}
 8003406:	bf00      	nop
 8003408:	40004400 	.word	0x40004400
 800340c:	40020000 	.word	0x40020000

08003410 <NMI_Handler>:
 8003410:	4770      	bx	lr

08003412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003412:	e7fe      	b.n	8003412 <HardFault_Handler>

08003414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler>

08003416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003416:	e7fe      	b.n	8003416 <BusFault_Handler>

08003418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003418:	e7fe      	b.n	8003418 <UsageFault_Handler>

0800341a <SVC_Handler>:
 800341a:	4770      	bx	lr

0800341c <DebugMon_Handler>:
 800341c:	4770      	bx	lr

0800341e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341e:	4770      	bx	lr

08003420 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003420:	f7fd bd8c 	b.w	8000f3c <HAL_IncTick>

08003424 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <I2C1_EV_IRQHandler+0x8>)
 8003426:	f7fe bbdf 	b.w	8001be8 <HAL_I2C_EV_IRQHandler>
 800342a:	bf00      	nop
 800342c:	20000208 	.word	0x20000208

08003430 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <I2C1_ER_IRQHandler+0x8>)
 8003432:	f7fe bffd 	b.w	8002430 <HAL_I2C_ER_IRQHandler>
 8003436:	bf00      	nop
 8003438:	20000208 	.word	0x20000208

0800343c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <USART2_IRQHandler+0x8>)
 800343e:	f7ff bd13 	b.w	8002e68 <HAL_UART_IRQHandler>
 8003442:	bf00      	nop
 8003444:	2000025c 	.word	0x2000025c

08003448 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003448:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <_sbrk+0x2c>)
 800344c:	6819      	ldr	r1, [r3, #0]
{
 800344e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003450:	b909      	cbnz	r1, 8003456 <_sbrk+0xe>
		heap_end = &end;
 8003452:	4909      	ldr	r1, [pc, #36]	; (8003478 <_sbrk+0x30>)
 8003454:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003456:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003458:	4669      	mov	r1, sp
 800345a:	4402      	add	r2, r0
 800345c:	428a      	cmp	r2, r1
 800345e:	d906      	bls.n	800346e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003460:	f000 f85c 	bl	800351c <__errno>
 8003464:	230c      	movs	r3, #12
 8003466:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800346e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003470:	bd08      	pop	{r3, pc}
 8003472:	bf00      	nop
 8003474:	200001f8 	.word	0x200001f8
 8003478:	200002a0 	.word	0x200002a0

0800347c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800347c:	490f      	ldr	r1, [pc, #60]	; (80034bc <SystemInit+0x40>)
 800347e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003482:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <SystemInit+0x44>)
 800348c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800348e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003490:	f042 0201 	orr.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003496:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800349e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <SystemInit+0x48>)
 80034a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b6:	608b      	str	r3, [r1, #8]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00
 80034c0:	40023800 	.word	0x40023800
 80034c4:	24003010 	.word	0x24003010

080034c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034ce:	e003      	b.n	80034d8 <LoopCopyDataInit>

080034d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034d6:	3104      	adds	r1, #4

080034d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034d8:	480b      	ldr	r0, [pc, #44]	; (8003508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034e0:	d3f6      	bcc.n	80034d0 <CopyDataInit>
  ldr  r2, =_sbss
 80034e2:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034e4:	e002      	b.n	80034ec <LoopFillZerobss>

080034e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034e8:	f842 3b04 	str.w	r3, [r2], #4

080034ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034f0:	d3f9      	bcc.n	80034e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034f2:	f7ff ffc3 	bl	800347c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f6:	f000 f817 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034fa:	f7ff fe35 	bl	8003168 <main>
  bx  lr    
 80034fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003500:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003504:	08005930 	.word	0x08005930
  ldr  r0, =_sdata
 8003508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800350c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003510:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003514:	200002a0 	.word	0x200002a0

08003518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003518:	e7fe      	b.n	8003518 <ADC_IRQHandler>
	...

0800351c <__errno>:
 800351c:	4b01      	ldr	r3, [pc, #4]	; (8003524 <__errno+0x8>)
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000000c 	.word	0x2000000c

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4e0d      	ldr	r6, [pc, #52]	; (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	; (8003564 <__libc_init_array+0x3c>)
 800352e:	1ba4      	subs	r4, r4, r6
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2500      	movs	r5, #0
 8003534:	42a5      	cmp	r5, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4e0b      	ldr	r6, [pc, #44]	; (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	; (800356c <__libc_init_array+0x44>)
 800353c:	f002 f880 	bl	8005640 <_init>
 8003540:	1ba4      	subs	r4, r4, r6
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2500      	movs	r5, #0
 8003546:	42a5      	cmp	r5, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003550:	4798      	blx	r3
 8003552:	3501      	adds	r5, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800355a:	4798      	blx	r3
 800355c:	3501      	adds	r5, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	08005928 	.word	0x08005928
 8003564:	08005928 	.word	0x08005928
 8003568:	08005928 	.word	0x08005928
 800356c:	0800592c 	.word	0x0800592c

08003570 <memset>:
 8003570:	4402      	add	r2, r0
 8003572:	4603      	mov	r3, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <__cvt>:
 8003580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003584:	ec55 4b10 	vmov	r4, r5, d0
 8003588:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800358a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800358e:	2d00      	cmp	r5, #0
 8003590:	460e      	mov	r6, r1
 8003592:	4691      	mov	r9, r2
 8003594:	4619      	mov	r1, r3
 8003596:	bfb8      	it	lt
 8003598:	4622      	movlt	r2, r4
 800359a:	462b      	mov	r3, r5
 800359c:	f027 0720 	bic.w	r7, r7, #32
 80035a0:	bfbb      	ittet	lt
 80035a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80035a6:	461d      	movlt	r5, r3
 80035a8:	2300      	movge	r3, #0
 80035aa:	232d      	movlt	r3, #45	; 0x2d
 80035ac:	bfb8      	it	lt
 80035ae:	4614      	movlt	r4, r2
 80035b0:	2f46      	cmp	r7, #70	; 0x46
 80035b2:	700b      	strb	r3, [r1, #0]
 80035b4:	d004      	beq.n	80035c0 <__cvt+0x40>
 80035b6:	2f45      	cmp	r7, #69	; 0x45
 80035b8:	d100      	bne.n	80035bc <__cvt+0x3c>
 80035ba:	3601      	adds	r6, #1
 80035bc:	2102      	movs	r1, #2
 80035be:	e000      	b.n	80035c2 <__cvt+0x42>
 80035c0:	2103      	movs	r1, #3
 80035c2:	ab03      	add	r3, sp, #12
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	ab02      	add	r3, sp, #8
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4632      	mov	r2, r6
 80035cc:	4653      	mov	r3, sl
 80035ce:	ec45 4b10 	vmov	d0, r4, r5
 80035d2:	f000 fcf1 	bl	8003fb8 <_dtoa_r>
 80035d6:	2f47      	cmp	r7, #71	; 0x47
 80035d8:	4680      	mov	r8, r0
 80035da:	d102      	bne.n	80035e2 <__cvt+0x62>
 80035dc:	f019 0f01 	tst.w	r9, #1
 80035e0:	d026      	beq.n	8003630 <__cvt+0xb0>
 80035e2:	2f46      	cmp	r7, #70	; 0x46
 80035e4:	eb08 0906 	add.w	r9, r8, r6
 80035e8:	d111      	bne.n	800360e <__cvt+0x8e>
 80035ea:	f898 3000 	ldrb.w	r3, [r8]
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	d10a      	bne.n	8003608 <__cvt+0x88>
 80035f2:	2200      	movs	r2, #0
 80035f4:	2300      	movs	r3, #0
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fd fa69 	bl	8000ad0 <__aeabi_dcmpeq>
 80035fe:	b918      	cbnz	r0, 8003608 <__cvt+0x88>
 8003600:	f1c6 0601 	rsb	r6, r6, #1
 8003604:	f8ca 6000 	str.w	r6, [sl]
 8003608:	f8da 3000 	ldr.w	r3, [sl]
 800360c:	4499      	add	r9, r3
 800360e:	2200      	movs	r2, #0
 8003610:	2300      	movs	r3, #0
 8003612:	4620      	mov	r0, r4
 8003614:	4629      	mov	r1, r5
 8003616:	f7fd fa5b 	bl	8000ad0 <__aeabi_dcmpeq>
 800361a:	b938      	cbnz	r0, 800362c <__cvt+0xac>
 800361c:	2230      	movs	r2, #48	; 0x30
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	4599      	cmp	r9, r3
 8003622:	d905      	bls.n	8003630 <__cvt+0xb0>
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	9103      	str	r1, [sp, #12]
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e7f8      	b.n	800361e <__cvt+0x9e>
 800362c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003634:	eba3 0308 	sub.w	r3, r3, r8
 8003638:	4640      	mov	r0, r8
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	b004      	add	sp, #16
 800363e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003642 <__exponent>:
 8003642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003644:	4603      	mov	r3, r0
 8003646:	2900      	cmp	r1, #0
 8003648:	bfb8      	it	lt
 800364a:	4249      	neglt	r1, r1
 800364c:	f803 2b02 	strb.w	r2, [r3], #2
 8003650:	bfb4      	ite	lt
 8003652:	222d      	movlt	r2, #45	; 0x2d
 8003654:	222b      	movge	r2, #43	; 0x2b
 8003656:	2909      	cmp	r1, #9
 8003658:	7042      	strb	r2, [r0, #1]
 800365a:	dd20      	ble.n	800369e <__exponent+0x5c>
 800365c:	f10d 0207 	add.w	r2, sp, #7
 8003660:	4617      	mov	r7, r2
 8003662:	260a      	movs	r6, #10
 8003664:	fb91 f5f6 	sdiv	r5, r1, r6
 8003668:	fb06 1115 	mls	r1, r6, r5, r1
 800366c:	3130      	adds	r1, #48	; 0x30
 800366e:	2d09      	cmp	r5, #9
 8003670:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003674:	f102 34ff 	add.w	r4, r2, #4294967295
 8003678:	4629      	mov	r1, r5
 800367a:	dc09      	bgt.n	8003690 <__exponent+0x4e>
 800367c:	3130      	adds	r1, #48	; 0x30
 800367e:	3a02      	subs	r2, #2
 8003680:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003684:	42ba      	cmp	r2, r7
 8003686:	461c      	mov	r4, r3
 8003688:	d304      	bcc.n	8003694 <__exponent+0x52>
 800368a:	1a20      	subs	r0, r4, r0
 800368c:	b003      	add	sp, #12
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003690:	4622      	mov	r2, r4
 8003692:	e7e7      	b.n	8003664 <__exponent+0x22>
 8003694:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003698:	f803 1b01 	strb.w	r1, [r3], #1
 800369c:	e7f2      	b.n	8003684 <__exponent+0x42>
 800369e:	2230      	movs	r2, #48	; 0x30
 80036a0:	461c      	mov	r4, r3
 80036a2:	4411      	add	r1, r2
 80036a4:	f804 2b02 	strb.w	r2, [r4], #2
 80036a8:	7059      	strb	r1, [r3, #1]
 80036aa:	e7ee      	b.n	800368a <__exponent+0x48>

080036ac <_printf_float>:
 80036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	b08d      	sub	sp, #52	; 0x34
 80036b2:	460c      	mov	r4, r1
 80036b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80036b8:	4616      	mov	r6, r2
 80036ba:	461f      	mov	r7, r3
 80036bc:	4605      	mov	r5, r0
 80036be:	f001 fa49 	bl	8004b54 <_localeconv_r>
 80036c2:	6803      	ldr	r3, [r0, #0]
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc fd8a 	bl	80001e0 <strlen>
 80036cc:	2300      	movs	r3, #0
 80036ce:	930a      	str	r3, [sp, #40]	; 0x28
 80036d0:	f8d8 3000 	ldr.w	r3, [r8]
 80036d4:	9005      	str	r0, [sp, #20]
 80036d6:	3307      	adds	r3, #7
 80036d8:	f023 0307 	bic.w	r3, r3, #7
 80036dc:	f103 0208 	add.w	r2, r3, #8
 80036e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036e4:	f8d4 b000 	ldr.w	fp, [r4]
 80036e8:	f8c8 2000 	str.w	r2, [r8]
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80036f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8003702:	f04f 32ff 	mov.w	r2, #4294967295
 8003706:	4ba5      	ldr	r3, [pc, #660]	; (800399c <_printf_float+0x2f0>)
 8003708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800370c:	f7fd fa12 	bl	8000b34 <__aeabi_dcmpun>
 8003710:	2800      	cmp	r0, #0
 8003712:	f040 81fb 	bne.w	8003b0c <_printf_float+0x460>
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	4ba0      	ldr	r3, [pc, #640]	; (800399c <_printf_float+0x2f0>)
 800371c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003720:	f7fd f9ea 	bl	8000af8 <__aeabi_dcmple>
 8003724:	2800      	cmp	r0, #0
 8003726:	f040 81f1 	bne.w	8003b0c <_printf_float+0x460>
 800372a:	2200      	movs	r2, #0
 800372c:	2300      	movs	r3, #0
 800372e:	4640      	mov	r0, r8
 8003730:	4649      	mov	r1, r9
 8003732:	f7fd f9d7 	bl	8000ae4 <__aeabi_dcmplt>
 8003736:	b110      	cbz	r0, 800373e <_printf_float+0x92>
 8003738:	232d      	movs	r3, #45	; 0x2d
 800373a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800373e:	4b98      	ldr	r3, [pc, #608]	; (80039a0 <_printf_float+0x2f4>)
 8003740:	4a98      	ldr	r2, [pc, #608]	; (80039a4 <_printf_float+0x2f8>)
 8003742:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003746:	bf8c      	ite	hi
 8003748:	4690      	movhi	r8, r2
 800374a:	4698      	movls	r8, r3
 800374c:	2303      	movs	r3, #3
 800374e:	f02b 0204 	bic.w	r2, fp, #4
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	6022      	str	r2, [r4, #0]
 8003756:	f04f 0900 	mov.w	r9, #0
 800375a:	9700      	str	r7, [sp, #0]
 800375c:	4633      	mov	r3, r6
 800375e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003760:	4621      	mov	r1, r4
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f9e2 	bl	8003b2c <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	f040 8093 	bne.w	8003894 <_printf_float+0x1e8>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	b00d      	add	sp, #52	; 0x34
 8003774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003778:	6861      	ldr	r1, [r4, #4]
 800377a:	1c4b      	adds	r3, r1, #1
 800377c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003780:	d13f      	bne.n	8003802 <_printf_float+0x156>
 8003782:	2306      	movs	r3, #6
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	2300      	movs	r3, #0
 8003788:	9303      	str	r3, [sp, #12]
 800378a:	ab0a      	add	r3, sp, #40	; 0x28
 800378c:	9302      	str	r3, [sp, #8]
 800378e:	ab09      	add	r3, sp, #36	; 0x24
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	ec49 8b10 	vmov	d0, r8, r9
 8003796:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800379a:	6022      	str	r2, [r4, #0]
 800379c:	f8cd a004 	str.w	sl, [sp, #4]
 80037a0:	6861      	ldr	r1, [r4, #4]
 80037a2:	4628      	mov	r0, r5
 80037a4:	f7ff feec 	bl	8003580 <__cvt>
 80037a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80037ac:	2b47      	cmp	r3, #71	; 0x47
 80037ae:	4680      	mov	r8, r0
 80037b0:	d109      	bne.n	80037c6 <_printf_float+0x11a>
 80037b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b4:	1cd8      	adds	r0, r3, #3
 80037b6:	db02      	blt.n	80037be <_printf_float+0x112>
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	4293      	cmp	r3, r2
 80037bc:	dd57      	ble.n	800386e <_printf_float+0x1c2>
 80037be:	f1aa 0a02 	sub.w	sl, sl, #2
 80037c2:	fa5f fa8a 	uxtb.w	sl, sl
 80037c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80037ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037cc:	d834      	bhi.n	8003838 <_printf_float+0x18c>
 80037ce:	3901      	subs	r1, #1
 80037d0:	4652      	mov	r2, sl
 80037d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037d6:	9109      	str	r1, [sp, #36]	; 0x24
 80037d8:	f7ff ff33 	bl	8003642 <__exponent>
 80037dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037de:	1883      	adds	r3, r0, r2
 80037e0:	2a01      	cmp	r2, #1
 80037e2:	4681      	mov	r9, r0
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	dc02      	bgt.n	80037ee <_printf_float+0x142>
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	07d1      	lsls	r1, r2, #31
 80037ec:	d501      	bpl.n	80037f2 <_printf_float+0x146>
 80037ee:	3301      	adds	r3, #1
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0af      	beq.n	800375a <_printf_float+0xae>
 80037fa:	232d      	movs	r3, #45	; 0x2d
 80037fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003800:	e7ab      	b.n	800375a <_printf_float+0xae>
 8003802:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003806:	d002      	beq.n	800380e <_printf_float+0x162>
 8003808:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800380c:	d1bb      	bne.n	8003786 <_printf_float+0xda>
 800380e:	b189      	cbz	r1, 8003834 <_printf_float+0x188>
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	ab0a      	add	r3, sp, #40	; 0x28
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	ab09      	add	r3, sp, #36	; 0x24
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	ec49 8b10 	vmov	d0, r8, r9
 8003820:	6022      	str	r2, [r4, #0]
 8003822:	f8cd a004 	str.w	sl, [sp, #4]
 8003826:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800382a:	4628      	mov	r0, r5
 800382c:	f7ff fea8 	bl	8003580 <__cvt>
 8003830:	4680      	mov	r8, r0
 8003832:	e7be      	b.n	80037b2 <_printf_float+0x106>
 8003834:	2301      	movs	r3, #1
 8003836:	e7a5      	b.n	8003784 <_printf_float+0xd8>
 8003838:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800383c:	d119      	bne.n	8003872 <_printf_float+0x1c6>
 800383e:	2900      	cmp	r1, #0
 8003840:	6863      	ldr	r3, [r4, #4]
 8003842:	dd0c      	ble.n	800385e <_printf_float+0x1b2>
 8003844:	6121      	str	r1, [r4, #16]
 8003846:	b913      	cbnz	r3, 800384e <_printf_float+0x1a2>
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	07d2      	lsls	r2, r2, #31
 800384c:	d502      	bpl.n	8003854 <_printf_float+0x1a8>
 800384e:	3301      	adds	r3, #1
 8003850:	440b      	add	r3, r1
 8003852:	6123      	str	r3, [r4, #16]
 8003854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003856:	65a3      	str	r3, [r4, #88]	; 0x58
 8003858:	f04f 0900 	mov.w	r9, #0
 800385c:	e7c9      	b.n	80037f2 <_printf_float+0x146>
 800385e:	b913      	cbnz	r3, 8003866 <_printf_float+0x1ba>
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	07d0      	lsls	r0, r2, #31
 8003864:	d501      	bpl.n	800386a <_printf_float+0x1be>
 8003866:	3302      	adds	r3, #2
 8003868:	e7f3      	b.n	8003852 <_printf_float+0x1a6>
 800386a:	2301      	movs	r3, #1
 800386c:	e7f1      	b.n	8003852 <_printf_float+0x1a6>
 800386e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003876:	4293      	cmp	r3, r2
 8003878:	db05      	blt.n	8003886 <_printf_float+0x1da>
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	07d1      	lsls	r1, r2, #31
 8003880:	d5e8      	bpl.n	8003854 <_printf_float+0x1a8>
 8003882:	3301      	adds	r3, #1
 8003884:	e7e5      	b.n	8003852 <_printf_float+0x1a6>
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfd4      	ite	le
 800388a:	f1c3 0302 	rsble	r3, r3, #2
 800388e:	2301      	movgt	r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	e7de      	b.n	8003852 <_printf_float+0x1a6>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	055a      	lsls	r2, r3, #21
 8003898:	d407      	bmi.n	80038aa <_printf_float+0x1fe>
 800389a:	6923      	ldr	r3, [r4, #16]
 800389c:	4642      	mov	r2, r8
 800389e:	4631      	mov	r1, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	47b8      	blx	r7
 80038a4:	3001      	adds	r0, #1
 80038a6:	d12b      	bne.n	8003900 <_printf_float+0x254>
 80038a8:	e761      	b.n	800376e <_printf_float+0xc2>
 80038aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80038ae:	f240 80e2 	bls.w	8003a76 <_printf_float+0x3ca>
 80038b2:	2200      	movs	r2, #0
 80038b4:	2300      	movs	r3, #0
 80038b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038ba:	f7fd f909 	bl	8000ad0 <__aeabi_dcmpeq>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d03c      	beq.n	800393c <_printf_float+0x290>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <_printf_float+0x2fc>)
 80038c6:	4631      	mov	r1, r6
 80038c8:	4628      	mov	r0, r5
 80038ca:	47b8      	blx	r7
 80038cc:	3001      	adds	r0, #1
 80038ce:	f43f af4e 	beq.w	800376e <_printf_float+0xc2>
 80038d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d6:	429a      	cmp	r2, r3
 80038d8:	db02      	blt.n	80038e0 <_printf_float+0x234>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	07d8      	lsls	r0, r3, #31
 80038de:	d50f      	bpl.n	8003900 <_printf_float+0x254>
 80038e0:	9b05      	ldr	r3, [sp, #20]
 80038e2:	9a04      	ldr	r2, [sp, #16]
 80038e4:	4631      	mov	r1, r6
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b8      	blx	r7
 80038ea:	3001      	adds	r0, #1
 80038ec:	f43f af3f 	beq.w	800376e <_printf_float+0xc2>
 80038f0:	f04f 0800 	mov.w	r8, #0
 80038f4:	f104 091a 	add.w	r9, r4, #26
 80038f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	4598      	cmp	r8, r3
 80038fe:	db12      	blt.n	8003926 <_printf_float+0x27a>
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	d509      	bpl.n	800391a <_printf_float+0x26e>
 8003906:	f04f 0800 	mov.w	r8, #0
 800390a:	f104 0919 	add.w	r9, r4, #25
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	4598      	cmp	r8, r3
 8003916:	f2c0 80ee 	blt.w	8003af6 <_printf_float+0x44a>
 800391a:	68e0      	ldr	r0, [r4, #12]
 800391c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800391e:	4298      	cmp	r0, r3
 8003920:	bfb8      	it	lt
 8003922:	4618      	movlt	r0, r3
 8003924:	e725      	b.n	8003772 <_printf_float+0xc6>
 8003926:	2301      	movs	r3, #1
 8003928:	464a      	mov	r2, r9
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	47b8      	blx	r7
 8003930:	3001      	adds	r0, #1
 8003932:	f43f af1c 	beq.w	800376e <_printf_float+0xc2>
 8003936:	f108 0801 	add.w	r8, r8, #1
 800393a:	e7dd      	b.n	80038f8 <_printf_float+0x24c>
 800393c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	dc34      	bgt.n	80039ac <_printf_float+0x300>
 8003942:	2301      	movs	r3, #1
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <_printf_float+0x2fc>)
 8003946:	4631      	mov	r1, r6
 8003948:	4628      	mov	r0, r5
 800394a:	47b8      	blx	r7
 800394c:	3001      	adds	r0, #1
 800394e:	f43f af0e 	beq.w	800376e <_printf_float+0xc2>
 8003952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003954:	b923      	cbnz	r3, 8003960 <_printf_float+0x2b4>
 8003956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003958:	b913      	cbnz	r3, 8003960 <_printf_float+0x2b4>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	07d9      	lsls	r1, r3, #31
 800395e:	d5cf      	bpl.n	8003900 <_printf_float+0x254>
 8003960:	9b05      	ldr	r3, [sp, #20]
 8003962:	9a04      	ldr	r2, [sp, #16]
 8003964:	4631      	mov	r1, r6
 8003966:	4628      	mov	r0, r5
 8003968:	47b8      	blx	r7
 800396a:	3001      	adds	r0, #1
 800396c:	f43f aeff 	beq.w	800376e <_printf_float+0xc2>
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	f104 0a1a 	add.w	sl, r4, #26
 8003978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397a:	425b      	negs	r3, r3
 800397c:	4599      	cmp	r9, r3
 800397e:	db01      	blt.n	8003984 <_printf_float+0x2d8>
 8003980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003982:	e78b      	b.n	800389c <_printf_float+0x1f0>
 8003984:	2301      	movs	r3, #1
 8003986:	4652      	mov	r2, sl
 8003988:	4631      	mov	r1, r6
 800398a:	4628      	mov	r0, r5
 800398c:	47b8      	blx	r7
 800398e:	3001      	adds	r0, #1
 8003990:	f43f aeed 	beq.w	800376e <_printf_float+0xc2>
 8003994:	f109 0901 	add.w	r9, r9, #1
 8003998:	e7ee      	b.n	8003978 <_printf_float+0x2cc>
 800399a:	bf00      	nop
 800399c:	7fefffff 	.word	0x7fefffff
 80039a0:	080056c5 	.word	0x080056c5
 80039a4:	080056c9 	.word	0x080056c9
 80039a8:	080056d5 	.word	0x080056d5
 80039ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bfa8      	it	ge
 80039b4:	461a      	movge	r2, r3
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	4691      	mov	r9, r2
 80039ba:	dc38      	bgt.n	8003a2e <_printf_float+0x382>
 80039bc:	f104 031a 	add.w	r3, r4, #26
 80039c0:	f04f 0b00 	mov.w	fp, #0
 80039c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039c8:	9306      	str	r3, [sp, #24]
 80039ca:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80039ce:	ebaa 0309 	sub.w	r3, sl, r9
 80039d2:	459b      	cmp	fp, r3
 80039d4:	db33      	blt.n	8003a3e <_printf_float+0x392>
 80039d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039da:	429a      	cmp	r2, r3
 80039dc:	db3a      	blt.n	8003a54 <_printf_float+0x3a8>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	07da      	lsls	r2, r3, #31
 80039e2:	d437      	bmi.n	8003a54 <_printf_float+0x3a8>
 80039e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039e8:	eba3 020a 	sub.w	r2, r3, sl
 80039ec:	eba3 0901 	sub.w	r9, r3, r1
 80039f0:	4591      	cmp	r9, r2
 80039f2:	bfa8      	it	ge
 80039f4:	4691      	movge	r9, r2
 80039f6:	f1b9 0f00 	cmp.w	r9, #0
 80039fa:	dc33      	bgt.n	8003a64 <_printf_float+0x3b8>
 80039fc:	f04f 0800 	mov.w	r8, #0
 8003a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a04:	f104 0a1a 	add.w	sl, r4, #26
 8003a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	eba3 0309 	sub.w	r3, r3, r9
 8003a12:	4598      	cmp	r8, r3
 8003a14:	f6bf af74 	bge.w	8003900 <_printf_float+0x254>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	47b8      	blx	r7
 8003a22:	3001      	adds	r0, #1
 8003a24:	f43f aea3 	beq.w	800376e <_printf_float+0xc2>
 8003a28:	f108 0801 	add.w	r8, r8, #1
 8003a2c:	e7ec      	b.n	8003a08 <_printf_float+0x35c>
 8003a2e:	4613      	mov	r3, r2
 8003a30:	4631      	mov	r1, r6
 8003a32:	4642      	mov	r2, r8
 8003a34:	4628      	mov	r0, r5
 8003a36:	47b8      	blx	r7
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d1bf      	bne.n	80039bc <_printf_float+0x310>
 8003a3c:	e697      	b.n	800376e <_printf_float+0xc2>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9a06      	ldr	r2, [sp, #24]
 8003a42:	4631      	mov	r1, r6
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b8      	blx	r7
 8003a48:	3001      	adds	r0, #1
 8003a4a:	f43f ae90 	beq.w	800376e <_printf_float+0xc2>
 8003a4e:	f10b 0b01 	add.w	fp, fp, #1
 8003a52:	e7ba      	b.n	80039ca <_printf_float+0x31e>
 8003a54:	9b05      	ldr	r3, [sp, #20]
 8003a56:	9a04      	ldr	r2, [sp, #16]
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d1c0      	bne.n	80039e4 <_printf_float+0x338>
 8003a62:	e684      	b.n	800376e <_printf_float+0xc2>
 8003a64:	464b      	mov	r3, r9
 8003a66:	eb08 020a 	add.w	r2, r8, sl
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	d1c3      	bne.n	80039fc <_printf_float+0x350>
 8003a74:	e67b      	b.n	800376e <_printf_float+0xc2>
 8003a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a78:	2a01      	cmp	r2, #1
 8003a7a:	dc01      	bgt.n	8003a80 <_printf_float+0x3d4>
 8003a7c:	07db      	lsls	r3, r3, #31
 8003a7e:	d537      	bpl.n	8003af0 <_printf_float+0x444>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4642      	mov	r2, r8
 8003a84:	4631      	mov	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	47b8      	blx	r7
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	f43f ae6f 	beq.w	800376e <_printf_float+0xc2>
 8003a90:	9b05      	ldr	r3, [sp, #20]
 8003a92:	9a04      	ldr	r2, [sp, #16]
 8003a94:	4631      	mov	r1, r6
 8003a96:	4628      	mov	r0, r5
 8003a98:	47b8      	blx	r7
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	f43f ae67 	beq.w	800376e <_printf_float+0xc2>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003aa8:	f7fd f812 	bl	8000ad0 <__aeabi_dcmpeq>
 8003aac:	b158      	cbz	r0, 8003ac6 <_printf_float+0x41a>
 8003aae:	f04f 0800 	mov.w	r8, #0
 8003ab2:	f104 0a1a 	add.w	sl, r4, #26
 8003ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4598      	cmp	r8, r3
 8003abc:	db0d      	blt.n	8003ada <_printf_float+0x42e>
 8003abe:	464b      	mov	r3, r9
 8003ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ac4:	e6eb      	b.n	800389e <_printf_float+0x1f2>
 8003ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ac8:	f108 0201 	add.w	r2, r8, #1
 8003acc:	3b01      	subs	r3, #1
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b8      	blx	r7
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d1f2      	bne.n	8003abe <_printf_float+0x412>
 8003ad8:	e649      	b.n	800376e <_printf_float+0xc2>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4652      	mov	r2, sl
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f ae42 	beq.w	800376e <_printf_float+0xc2>
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	e7e2      	b.n	8003ab6 <_printf_float+0x40a>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4642      	mov	r2, r8
 8003af4:	e7eb      	b.n	8003ace <_printf_float+0x422>
 8003af6:	2301      	movs	r3, #1
 8003af8:	464a      	mov	r2, r9
 8003afa:	4631      	mov	r1, r6
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	f43f ae34 	beq.w	800376e <_printf_float+0xc2>
 8003b06:	f108 0801 	add.w	r8, r8, #1
 8003b0a:	e700      	b.n	800390e <_printf_float+0x262>
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	4649      	mov	r1, r9
 8003b14:	f7fd f80e 	bl	8000b34 <__aeabi_dcmpun>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f43f ae2d 	beq.w	8003778 <_printf_float+0xcc>
 8003b1e:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <_printf_float+0x478>)
 8003b20:	4a01      	ldr	r2, [pc, #4]	; (8003b28 <_printf_float+0x47c>)
 8003b22:	e60e      	b.n	8003742 <_printf_float+0x96>
 8003b24:	080056cd 	.word	0x080056cd
 8003b28:	080056d1 	.word	0x080056d1

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4691      	mov	r9, r2
 8003b32:	461f      	mov	r7, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bfb8      	it	lt
 8003b40:	4613      	movlt	r3, r2
 8003b42:	f8c9 3000 	str.w	r3, [r9]
 8003b46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	b112      	cbz	r2, 8003b56 <_printf_common+0x2a>
 8003b50:	3301      	adds	r3, #1
 8003b52:	f8c9 3000 	str.w	r3, [r9]
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	0699      	lsls	r1, r3, #26
 8003b5a:	bf42      	ittt	mi
 8003b5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b60:	3302      	addmi	r3, #2
 8003b62:	f8c9 3000 	strmi.w	r3, [r9]
 8003b66:	6825      	ldr	r5, [r4, #0]
 8003b68:	f015 0506 	ands.w	r5, r5, #6
 8003b6c:	d107      	bne.n	8003b7e <_printf_common+0x52>
 8003b6e:	f104 0a19 	add.w	sl, r4, #25
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	f8d9 2000 	ldr.w	r2, [r9]
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	db29      	blt.n	8003bd2 <_printf_common+0xa6>
 8003b7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	3300      	adds	r3, #0
 8003b86:	bf18      	it	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	0692      	lsls	r2, r2, #26
 8003b8c:	d42e      	bmi.n	8003bec <_printf_common+0xc0>
 8003b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b92:	4639      	mov	r1, r7
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d021      	beq.n	8003be0 <_printf_common+0xb4>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	68e5      	ldr	r5, [r4, #12]
 8003ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba4:	f003 0306 	and.w	r3, r3, #6
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	bf08      	it	eq
 8003bac:	1aad      	subeq	r5, r5, r2
 8003bae:	68a3      	ldr	r3, [r4, #8]
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	bf0c      	ite	eq
 8003bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb8:	2500      	movne	r5, #0
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	bfc4      	itt	gt
 8003bbe:	1a9b      	subgt	r3, r3, r2
 8003bc0:	18ed      	addgt	r5, r5, r3
 8003bc2:	f04f 0900 	mov.w	r9, #0
 8003bc6:	341a      	adds	r4, #26
 8003bc8:	454d      	cmp	r5, r9
 8003bca:	d11b      	bne.n	8003c04 <_printf_common+0xd8>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4652      	mov	r2, sl
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d103      	bne.n	8003be8 <_printf_common+0xbc>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7c2      	b.n	8003b72 <_printf_common+0x46>
 8003bec:	18e1      	adds	r1, r4, r3
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	2030      	movs	r0, #48	; 0x30
 8003bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bf6:	4422      	add	r2, r4
 8003bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c00:	3302      	adds	r3, #2
 8003c02:	e7c4      	b.n	8003b8e <_printf_common+0x62>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4622      	mov	r2, r4
 8003c08:	4639      	mov	r1, r7
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d0e6      	beq.n	8003be0 <_printf_common+0xb4>
 8003c12:	f109 0901 	add.w	r9, r9, #1
 8003c16:	e7d7      	b.n	8003bc8 <_printf_common+0x9c>

08003c18 <_printf_i>:
 8003c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c1c:	4617      	mov	r7, r2
 8003c1e:	7e0a      	ldrb	r2, [r1, #24]
 8003c20:	b085      	sub	sp, #20
 8003c22:	2a6e      	cmp	r2, #110	; 0x6e
 8003c24:	4698      	mov	r8, r3
 8003c26:	4606      	mov	r6, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c2c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003c30:	f000 80bc 	beq.w	8003dac <_printf_i+0x194>
 8003c34:	d81a      	bhi.n	8003c6c <_printf_i+0x54>
 8003c36:	2a63      	cmp	r2, #99	; 0x63
 8003c38:	d02e      	beq.n	8003c98 <_printf_i+0x80>
 8003c3a:	d80a      	bhi.n	8003c52 <_printf_i+0x3a>
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	f000 80c8 	beq.w	8003dd2 <_printf_i+0x1ba>
 8003c42:	2a58      	cmp	r2, #88	; 0x58
 8003c44:	f000 808a 	beq.w	8003d5c <_printf_i+0x144>
 8003c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c4c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003c50:	e02a      	b.n	8003ca8 <_printf_i+0x90>
 8003c52:	2a64      	cmp	r2, #100	; 0x64
 8003c54:	d001      	beq.n	8003c5a <_printf_i+0x42>
 8003c56:	2a69      	cmp	r2, #105	; 0x69
 8003c58:	d1f6      	bne.n	8003c48 <_printf_i+0x30>
 8003c5a:	6821      	ldr	r1, [r4, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c62:	d023      	beq.n	8003cac <_printf_i+0x94>
 8003c64:	1d11      	adds	r1, r2, #4
 8003c66:	6019      	str	r1, [r3, #0]
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	e027      	b.n	8003cbc <_printf_i+0xa4>
 8003c6c:	2a73      	cmp	r2, #115	; 0x73
 8003c6e:	f000 80b4 	beq.w	8003dda <_printf_i+0x1c2>
 8003c72:	d808      	bhi.n	8003c86 <_printf_i+0x6e>
 8003c74:	2a6f      	cmp	r2, #111	; 0x6f
 8003c76:	d02a      	beq.n	8003cce <_printf_i+0xb6>
 8003c78:	2a70      	cmp	r2, #112	; 0x70
 8003c7a:	d1e5      	bne.n	8003c48 <_printf_i+0x30>
 8003c7c:	680a      	ldr	r2, [r1, #0]
 8003c7e:	f042 0220 	orr.w	r2, r2, #32
 8003c82:	600a      	str	r2, [r1, #0]
 8003c84:	e003      	b.n	8003c8e <_printf_i+0x76>
 8003c86:	2a75      	cmp	r2, #117	; 0x75
 8003c88:	d021      	beq.n	8003cce <_printf_i+0xb6>
 8003c8a:	2a78      	cmp	r2, #120	; 0x78
 8003c8c:	d1dc      	bne.n	8003c48 <_printf_i+0x30>
 8003c8e:	2278      	movs	r2, #120	; 0x78
 8003c90:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c94:	496e      	ldr	r1, [pc, #440]	; (8003e50 <_printf_i+0x238>)
 8003c96:	e064      	b.n	8003d62 <_printf_i+0x14a>
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c9e:	1d11      	adds	r1, r2, #4
 8003ca0:	6019      	str	r1, [r3, #0]
 8003ca2:	6813      	ldr	r3, [r2, #0]
 8003ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0a3      	b.n	8003df4 <_printf_i+0x1dc>
 8003cac:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003cb0:	f102 0104 	add.w	r1, r2, #4
 8003cb4:	6019      	str	r1, [r3, #0]
 8003cb6:	d0d7      	beq.n	8003c68 <_printf_i+0x50>
 8003cb8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da03      	bge.n	8003cc8 <_printf_i+0xb0>
 8003cc0:	222d      	movs	r2, #45	; 0x2d
 8003cc2:	425b      	negs	r3, r3
 8003cc4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cc8:	4962      	ldr	r1, [pc, #392]	; (8003e54 <_printf_i+0x23c>)
 8003cca:	220a      	movs	r2, #10
 8003ccc:	e017      	b.n	8003cfe <_printf_i+0xe6>
 8003cce:	6820      	ldr	r0, [r4, #0]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cd6:	d003      	beq.n	8003ce0 <_printf_i+0xc8>
 8003cd8:	1d08      	adds	r0, r1, #4
 8003cda:	6018      	str	r0, [r3, #0]
 8003cdc:	680b      	ldr	r3, [r1, #0]
 8003cde:	e006      	b.n	8003cee <_printf_i+0xd6>
 8003ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce4:	f101 0004 	add.w	r0, r1, #4
 8003ce8:	6018      	str	r0, [r3, #0]
 8003cea:	d0f7      	beq.n	8003cdc <_printf_i+0xc4>
 8003cec:	880b      	ldrh	r3, [r1, #0]
 8003cee:	4959      	ldr	r1, [pc, #356]	; (8003e54 <_printf_i+0x23c>)
 8003cf0:	2a6f      	cmp	r2, #111	; 0x6f
 8003cf2:	bf14      	ite	ne
 8003cf4:	220a      	movne	r2, #10
 8003cf6:	2208      	moveq	r2, #8
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	60a5      	str	r5, [r4, #8]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	f2c0 809c 	blt.w	8003e40 <_printf_i+0x228>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	f020 0004 	bic.w	r0, r0, #4
 8003d0e:	6020      	str	r0, [r4, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d13f      	bne.n	8003d94 <_printf_i+0x17c>
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	f040 8095 	bne.w	8003e44 <_printf_i+0x22c>
 8003d1a:	4675      	mov	r5, lr
 8003d1c:	2a08      	cmp	r2, #8
 8003d1e:	d10b      	bne.n	8003d38 <_printf_i+0x120>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	07da      	lsls	r2, r3, #31
 8003d24:	d508      	bpl.n	8003d38 <_printf_i+0x120>
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	6862      	ldr	r2, [r4, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	bfde      	ittt	le
 8003d2e:	2330      	movle	r3, #48	; 0x30
 8003d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d38:	ebae 0305 	sub.w	r3, lr, r5
 8003d3c:	6123      	str	r3, [r4, #16]
 8003d3e:	f8cd 8000 	str.w	r8, [sp]
 8003d42:	463b      	mov	r3, r7
 8003d44:	aa03      	add	r2, sp, #12
 8003d46:	4621      	mov	r1, r4
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff feef 	bl	8003b2c <_printf_common>
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d155      	bne.n	8003dfe <_printf_i+0x1e6>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	b005      	add	sp, #20
 8003d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d5c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003d60:	493c      	ldr	r1, [pc, #240]	; (8003e54 <_printf_i+0x23c>)
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003d6a:	f100 0504 	add.w	r5, r0, #4
 8003d6e:	601d      	str	r5, [r3, #0]
 8003d70:	d001      	beq.n	8003d76 <_printf_i+0x15e>
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	e002      	b.n	8003d7c <_printf_i+0x164>
 8003d76:	0655      	lsls	r5, r2, #25
 8003d78:	d5fb      	bpl.n	8003d72 <_printf_i+0x15a>
 8003d7a:	8803      	ldrh	r3, [r0, #0]
 8003d7c:	07d0      	lsls	r0, r2, #31
 8003d7e:	bf44      	itt	mi
 8003d80:	f042 0220 	orrmi.w	r2, r2, #32
 8003d84:	6022      	strmi	r2, [r4, #0]
 8003d86:	b91b      	cbnz	r3, 8003d90 <_printf_i+0x178>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	f022 0220 	bic.w	r2, r2, #32
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	e7b1      	b.n	8003cf8 <_printf_i+0xe0>
 8003d94:	4675      	mov	r5, lr
 8003d96:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d9a:	fb02 3310 	mls	r3, r2, r0, r3
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003da4:	4603      	mov	r3, r0
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d1f5      	bne.n	8003d96 <_printf_i+0x17e>
 8003daa:	e7b7      	b.n	8003d1c <_printf_i+0x104>
 8003dac:	6808      	ldr	r0, [r1, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	6949      	ldr	r1, [r1, #20]
 8003db2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003db6:	d004      	beq.n	8003dc2 <_printf_i+0x1aa>
 8003db8:	1d10      	adds	r0, r2, #4
 8003dba:	6018      	str	r0, [r3, #0]
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <_printf_i+0x1ba>
 8003dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dc6:	f102 0004 	add.w	r0, r2, #4
 8003dca:	6018      	str	r0, [r3, #0]
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	d0f6      	beq.n	8003dbe <_printf_i+0x1a6>
 8003dd0:	8019      	strh	r1, [r3, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	4675      	mov	r5, lr
 8003dd8:	e7b1      	b.n	8003d3e <_printf_i+0x126>
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	1d11      	adds	r1, r2, #4
 8003dde:	6019      	str	r1, [r3, #0]
 8003de0:	6815      	ldr	r5, [r2, #0]
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	2100      	movs	r1, #0
 8003de6:	4628      	mov	r0, r5
 8003de8:	f7fc fa02 	bl	80001f0 <memchr>
 8003dec:	b108      	cbz	r0, 8003df2 <_printf_i+0x1da>
 8003dee:	1b40      	subs	r0, r0, r5
 8003df0:	6060      	str	r0, [r4, #4]
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	2300      	movs	r3, #0
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	e79f      	b.n	8003d3e <_printf_i+0x126>
 8003dfe:	6923      	ldr	r3, [r4, #16]
 8003e00:	462a      	mov	r2, r5
 8003e02:	4639      	mov	r1, r7
 8003e04:	4630      	mov	r0, r6
 8003e06:	47c0      	blx	r8
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d0a2      	beq.n	8003d52 <_printf_i+0x13a>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	079b      	lsls	r3, r3, #30
 8003e10:	d507      	bpl.n	8003e22 <_printf_i+0x20a>
 8003e12:	2500      	movs	r5, #0
 8003e14:	f104 0919 	add.w	r9, r4, #25
 8003e18:	68e3      	ldr	r3, [r4, #12]
 8003e1a:	9a03      	ldr	r2, [sp, #12]
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	429d      	cmp	r5, r3
 8003e20:	db05      	blt.n	8003e2e <_printf_i+0x216>
 8003e22:	68e0      	ldr	r0, [r4, #12]
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	4298      	cmp	r0, r3
 8003e28:	bfb8      	it	lt
 8003e2a:	4618      	movlt	r0, r3
 8003e2c:	e793      	b.n	8003d56 <_printf_i+0x13e>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	464a      	mov	r2, r9
 8003e32:	4639      	mov	r1, r7
 8003e34:	4630      	mov	r0, r6
 8003e36:	47c0      	blx	r8
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d08a      	beq.n	8003d52 <_printf_i+0x13a>
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	e7eb      	b.n	8003e18 <_printf_i+0x200>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1a7      	bne.n	8003d94 <_printf_i+0x17c>
 8003e44:	780b      	ldrb	r3, [r1, #0]
 8003e46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e4e:	e765      	b.n	8003d1c <_printf_i+0x104>
 8003e50:	080056e8 	.word	0x080056e8
 8003e54:	080056d7 	.word	0x080056d7

08003e58 <_vsiprintf_r>:
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	b09a      	sub	sp, #104	; 0x68
 8003e5c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8003e60:	9100      	str	r1, [sp, #0]
 8003e62:	9104      	str	r1, [sp, #16]
 8003e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e68:	9102      	str	r1, [sp, #8]
 8003e6a:	9105      	str	r1, [sp, #20]
 8003e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e70:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003e74:	4669      	mov	r1, sp
 8003e76:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003e7a:	f001 fa73 	bl	8005364 <_svfiprintf_r>
 8003e7e:	9b00      	ldr	r3, [sp, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	b01a      	add	sp, #104	; 0x68
 8003e86:	bd10      	pop	{r4, pc}

08003e88 <vsiprintf>:
 8003e88:	4613      	mov	r3, r2
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4802      	ldr	r0, [pc, #8]	; (8003e98 <vsiprintf+0x10>)
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	f7ff bfe1 	b.w	8003e58 <_vsiprintf_r>
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <quorem>:
 8003e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	6903      	ldr	r3, [r0, #16]
 8003ea2:	690c      	ldr	r4, [r1, #16]
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	f300 8082 	bgt.w	8003fb0 <quorem+0x114>
 8003eac:	3c01      	subs	r4, #1
 8003eae:	f101 0714 	add.w	r7, r1, #20
 8003eb2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003eb6:	f100 0614 	add.w	r6, r0, #20
 8003eba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003ebe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003ec2:	eb06 030e 	add.w	r3, r6, lr
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	eb07 090e 	add.w	r9, r7, lr
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	fbb0 f5f5 	udiv	r5, r0, r5
 8003ed2:	b395      	cbz	r5, 8003f3a <quorem+0x9e>
 8003ed4:	f04f 0a00 	mov.w	sl, #0
 8003ed8:	4638      	mov	r0, r7
 8003eda:	46b4      	mov	ip, r6
 8003edc:	46d3      	mov	fp, sl
 8003ede:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ee2:	b293      	uxth	r3, r2
 8003ee4:	fb05 a303 	mla	r3, r5, r3, sl
 8003ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	ebab 0303 	sub.w	r3, fp, r3
 8003ef2:	0c12      	lsrs	r2, r2, #16
 8003ef4:	f8bc b000 	ldrh.w	fp, [ip]
 8003ef8:	fb05 a202 	mla	r2, r5, r2, sl
 8003efc:	fa13 f38b 	uxtah	r3, r3, fp
 8003f00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003f04:	fa1f fb82 	uxth.w	fp, r2
 8003f08:	f8dc 2000 	ldr.w	r2, [ip]
 8003f0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003f10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f1a:	4581      	cmp	r9, r0
 8003f1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003f20:	f84c 3b04 	str.w	r3, [ip], #4
 8003f24:	d2db      	bcs.n	8003ede <quorem+0x42>
 8003f26:	f856 300e 	ldr.w	r3, [r6, lr]
 8003f2a:	b933      	cbnz	r3, 8003f3a <quorem+0x9e>
 8003f2c:	9b01      	ldr	r3, [sp, #4]
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	429e      	cmp	r6, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	d330      	bcc.n	8003f98 <quorem+0xfc>
 8003f36:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f001 f835 	bl	8004faa <__mcmp>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	db25      	blt.n	8003f90 <quorem+0xf4>
 8003f44:	3501      	adds	r5, #1
 8003f46:	4630      	mov	r0, r6
 8003f48:	f04f 0e00 	mov.w	lr, #0
 8003f4c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003f50:	f8d0 c000 	ldr.w	ip, [r0]
 8003f54:	b293      	uxth	r3, r2
 8003f56:	ebae 0303 	sub.w	r3, lr, r3
 8003f5a:	0c12      	lsrs	r2, r2, #16
 8003f5c:	fa13 f38c 	uxtah	r3, r3, ip
 8003f60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f6e:	45b9      	cmp	r9, r7
 8003f70:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003f74:	f840 3b04 	str.w	r3, [r0], #4
 8003f78:	d2e8      	bcs.n	8003f4c <quorem+0xb0>
 8003f7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003f7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003f82:	b92a      	cbnz	r2, 8003f90 <quorem+0xf4>
 8003f84:	3b04      	subs	r3, #4
 8003f86:	429e      	cmp	r6, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	d30b      	bcc.n	8003fa4 <quorem+0x108>
 8003f8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f90:	4628      	mov	r0, r5
 8003f92:	b003      	add	sp, #12
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	d1ca      	bne.n	8003f36 <quorem+0x9a>
 8003fa0:	3c01      	subs	r4, #1
 8003fa2:	e7c5      	b.n	8003f30 <quorem+0x94>
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	3b04      	subs	r3, #4
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	d1ef      	bne.n	8003f8c <quorem+0xf0>
 8003fac:	3c01      	subs	r4, #1
 8003fae:	e7ea      	b.n	8003f86 <quorem+0xea>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7ee      	b.n	8003f92 <quorem+0xf6>
 8003fb4:	0000      	movs	r0, r0
	...

08003fb8 <_dtoa_r>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	ec57 6b10 	vmov	r6, r7, d0
 8003fc0:	b097      	sub	sp, #92	; 0x5c
 8003fc2:	e9cd 6700 	strd	r6, r7, [sp]
 8003fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003fc8:	9107      	str	r1, [sp, #28]
 8003fca:	4604      	mov	r4, r0
 8003fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8003fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fd0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003fd2:	b93e      	cbnz	r6, 8003fe4 <_dtoa_r+0x2c>
 8003fd4:	2010      	movs	r0, #16
 8003fd6:	f000 fdcb 	bl	8004b70 <malloc>
 8003fda:	6260      	str	r0, [r4, #36]	; 0x24
 8003fdc:	6046      	str	r6, [r0, #4]
 8003fde:	6086      	str	r6, [r0, #8]
 8003fe0:	6006      	str	r6, [r0, #0]
 8003fe2:	60c6      	str	r6, [r0, #12]
 8003fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	b151      	cbz	r1, 8004000 <_dtoa_r+0x48>
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	604a      	str	r2, [r1, #4]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fe02 	bl	8004bfe <_Bfree>
 8003ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	9b01      	ldr	r3, [sp, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbf      	itttt	lt
 8004006:	2301      	movlt	r3, #1
 8004008:	602b      	strlt	r3, [r5, #0]
 800400a:	9b01      	ldrlt	r3, [sp, #4]
 800400c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004010:	bfb2      	itee	lt
 8004012:	9301      	strlt	r3, [sp, #4]
 8004014:	2300      	movge	r3, #0
 8004016:	602b      	strge	r3, [r5, #0]
 8004018:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800401c:	4ba8      	ldr	r3, [pc, #672]	; (80042c0 <_dtoa_r+0x308>)
 800401e:	ea33 0308 	bics.w	r3, r3, r8
 8004022:	d11b      	bne.n	800405c <_dtoa_r+0xa4>
 8004024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004026:	f242 730f 	movw	r3, #9999	; 0x270f
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	9b00      	ldr	r3, [sp, #0]
 800402e:	b923      	cbnz	r3, 800403a <_dtoa_r+0x82>
 8004030:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004034:	2800      	cmp	r0, #0
 8004036:	f000 8578 	beq.w	8004b2a <_dtoa_r+0xb72>
 800403a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800403c:	b953      	cbnz	r3, 8004054 <_dtoa_r+0x9c>
 800403e:	4ba1      	ldr	r3, [pc, #644]	; (80042c4 <_dtoa_r+0x30c>)
 8004040:	e021      	b.n	8004086 <_dtoa_r+0xce>
 8004042:	4ba1      	ldr	r3, [pc, #644]	; (80042c8 <_dtoa_r+0x310>)
 8004044:	9302      	str	r3, [sp, #8]
 8004046:	3308      	adds	r3, #8
 8004048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	9802      	ldr	r0, [sp, #8]
 800404e:	b017      	add	sp, #92	; 0x5c
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	4b9b      	ldr	r3, [pc, #620]	; (80042c4 <_dtoa_r+0x30c>)
 8004056:	9302      	str	r3, [sp, #8]
 8004058:	3303      	adds	r3, #3
 800405a:	e7f5      	b.n	8004048 <_dtoa_r+0x90>
 800405c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	4630      	mov	r0, r6
 8004066:	4639      	mov	r1, r7
 8004068:	f7fc fd32 	bl	8000ad0 <__aeabi_dcmpeq>
 800406c:	4681      	mov	r9, r0
 800406e:	b160      	cbz	r0, 800408a <_dtoa_r+0xd2>
 8004070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004072:	2301      	movs	r3, #1
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8553 	beq.w	8004b24 <_dtoa_r+0xb6c>
 800407e:	4b93      	ldr	r3, [pc, #588]	; (80042cc <_dtoa_r+0x314>)
 8004080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	9302      	str	r3, [sp, #8]
 8004088:	e7e0      	b.n	800404c <_dtoa_r+0x94>
 800408a:	aa14      	add	r2, sp, #80	; 0x50
 800408c:	a915      	add	r1, sp, #84	; 0x54
 800408e:	ec47 6b10 	vmov	d0, r6, r7
 8004092:	4620      	mov	r0, r4
 8004094:	f001 f801 	bl	800509a <__d2b>
 8004098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800409c:	4682      	mov	sl, r0
 800409e:	2d00      	cmp	r5, #0
 80040a0:	d07e      	beq.n	80041a0 <_dtoa_r+0x1e8>
 80040a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80040a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80040aa:	4630      	mov	r0, r6
 80040ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80040b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80040b8:	2200      	movs	r2, #0
 80040ba:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <_dtoa_r+0x318>)
 80040bc:	f7fc f8ec 	bl	8000298 <__aeabi_dsub>
 80040c0:	a379      	add	r3, pc, #484	; (adr r3, 80042a8 <_dtoa_r+0x2f0>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fa9b 	bl	8000600 <__aeabi_dmul>
 80040ca:	a379      	add	r3, pc, #484	; (adr r3, 80042b0 <_dtoa_r+0x2f8>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc f8e4 	bl	800029c <__adddf3>
 80040d4:	4606      	mov	r6, r0
 80040d6:	4628      	mov	r0, r5
 80040d8:	460f      	mov	r7, r1
 80040da:	f7fc fa2b 	bl	8000534 <__aeabi_i2d>
 80040de:	a376      	add	r3, pc, #472	; (adr r3, 80042b8 <_dtoa_r+0x300>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f7fc fa8c 	bl	8000600 <__aeabi_dmul>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4630      	mov	r0, r6
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc f8d4 	bl	800029c <__adddf3>
 80040f4:	4606      	mov	r6, r0
 80040f6:	460f      	mov	r7, r1
 80040f8:	f7fc fd32 	bl	8000b60 <__aeabi_d2iz>
 80040fc:	2200      	movs	r2, #0
 80040fe:	4683      	mov	fp, r0
 8004100:	2300      	movs	r3, #0
 8004102:	4630      	mov	r0, r6
 8004104:	4639      	mov	r1, r7
 8004106:	f7fc fced 	bl	8000ae4 <__aeabi_dcmplt>
 800410a:	b158      	cbz	r0, 8004124 <_dtoa_r+0x16c>
 800410c:	4658      	mov	r0, fp
 800410e:	f7fc fa11 	bl	8000534 <__aeabi_i2d>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4630      	mov	r0, r6
 8004118:	4639      	mov	r1, r7
 800411a:	f7fc fcd9 	bl	8000ad0 <__aeabi_dcmpeq>
 800411e:	b908      	cbnz	r0, 8004124 <_dtoa_r+0x16c>
 8004120:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004124:	f1bb 0f16 	cmp.w	fp, #22
 8004128:	d859      	bhi.n	80041de <_dtoa_r+0x226>
 800412a:	496a      	ldr	r1, [pc, #424]	; (80042d4 <_dtoa_r+0x31c>)
 800412c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004138:	f7fc fcf2 	bl	8000b20 <__aeabi_dcmpgt>
 800413c:	2800      	cmp	r0, #0
 800413e:	d050      	beq.n	80041e2 <_dtoa_r+0x22a>
 8004140:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004144:	2300      	movs	r3, #0
 8004146:	930e      	str	r3, [sp, #56]	; 0x38
 8004148:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800414a:	1b5d      	subs	r5, r3, r5
 800414c:	1e6b      	subs	r3, r5, #1
 800414e:	9306      	str	r3, [sp, #24]
 8004150:	bf45      	ittet	mi
 8004152:	f1c5 0301 	rsbmi	r3, r5, #1
 8004156:	9305      	strmi	r3, [sp, #20]
 8004158:	2300      	movpl	r3, #0
 800415a:	2300      	movmi	r3, #0
 800415c:	bf4c      	ite	mi
 800415e:	9306      	strmi	r3, [sp, #24]
 8004160:	9305      	strpl	r3, [sp, #20]
 8004162:	f1bb 0f00 	cmp.w	fp, #0
 8004166:	db3e      	blt.n	80041e6 <_dtoa_r+0x22e>
 8004168:	9b06      	ldr	r3, [sp, #24]
 800416a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800416e:	445b      	add	r3, fp
 8004170:	9306      	str	r3, [sp, #24]
 8004172:	2300      	movs	r3, #0
 8004174:	9308      	str	r3, [sp, #32]
 8004176:	9b07      	ldr	r3, [sp, #28]
 8004178:	2b09      	cmp	r3, #9
 800417a:	f200 80af 	bhi.w	80042dc <_dtoa_r+0x324>
 800417e:	2b05      	cmp	r3, #5
 8004180:	bfc4      	itt	gt
 8004182:	3b04      	subgt	r3, #4
 8004184:	9307      	strgt	r3, [sp, #28]
 8004186:	9b07      	ldr	r3, [sp, #28]
 8004188:	f1a3 0302 	sub.w	r3, r3, #2
 800418c:	bfcc      	ite	gt
 800418e:	2600      	movgt	r6, #0
 8004190:	2601      	movle	r6, #1
 8004192:	2b03      	cmp	r3, #3
 8004194:	f200 80ae 	bhi.w	80042f4 <_dtoa_r+0x33c>
 8004198:	e8df f003 	tbb	[pc, r3]
 800419c:	772f8482 	.word	0x772f8482
 80041a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80041a4:	441d      	add	r5, r3
 80041a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	dd11      	ble.n	80041d2 <_dtoa_r+0x21a>
 80041ae:	9a00      	ldr	r2, [sp, #0]
 80041b0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80041b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80041b8:	fa22 f000 	lsr.w	r0, r2, r0
 80041bc:	fa08 f303 	lsl.w	r3, r8, r3
 80041c0:	4318      	orrs	r0, r3
 80041c2:	f7fc f9a7 	bl	8000514 <__aeabi_ui2d>
 80041c6:	2301      	movs	r3, #1
 80041c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80041cc:	3d01      	subs	r5, #1
 80041ce:	9312      	str	r3, [sp, #72]	; 0x48
 80041d0:	e772      	b.n	80040b8 <_dtoa_r+0x100>
 80041d2:	f1c3 0020 	rsb	r0, r3, #32
 80041d6:	9b00      	ldr	r3, [sp, #0]
 80041d8:	fa03 f000 	lsl.w	r0, r3, r0
 80041dc:	e7f1      	b.n	80041c2 <_dtoa_r+0x20a>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7b1      	b.n	8004146 <_dtoa_r+0x18e>
 80041e2:	900e      	str	r0, [sp, #56]	; 0x38
 80041e4:	e7b0      	b.n	8004148 <_dtoa_r+0x190>
 80041e6:	9b05      	ldr	r3, [sp, #20]
 80041e8:	eba3 030b 	sub.w	r3, r3, fp
 80041ec:	9305      	str	r3, [sp, #20]
 80041ee:	f1cb 0300 	rsb	r3, fp, #0
 80041f2:	9308      	str	r3, [sp, #32]
 80041f4:	2300      	movs	r3, #0
 80041f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f8:	e7bd      	b.n	8004176 <_dtoa_r+0x1be>
 80041fa:	2301      	movs	r3, #1
 80041fc:	9309      	str	r3, [sp, #36]	; 0x24
 80041fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	dd7a      	ble.n	80042fa <_dtoa_r+0x342>
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	9303      	str	r3, [sp, #12]
 8004208:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800420a:	2200      	movs	r2, #0
 800420c:	606a      	str	r2, [r5, #4]
 800420e:	2104      	movs	r1, #4
 8004210:	f101 0214 	add.w	r2, r1, #20
 8004214:	429a      	cmp	r2, r3
 8004216:	d975      	bls.n	8004304 <_dtoa_r+0x34c>
 8004218:	6869      	ldr	r1, [r5, #4]
 800421a:	4620      	mov	r0, r4
 800421c:	f000 fcbb 	bl	8004b96 <_Balloc>
 8004220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004222:	6028      	str	r0, [r5, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	2b0e      	cmp	r3, #14
 800422c:	f200 80e5 	bhi.w	80043fa <_dtoa_r+0x442>
 8004230:	2e00      	cmp	r6, #0
 8004232:	f000 80e2 	beq.w	80043fa <_dtoa_r+0x442>
 8004236:	ed9d 7b00 	vldr	d7, [sp]
 800423a:	f1bb 0f00 	cmp.w	fp, #0
 800423e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004242:	dd74      	ble.n	800432e <_dtoa_r+0x376>
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <_dtoa_r+0x31c>)
 8004246:	f00b 030f 	and.w	r3, fp, #15
 800424a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800424e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004252:	06f0      	lsls	r0, r6, #27
 8004254:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004258:	d559      	bpl.n	800430e <_dtoa_r+0x356>
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <_dtoa_r+0x320>)
 800425c:	ec51 0b17 	vmov	r0, r1, d7
 8004260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004264:	f7fc faf6 	bl	8000854 <__aeabi_ddiv>
 8004268:	e9cd 0100 	strd	r0, r1, [sp]
 800426c:	f006 060f 	and.w	r6, r6, #15
 8004270:	2503      	movs	r5, #3
 8004272:	4f19      	ldr	r7, [pc, #100]	; (80042d8 <_dtoa_r+0x320>)
 8004274:	2e00      	cmp	r6, #0
 8004276:	d14c      	bne.n	8004312 <_dtoa_r+0x35a>
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004280:	f7fc fae8 	bl	8000854 <__aeabi_ddiv>
 8004284:	e9cd 0100 	strd	r0, r1, [sp]
 8004288:	e06a      	b.n	8004360 <_dtoa_r+0x3a8>
 800428a:	2301      	movs	r3, #1
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004290:	445b      	add	r3, fp
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	3301      	adds	r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	bfb8      	it	lt
 800429c:	2301      	movlt	r3, #1
 800429e:	e7b3      	b.n	8004208 <_dtoa_r+0x250>
 80042a0:	2300      	movs	r3, #0
 80042a2:	e7ab      	b.n	80041fc <_dtoa_r+0x244>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e7f1      	b.n	800428c <_dtoa_r+0x2d4>
 80042a8:	636f4361 	.word	0x636f4361
 80042ac:	3fd287a7 	.word	0x3fd287a7
 80042b0:	8b60c8b3 	.word	0x8b60c8b3
 80042b4:	3fc68a28 	.word	0x3fc68a28
 80042b8:	509f79fb 	.word	0x509f79fb
 80042bc:	3fd34413 	.word	0x3fd34413
 80042c0:	7ff00000 	.word	0x7ff00000
 80042c4:	08005702 	.word	0x08005702
 80042c8:	080056f9 	.word	0x080056f9
 80042cc:	080056d6 	.word	0x080056d6
 80042d0:	3ff80000 	.word	0x3ff80000
 80042d4:	08005730 	.word	0x08005730
 80042d8:	08005708 	.word	0x08005708
 80042dc:	2601      	movs	r6, #1
 80042de:	2300      	movs	r3, #0
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	9609      	str	r6, [sp, #36]	; 0x24
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2312      	movs	r3, #18
 80042f0:	920a      	str	r2, [sp, #40]	; 0x28
 80042f2:	e789      	b.n	8004208 <_dtoa_r+0x250>
 80042f4:	2301      	movs	r3, #1
 80042f6:	9309      	str	r3, [sp, #36]	; 0x24
 80042f8:	e7f4      	b.n	80042e4 <_dtoa_r+0x32c>
 80042fa:	2301      	movs	r3, #1
 80042fc:	9304      	str	r3, [sp, #16]
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	461a      	mov	r2, r3
 8004302:	e7f5      	b.n	80042f0 <_dtoa_r+0x338>
 8004304:	686a      	ldr	r2, [r5, #4]
 8004306:	3201      	adds	r2, #1
 8004308:	606a      	str	r2, [r5, #4]
 800430a:	0049      	lsls	r1, r1, #1
 800430c:	e780      	b.n	8004210 <_dtoa_r+0x258>
 800430e:	2502      	movs	r5, #2
 8004310:	e7af      	b.n	8004272 <_dtoa_r+0x2ba>
 8004312:	07f1      	lsls	r1, r6, #31
 8004314:	d508      	bpl.n	8004328 <_dtoa_r+0x370>
 8004316:	4640      	mov	r0, r8
 8004318:	4649      	mov	r1, r9
 800431a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800431e:	f7fc f96f 	bl	8000600 <__aeabi_dmul>
 8004322:	3501      	adds	r5, #1
 8004324:	4680      	mov	r8, r0
 8004326:	4689      	mov	r9, r1
 8004328:	1076      	asrs	r6, r6, #1
 800432a:	3708      	adds	r7, #8
 800432c:	e7a2      	b.n	8004274 <_dtoa_r+0x2bc>
 800432e:	f000 809d 	beq.w	800446c <_dtoa_r+0x4b4>
 8004332:	f1cb 0600 	rsb	r6, fp, #0
 8004336:	4b9f      	ldr	r3, [pc, #636]	; (80045b4 <_dtoa_r+0x5fc>)
 8004338:	4f9f      	ldr	r7, [pc, #636]	; (80045b8 <_dtoa_r+0x600>)
 800433a:	f006 020f 	and.w	r2, r6, #15
 800433e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800434a:	f7fc f959 	bl	8000600 <__aeabi_dmul>
 800434e:	e9cd 0100 	strd	r0, r1, [sp]
 8004352:	1136      	asrs	r6, r6, #4
 8004354:	2300      	movs	r3, #0
 8004356:	2502      	movs	r5, #2
 8004358:	2e00      	cmp	r6, #0
 800435a:	d17c      	bne.n	8004456 <_dtoa_r+0x49e>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d191      	bne.n	8004284 <_dtoa_r+0x2cc>
 8004360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8084 	beq.w	8004470 <_dtoa_r+0x4b8>
 8004368:	e9dd 8900 	ldrd	r8, r9, [sp]
 800436c:	2200      	movs	r2, #0
 800436e:	4b93      	ldr	r3, [pc, #588]	; (80045bc <_dtoa_r+0x604>)
 8004370:	4640      	mov	r0, r8
 8004372:	4649      	mov	r1, r9
 8004374:	f7fc fbb6 	bl	8000ae4 <__aeabi_dcmplt>
 8004378:	2800      	cmp	r0, #0
 800437a:	d079      	beq.n	8004470 <_dtoa_r+0x4b8>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d076      	beq.n	8004470 <_dtoa_r+0x4b8>
 8004382:	9b04      	ldr	r3, [sp, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	dd34      	ble.n	80043f2 <_dtoa_r+0x43a>
 8004388:	2200      	movs	r2, #0
 800438a:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <_dtoa_r+0x608>)
 800438c:	4640      	mov	r0, r8
 800438e:	4649      	mov	r1, r9
 8004390:	f7fc f936 	bl	8000600 <__aeabi_dmul>
 8004394:	e9cd 0100 	strd	r0, r1, [sp]
 8004398:	9e04      	ldr	r6, [sp, #16]
 800439a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800439e:	3501      	adds	r5, #1
 80043a0:	4628      	mov	r0, r5
 80043a2:	f7fc f8c7 	bl	8000534 <__aeabi_i2d>
 80043a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043aa:	f7fc f929 	bl	8000600 <__aeabi_dmul>
 80043ae:	2200      	movs	r2, #0
 80043b0:	4b84      	ldr	r3, [pc, #528]	; (80045c4 <_dtoa_r+0x60c>)
 80043b2:	f7fb ff73 	bl	800029c <__adddf3>
 80043b6:	4680      	mov	r8, r0
 80043b8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80043bc:	2e00      	cmp	r6, #0
 80043be:	d15a      	bne.n	8004476 <_dtoa_r+0x4be>
 80043c0:	2200      	movs	r2, #0
 80043c2:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <_dtoa_r+0x610>)
 80043c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043c8:	f7fb ff66 	bl	8000298 <__aeabi_dsub>
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	e9cd 0100 	strd	r0, r1, [sp]
 80043d4:	f7fc fba4 	bl	8000b20 <__aeabi_dcmpgt>
 80043d8:	2800      	cmp	r0, #0
 80043da:	f040 829b 	bne.w	8004914 <_dtoa_r+0x95c>
 80043de:	4642      	mov	r2, r8
 80043e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043e8:	f7fc fb7c 	bl	8000ae4 <__aeabi_dcmplt>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f040 828f 	bne.w	8004910 <_dtoa_r+0x958>
 80043f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043f6:	e9cd 2300 	strd	r2, r3, [sp]
 80043fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f2c0 8150 	blt.w	80046a2 <_dtoa_r+0x6ea>
 8004402:	f1bb 0f0e 	cmp.w	fp, #14
 8004406:	f300 814c 	bgt.w	80046a2 <_dtoa_r+0x6ea>
 800440a:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <_dtoa_r+0x5fc>)
 800440c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	f280 80da 	bge.w	80045d0 <_dtoa_r+0x618>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f300 80d6 	bgt.w	80045d0 <_dtoa_r+0x618>
 8004424:	f040 8273 	bne.w	800490e <_dtoa_r+0x956>
 8004428:	2200      	movs	r2, #0
 800442a:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <_dtoa_r+0x610>)
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	f7fc f8e6 	bl	8000600 <__aeabi_dmul>
 8004434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004438:	f7fc fb68 	bl	8000b0c <__aeabi_dcmpge>
 800443c:	9e03      	ldr	r6, [sp, #12]
 800443e:	4637      	mov	r7, r6
 8004440:	2800      	cmp	r0, #0
 8004442:	f040 824a 	bne.w	80048da <_dtoa_r+0x922>
 8004446:	9b02      	ldr	r3, [sp, #8]
 8004448:	9a02      	ldr	r2, [sp, #8]
 800444a:	1c5d      	adds	r5, r3, #1
 800444c:	2331      	movs	r3, #49	; 0x31
 800444e:	7013      	strb	r3, [r2, #0]
 8004450:	f10b 0b01 	add.w	fp, fp, #1
 8004454:	e245      	b.n	80048e2 <_dtoa_r+0x92a>
 8004456:	07f2      	lsls	r2, r6, #31
 8004458:	d505      	bpl.n	8004466 <_dtoa_r+0x4ae>
 800445a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445e:	f7fc f8cf 	bl	8000600 <__aeabi_dmul>
 8004462:	3501      	adds	r5, #1
 8004464:	2301      	movs	r3, #1
 8004466:	1076      	asrs	r6, r6, #1
 8004468:	3708      	adds	r7, #8
 800446a:	e775      	b.n	8004358 <_dtoa_r+0x3a0>
 800446c:	2502      	movs	r5, #2
 800446e:	e777      	b.n	8004360 <_dtoa_r+0x3a8>
 8004470:	465f      	mov	r7, fp
 8004472:	9e03      	ldr	r6, [sp, #12]
 8004474:	e794      	b.n	80043a0 <_dtoa_r+0x3e8>
 8004476:	9a02      	ldr	r2, [sp, #8]
 8004478:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <_dtoa_r+0x5fc>)
 800447a:	4432      	add	r2, r6
 800447c:	9213      	str	r2, [sp, #76]	; 0x4c
 800447e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004480:	1e71      	subs	r1, r6, #1
 8004482:	2a00      	cmp	r2, #0
 8004484:	d048      	beq.n	8004518 <_dtoa_r+0x560>
 8004486:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	2000      	movs	r0, #0
 8004490:	494e      	ldr	r1, [pc, #312]	; (80045cc <_dtoa_r+0x614>)
 8004492:	f7fc f9df 	bl	8000854 <__aeabi_ddiv>
 8004496:	4642      	mov	r2, r8
 8004498:	464b      	mov	r3, r9
 800449a:	f7fb fefd 	bl	8000298 <__aeabi_dsub>
 800449e:	9d02      	ldr	r5, [sp, #8]
 80044a0:	4680      	mov	r8, r0
 80044a2:	4689      	mov	r9, r1
 80044a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044a8:	f7fc fb5a 	bl	8000b60 <__aeabi_d2iz>
 80044ac:	4606      	mov	r6, r0
 80044ae:	f7fc f841 	bl	8000534 <__aeabi_i2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044ba:	f7fb feed 	bl	8000298 <__aeabi_dsub>
 80044be:	3630      	adds	r6, #48	; 0x30
 80044c0:	f805 6b01 	strb.w	r6, [r5], #1
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	e9cd 0100 	strd	r0, r1, [sp]
 80044cc:	f7fc fb0a 	bl	8000ae4 <__aeabi_dcmplt>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d165      	bne.n	80045a0 <_dtoa_r+0x5e8>
 80044d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044d8:	2000      	movs	r0, #0
 80044da:	4938      	ldr	r1, [pc, #224]	; (80045bc <_dtoa_r+0x604>)
 80044dc:	f7fb fedc 	bl	8000298 <__aeabi_dsub>
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	f7fc fafe 	bl	8000ae4 <__aeabi_dcmplt>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	f040 80ba 	bne.w	8004662 <_dtoa_r+0x6aa>
 80044ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80044f0:	429d      	cmp	r5, r3
 80044f2:	f43f af7e 	beq.w	80043f2 <_dtoa_r+0x43a>
 80044f6:	2200      	movs	r2, #0
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <_dtoa_r+0x608>)
 80044fa:	4640      	mov	r0, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	f7fc f87f 	bl	8000600 <__aeabi_dmul>
 8004502:	2200      	movs	r2, #0
 8004504:	4680      	mov	r8, r0
 8004506:	4689      	mov	r9, r1
 8004508:	4b2d      	ldr	r3, [pc, #180]	; (80045c0 <_dtoa_r+0x608>)
 800450a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800450e:	f7fc f877 	bl	8000600 <__aeabi_dmul>
 8004512:	e9cd 0100 	strd	r0, r1, [sp]
 8004516:	e7c5      	b.n	80044a4 <_dtoa_r+0x4ec>
 8004518:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004524:	f7fc f86c 	bl	8000600 <__aeabi_dmul>
 8004528:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800452c:	9d02      	ldr	r5, [sp, #8]
 800452e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004532:	f7fc fb15 	bl	8000b60 <__aeabi_d2iz>
 8004536:	4606      	mov	r6, r0
 8004538:	f7fb fffc 	bl	8000534 <__aeabi_i2d>
 800453c:	3630      	adds	r6, #48	; 0x30
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004546:	f7fb fea7 	bl	8000298 <__aeabi_dsub>
 800454a:	f805 6b01 	strb.w	r6, [r5], #1
 800454e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004550:	42ab      	cmp	r3, r5
 8004552:	4680      	mov	r8, r0
 8004554:	4689      	mov	r9, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	d125      	bne.n	80045a8 <_dtoa_r+0x5f0>
 800455c:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <_dtoa_r+0x614>)
 800455e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004562:	f7fb fe9b 	bl	800029c <__adddf3>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fc fad7 	bl	8000b20 <__aeabi_dcmpgt>
 8004572:	2800      	cmp	r0, #0
 8004574:	d175      	bne.n	8004662 <_dtoa_r+0x6aa>
 8004576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800457a:	2000      	movs	r0, #0
 800457c:	4913      	ldr	r1, [pc, #76]	; (80045cc <_dtoa_r+0x614>)
 800457e:	f7fb fe8b 	bl	8000298 <__aeabi_dsub>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4640      	mov	r0, r8
 8004588:	4649      	mov	r1, r9
 800458a:	f7fc faab 	bl	8000ae4 <__aeabi_dcmplt>
 800458e:	2800      	cmp	r0, #0
 8004590:	f43f af2f 	beq.w	80043f2 <_dtoa_r+0x43a>
 8004594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004598:	2b30      	cmp	r3, #48	; 0x30
 800459a:	f105 32ff 	add.w	r2, r5, #4294967295
 800459e:	d001      	beq.n	80045a4 <_dtoa_r+0x5ec>
 80045a0:	46bb      	mov	fp, r7
 80045a2:	e04d      	b.n	8004640 <_dtoa_r+0x688>
 80045a4:	4615      	mov	r5, r2
 80045a6:	e7f5      	b.n	8004594 <_dtoa_r+0x5dc>
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_dtoa_r+0x608>)
 80045aa:	f7fc f829 	bl	8000600 <__aeabi_dmul>
 80045ae:	e9cd 0100 	strd	r0, r1, [sp]
 80045b2:	e7bc      	b.n	800452e <_dtoa_r+0x576>
 80045b4:	08005730 	.word	0x08005730
 80045b8:	08005708 	.word	0x08005708
 80045bc:	3ff00000 	.word	0x3ff00000
 80045c0:	40240000 	.word	0x40240000
 80045c4:	401c0000 	.word	0x401c0000
 80045c8:	40140000 	.word	0x40140000
 80045cc:	3fe00000 	.word	0x3fe00000
 80045d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80045d4:	9d02      	ldr	r5, [sp, #8]
 80045d6:	4642      	mov	r2, r8
 80045d8:	464b      	mov	r3, r9
 80045da:	4630      	mov	r0, r6
 80045dc:	4639      	mov	r1, r7
 80045de:	f7fc f939 	bl	8000854 <__aeabi_ddiv>
 80045e2:	f7fc fabd 	bl	8000b60 <__aeabi_d2iz>
 80045e6:	9000      	str	r0, [sp, #0]
 80045e8:	f7fb ffa4 	bl	8000534 <__aeabi_i2d>
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	f7fc f806 	bl	8000600 <__aeabi_dmul>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4630      	mov	r0, r6
 80045fa:	4639      	mov	r1, r7
 80045fc:	f7fb fe4c 	bl	8000298 <__aeabi_dsub>
 8004600:	9e00      	ldr	r6, [sp, #0]
 8004602:	9f03      	ldr	r7, [sp, #12]
 8004604:	3630      	adds	r6, #48	; 0x30
 8004606:	f805 6b01 	strb.w	r6, [r5], #1
 800460a:	9e02      	ldr	r6, [sp, #8]
 800460c:	1bae      	subs	r6, r5, r6
 800460e:	42b7      	cmp	r7, r6
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	d138      	bne.n	8004688 <_dtoa_r+0x6d0>
 8004616:	f7fb fe41 	bl	800029c <__adddf3>
 800461a:	4606      	mov	r6, r0
 800461c:	460f      	mov	r7, r1
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fc fa5d 	bl	8000ae4 <__aeabi_dcmplt>
 800462a:	b9c8      	cbnz	r0, 8004660 <_dtoa_r+0x6a8>
 800462c:	4632      	mov	r2, r6
 800462e:	463b      	mov	r3, r7
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fc fa4c 	bl	8000ad0 <__aeabi_dcmpeq>
 8004638:	b110      	cbz	r0, 8004640 <_dtoa_r+0x688>
 800463a:	9b00      	ldr	r3, [sp, #0]
 800463c:	07db      	lsls	r3, r3, #31
 800463e:	d40f      	bmi.n	8004660 <_dtoa_r+0x6a8>
 8004640:	4651      	mov	r1, sl
 8004642:	4620      	mov	r0, r4
 8004644:	f000 fadb 	bl	8004bfe <_Bfree>
 8004648:	2300      	movs	r3, #0
 800464a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800464c:	702b      	strb	r3, [r5, #0]
 800464e:	f10b 0301 	add.w	r3, fp, #1
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004656:	2b00      	cmp	r3, #0
 8004658:	f43f acf8 	beq.w	800404c <_dtoa_r+0x94>
 800465c:	601d      	str	r5, [r3, #0]
 800465e:	e4f5      	b.n	800404c <_dtoa_r+0x94>
 8004660:	465f      	mov	r7, fp
 8004662:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004666:	2a39      	cmp	r2, #57	; 0x39
 8004668:	f105 33ff 	add.w	r3, r5, #4294967295
 800466c:	d106      	bne.n	800467c <_dtoa_r+0x6c4>
 800466e:	9a02      	ldr	r2, [sp, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <_dtoa_r+0x6cc>
 8004674:	2330      	movs	r3, #48	; 0x30
 8004676:	7013      	strb	r3, [r2, #0]
 8004678:	3701      	adds	r7, #1
 800467a:	4613      	mov	r3, r2
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	3201      	adds	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e78d      	b.n	80045a0 <_dtoa_r+0x5e8>
 8004684:	461d      	mov	r5, r3
 8004686:	e7ec      	b.n	8004662 <_dtoa_r+0x6aa>
 8004688:	2200      	movs	r2, #0
 800468a:	4ba4      	ldr	r3, [pc, #656]	; (800491c <_dtoa_r+0x964>)
 800468c:	f7fb ffb8 	bl	8000600 <__aeabi_dmul>
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	4606      	mov	r6, r0
 8004696:	460f      	mov	r7, r1
 8004698:	f7fc fa1a 	bl	8000ad0 <__aeabi_dcmpeq>
 800469c:	2800      	cmp	r0, #0
 800469e:	d09a      	beq.n	80045d6 <_dtoa_r+0x61e>
 80046a0:	e7ce      	b.n	8004640 <_dtoa_r+0x688>
 80046a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	f000 80cd 	beq.w	8004844 <_dtoa_r+0x88c>
 80046aa:	9a07      	ldr	r2, [sp, #28]
 80046ac:	2a01      	cmp	r2, #1
 80046ae:	f300 80af 	bgt.w	8004810 <_dtoa_r+0x858>
 80046b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	f000 80a7 	beq.w	8004808 <_dtoa_r+0x850>
 80046ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046be:	9e08      	ldr	r6, [sp, #32]
 80046c0:	9d05      	ldr	r5, [sp, #20]
 80046c2:	9a05      	ldr	r2, [sp, #20]
 80046c4:	441a      	add	r2, r3
 80046c6:	9205      	str	r2, [sp, #20]
 80046c8:	9a06      	ldr	r2, [sp, #24]
 80046ca:	2101      	movs	r1, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	4620      	mov	r0, r4
 80046d0:	9206      	str	r2, [sp, #24]
 80046d2:	f000 fb34 	bl	8004d3e <__i2b>
 80046d6:	4607      	mov	r7, r0
 80046d8:	2d00      	cmp	r5, #0
 80046da:	dd0c      	ble.n	80046f6 <_dtoa_r+0x73e>
 80046dc:	9b06      	ldr	r3, [sp, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	dd09      	ble.n	80046f6 <_dtoa_r+0x73e>
 80046e2:	42ab      	cmp	r3, r5
 80046e4:	9a05      	ldr	r2, [sp, #20]
 80046e6:	bfa8      	it	ge
 80046e8:	462b      	movge	r3, r5
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	9205      	str	r2, [sp, #20]
 80046ee:	9a06      	ldr	r2, [sp, #24]
 80046f0:	1aed      	subs	r5, r5, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	9306      	str	r3, [sp, #24]
 80046f6:	9b08      	ldr	r3, [sp, #32]
 80046f8:	b1f3      	cbz	r3, 8004738 <_dtoa_r+0x780>
 80046fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a5 	beq.w	800484c <_dtoa_r+0x894>
 8004702:	2e00      	cmp	r6, #0
 8004704:	dd10      	ble.n	8004728 <_dtoa_r+0x770>
 8004706:	4639      	mov	r1, r7
 8004708:	4632      	mov	r2, r6
 800470a:	4620      	mov	r0, r4
 800470c:	f000 fbae 	bl	8004e6c <__pow5mult>
 8004710:	4652      	mov	r2, sl
 8004712:	4601      	mov	r1, r0
 8004714:	4607      	mov	r7, r0
 8004716:	4620      	mov	r0, r4
 8004718:	f000 fb1a 	bl	8004d50 <__multiply>
 800471c:	4651      	mov	r1, sl
 800471e:	4680      	mov	r8, r0
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fa6c 	bl	8004bfe <_Bfree>
 8004726:	46c2      	mov	sl, r8
 8004728:	9b08      	ldr	r3, [sp, #32]
 800472a:	1b9a      	subs	r2, r3, r6
 800472c:	d004      	beq.n	8004738 <_dtoa_r+0x780>
 800472e:	4651      	mov	r1, sl
 8004730:	4620      	mov	r0, r4
 8004732:	f000 fb9b 	bl	8004e6c <__pow5mult>
 8004736:	4682      	mov	sl, r0
 8004738:	2101      	movs	r1, #1
 800473a:	4620      	mov	r0, r4
 800473c:	f000 faff 	bl	8004d3e <__i2b>
 8004740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	4606      	mov	r6, r0
 8004746:	f340 8083 	ble.w	8004850 <_dtoa_r+0x898>
 800474a:	461a      	mov	r2, r3
 800474c:	4601      	mov	r1, r0
 800474e:	4620      	mov	r0, r4
 8004750:	f000 fb8c 	bl	8004e6c <__pow5mult>
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	2b01      	cmp	r3, #1
 8004758:	4606      	mov	r6, r0
 800475a:	dd7c      	ble.n	8004856 <_dtoa_r+0x89e>
 800475c:	f04f 0800 	mov.w	r8, #0
 8004760:	6933      	ldr	r3, [r6, #16]
 8004762:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004766:	6918      	ldr	r0, [r3, #16]
 8004768:	f000 fa9b 	bl	8004ca2 <__hi0bits>
 800476c:	f1c0 0020 	rsb	r0, r0, #32
 8004770:	9b06      	ldr	r3, [sp, #24]
 8004772:	4418      	add	r0, r3
 8004774:	f010 001f 	ands.w	r0, r0, #31
 8004778:	f000 8096 	beq.w	80048a8 <_dtoa_r+0x8f0>
 800477c:	f1c0 0320 	rsb	r3, r0, #32
 8004780:	2b04      	cmp	r3, #4
 8004782:	f340 8087 	ble.w	8004894 <_dtoa_r+0x8dc>
 8004786:	9b05      	ldr	r3, [sp, #20]
 8004788:	f1c0 001c 	rsb	r0, r0, #28
 800478c:	4403      	add	r3, r0
 800478e:	9305      	str	r3, [sp, #20]
 8004790:	9b06      	ldr	r3, [sp, #24]
 8004792:	4405      	add	r5, r0
 8004794:	4403      	add	r3, r0
 8004796:	9306      	str	r3, [sp, #24]
 8004798:	9b05      	ldr	r3, [sp, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	dd05      	ble.n	80047aa <_dtoa_r+0x7f2>
 800479e:	4651      	mov	r1, sl
 80047a0:	461a      	mov	r2, r3
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 fbb0 	bl	8004f08 <__lshift>
 80047a8:	4682      	mov	sl, r0
 80047aa:	9b06      	ldr	r3, [sp, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dd05      	ble.n	80047bc <_dtoa_r+0x804>
 80047b0:	4631      	mov	r1, r6
 80047b2:	461a      	mov	r2, r3
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 fba7 	bl	8004f08 <__lshift>
 80047ba:	4606      	mov	r6, r0
 80047bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d074      	beq.n	80048ac <_dtoa_r+0x8f4>
 80047c2:	4631      	mov	r1, r6
 80047c4:	4650      	mov	r0, sl
 80047c6:	f000 fbf0 	bl	8004faa <__mcmp>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	da6e      	bge.n	80048ac <_dtoa_r+0x8f4>
 80047ce:	2300      	movs	r3, #0
 80047d0:	4651      	mov	r1, sl
 80047d2:	220a      	movs	r2, #10
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fa29 	bl	8004c2c <__multadd>
 80047da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047e0:	4682      	mov	sl, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 81a8 	beq.w	8004b38 <_dtoa_r+0xb80>
 80047e8:	2300      	movs	r3, #0
 80047ea:	4639      	mov	r1, r7
 80047ec:	220a      	movs	r2, #10
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 fa1c 	bl	8004c2c <__multadd>
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	4607      	mov	r7, r0
 80047fa:	f300 80c8 	bgt.w	800498e <_dtoa_r+0x9d6>
 80047fe:	9b07      	ldr	r3, [sp, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f340 80c4 	ble.w	800498e <_dtoa_r+0x9d6>
 8004806:	e059      	b.n	80048bc <_dtoa_r+0x904>
 8004808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800480a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800480e:	e756      	b.n	80046be <_dtoa_r+0x706>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	1e5e      	subs	r6, r3, #1
 8004814:	9b08      	ldr	r3, [sp, #32]
 8004816:	42b3      	cmp	r3, r6
 8004818:	bfbf      	itttt	lt
 800481a:	9b08      	ldrlt	r3, [sp, #32]
 800481c:	9608      	strlt	r6, [sp, #32]
 800481e:	1af2      	sublt	r2, r6, r3
 8004820:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004822:	bfb6      	itet	lt
 8004824:	189b      	addlt	r3, r3, r2
 8004826:	1b9e      	subge	r6, r3, r6
 8004828:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	bfb8      	it	lt
 800482e:	2600      	movlt	r6, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfb9      	ittee	lt
 8004834:	9b05      	ldrlt	r3, [sp, #20]
 8004836:	9a03      	ldrlt	r2, [sp, #12]
 8004838:	9d05      	ldrge	r5, [sp, #20]
 800483a:	9b03      	ldrge	r3, [sp, #12]
 800483c:	bfbc      	itt	lt
 800483e:	1a9d      	sublt	r5, r3, r2
 8004840:	2300      	movlt	r3, #0
 8004842:	e73e      	b.n	80046c2 <_dtoa_r+0x70a>
 8004844:	9e08      	ldr	r6, [sp, #32]
 8004846:	9d05      	ldr	r5, [sp, #20]
 8004848:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800484a:	e745      	b.n	80046d8 <_dtoa_r+0x720>
 800484c:	9a08      	ldr	r2, [sp, #32]
 800484e:	e76e      	b.n	800472e <_dtoa_r+0x776>
 8004850:	9b07      	ldr	r3, [sp, #28]
 8004852:	2b01      	cmp	r3, #1
 8004854:	dc19      	bgt.n	800488a <_dtoa_r+0x8d2>
 8004856:	9b00      	ldr	r3, [sp, #0]
 8004858:	b9bb      	cbnz	r3, 800488a <_dtoa_r+0x8d2>
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004860:	b99b      	cbnz	r3, 800488a <_dtoa_r+0x8d2>
 8004862:	9b01      	ldr	r3, [sp, #4]
 8004864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004868:	0d1b      	lsrs	r3, r3, #20
 800486a:	051b      	lsls	r3, r3, #20
 800486c:	b183      	cbz	r3, 8004890 <_dtoa_r+0x8d8>
 800486e:	9b05      	ldr	r3, [sp, #20]
 8004870:	3301      	adds	r3, #1
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	9b06      	ldr	r3, [sp, #24]
 8004876:	3301      	adds	r3, #1
 8004878:	9306      	str	r3, [sp, #24]
 800487a:	f04f 0801 	mov.w	r8, #1
 800487e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	f47f af6d 	bne.w	8004760 <_dtoa_r+0x7a8>
 8004886:	2001      	movs	r0, #1
 8004888:	e772      	b.n	8004770 <_dtoa_r+0x7b8>
 800488a:	f04f 0800 	mov.w	r8, #0
 800488e:	e7f6      	b.n	800487e <_dtoa_r+0x8c6>
 8004890:	4698      	mov	r8, r3
 8004892:	e7f4      	b.n	800487e <_dtoa_r+0x8c6>
 8004894:	d080      	beq.n	8004798 <_dtoa_r+0x7e0>
 8004896:	9a05      	ldr	r2, [sp, #20]
 8004898:	331c      	adds	r3, #28
 800489a:	441a      	add	r2, r3
 800489c:	9205      	str	r2, [sp, #20]
 800489e:	9a06      	ldr	r2, [sp, #24]
 80048a0:	441a      	add	r2, r3
 80048a2:	441d      	add	r5, r3
 80048a4:	4613      	mov	r3, r2
 80048a6:	e776      	b.n	8004796 <_dtoa_r+0x7de>
 80048a8:	4603      	mov	r3, r0
 80048aa:	e7f4      	b.n	8004896 <_dtoa_r+0x8de>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc36      	bgt.n	8004920 <_dtoa_r+0x968>
 80048b2:	9b07      	ldr	r3, [sp, #28]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	dd33      	ble.n	8004920 <_dtoa_r+0x968>
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	9304      	str	r3, [sp, #16]
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	b963      	cbnz	r3, 80048da <_dtoa_r+0x922>
 80048c0:	4631      	mov	r1, r6
 80048c2:	2205      	movs	r2, #5
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f9b1 	bl	8004c2c <__multadd>
 80048ca:	4601      	mov	r1, r0
 80048cc:	4606      	mov	r6, r0
 80048ce:	4650      	mov	r0, sl
 80048d0:	f000 fb6b 	bl	8004faa <__mcmp>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	f73f adb6 	bgt.w	8004446 <_dtoa_r+0x48e>
 80048da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048dc:	9d02      	ldr	r5, [sp, #8]
 80048de:	ea6f 0b03 	mvn.w	fp, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	9303      	str	r3, [sp, #12]
 80048e6:	4631      	mov	r1, r6
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 f988 	bl	8004bfe <_Bfree>
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	f43f aea6 	beq.w	8004640 <_dtoa_r+0x688>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	b12b      	cbz	r3, 8004904 <_dtoa_r+0x94c>
 80048f8:	42bb      	cmp	r3, r7
 80048fa:	d003      	beq.n	8004904 <_dtoa_r+0x94c>
 80048fc:	4619      	mov	r1, r3
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 f97d 	bl	8004bfe <_Bfree>
 8004904:	4639      	mov	r1, r7
 8004906:	4620      	mov	r0, r4
 8004908:	f000 f979 	bl	8004bfe <_Bfree>
 800490c:	e698      	b.n	8004640 <_dtoa_r+0x688>
 800490e:	2600      	movs	r6, #0
 8004910:	4637      	mov	r7, r6
 8004912:	e7e2      	b.n	80048da <_dtoa_r+0x922>
 8004914:	46bb      	mov	fp, r7
 8004916:	4637      	mov	r7, r6
 8004918:	e595      	b.n	8004446 <_dtoa_r+0x48e>
 800491a:	bf00      	nop
 800491c:	40240000 	.word	0x40240000
 8004920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004922:	bb93      	cbnz	r3, 800498a <_dtoa_r+0x9d2>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9d02      	ldr	r5, [sp, #8]
 800492a:	4631      	mov	r1, r6
 800492c:	4650      	mov	r0, sl
 800492e:	f7ff fab5 	bl	8003e9c <quorem>
 8004932:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004936:	f805 9b01 	strb.w	r9, [r5], #1
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	9a04      	ldr	r2, [sp, #16]
 800493e:	1aeb      	subs	r3, r5, r3
 8004940:	429a      	cmp	r2, r3
 8004942:	f300 80dc 	bgt.w	8004afe <_dtoa_r+0xb46>
 8004946:	9b02      	ldr	r3, [sp, #8]
 8004948:	2a01      	cmp	r2, #1
 800494a:	bfac      	ite	ge
 800494c:	189b      	addge	r3, r3, r2
 800494e:	3301      	addlt	r3, #1
 8004950:	4698      	mov	r8, r3
 8004952:	2300      	movs	r3, #0
 8004954:	9303      	str	r3, [sp, #12]
 8004956:	4651      	mov	r1, sl
 8004958:	2201      	movs	r2, #1
 800495a:	4620      	mov	r0, r4
 800495c:	f000 fad4 	bl	8004f08 <__lshift>
 8004960:	4631      	mov	r1, r6
 8004962:	4682      	mov	sl, r0
 8004964:	f000 fb21 	bl	8004faa <__mcmp>
 8004968:	2800      	cmp	r0, #0
 800496a:	f300 808d 	bgt.w	8004a88 <_dtoa_r+0xad0>
 800496e:	d103      	bne.n	8004978 <_dtoa_r+0x9c0>
 8004970:	f019 0f01 	tst.w	r9, #1
 8004974:	f040 8088 	bne.w	8004a88 <_dtoa_r+0xad0>
 8004978:	4645      	mov	r5, r8
 800497a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800497e:	2b30      	cmp	r3, #48	; 0x30
 8004980:	f105 32ff 	add.w	r2, r5, #4294967295
 8004984:	d1af      	bne.n	80048e6 <_dtoa_r+0x92e>
 8004986:	4615      	mov	r5, r2
 8004988:	e7f7      	b.n	800497a <_dtoa_r+0x9c2>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	2d00      	cmp	r5, #0
 8004990:	dd05      	ble.n	800499e <_dtoa_r+0x9e6>
 8004992:	4639      	mov	r1, r7
 8004994:	462a      	mov	r2, r5
 8004996:	4620      	mov	r0, r4
 8004998:	f000 fab6 	bl	8004f08 <__lshift>
 800499c:	4607      	mov	r7, r0
 800499e:	f1b8 0f00 	cmp.w	r8, #0
 80049a2:	d04c      	beq.n	8004a3e <_dtoa_r+0xa86>
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 f8f5 	bl	8004b96 <_Balloc>
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	3202      	adds	r2, #2
 80049b0:	4605      	mov	r5, r0
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	f107 010c 	add.w	r1, r7, #12
 80049b8:	300c      	adds	r0, #12
 80049ba:	f000 f8e1 	bl	8004b80 <memcpy>
 80049be:	2201      	movs	r2, #1
 80049c0:	4629      	mov	r1, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 faa0 	bl	8004f08 <__lshift>
 80049c8:	9b00      	ldr	r3, [sp, #0]
 80049ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80049ce:	9703      	str	r7, [sp, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	4607      	mov	r7, r0
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	4631      	mov	r1, r6
 80049da:	4650      	mov	r0, sl
 80049dc:	f7ff fa5e 	bl	8003e9c <quorem>
 80049e0:	9903      	ldr	r1, [sp, #12]
 80049e2:	4605      	mov	r5, r0
 80049e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049e8:	4650      	mov	r0, sl
 80049ea:	f000 fade 	bl	8004faa <__mcmp>
 80049ee:	463a      	mov	r2, r7
 80049f0:	9000      	str	r0, [sp, #0]
 80049f2:	4631      	mov	r1, r6
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 faf2 	bl	8004fde <__mdiff>
 80049fa:	68c3      	ldr	r3, [r0, #12]
 80049fc:	4602      	mov	r2, r0
 80049fe:	bb03      	cbnz	r3, 8004a42 <_dtoa_r+0xa8a>
 8004a00:	4601      	mov	r1, r0
 8004a02:	9006      	str	r0, [sp, #24]
 8004a04:	4650      	mov	r0, sl
 8004a06:	f000 fad0 	bl	8004faa <__mcmp>
 8004a0a:	9a06      	ldr	r2, [sp, #24]
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4620      	mov	r0, r4
 8004a12:	9306      	str	r3, [sp, #24]
 8004a14:	f000 f8f3 	bl	8004bfe <_Bfree>
 8004a18:	9b06      	ldr	r3, [sp, #24]
 8004a1a:	b9a3      	cbnz	r3, 8004a46 <_dtoa_r+0xa8e>
 8004a1c:	9a07      	ldr	r2, [sp, #28]
 8004a1e:	b992      	cbnz	r2, 8004a46 <_dtoa_r+0xa8e>
 8004a20:	9a05      	ldr	r2, [sp, #20]
 8004a22:	b982      	cbnz	r2, 8004a46 <_dtoa_r+0xa8e>
 8004a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a28:	d029      	beq.n	8004a7e <_dtoa_r+0xac6>
 8004a2a:	9b00      	ldr	r3, [sp, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dd01      	ble.n	8004a34 <_dtoa_r+0xa7c>
 8004a30:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004a34:	f108 0501 	add.w	r5, r8, #1
 8004a38:	f888 9000 	strb.w	r9, [r8]
 8004a3c:	e753      	b.n	80048e6 <_dtoa_r+0x92e>
 8004a3e:	4638      	mov	r0, r7
 8004a40:	e7c2      	b.n	80049c8 <_dtoa_r+0xa10>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7e3      	b.n	8004a0e <_dtoa_r+0xa56>
 8004a46:	9a00      	ldr	r2, [sp, #0]
 8004a48:	2a00      	cmp	r2, #0
 8004a4a:	db04      	blt.n	8004a56 <_dtoa_r+0xa9e>
 8004a4c:	d125      	bne.n	8004a9a <_dtoa_r+0xae2>
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	bb1a      	cbnz	r2, 8004a9a <_dtoa_r+0xae2>
 8004a52:	9a05      	ldr	r2, [sp, #20]
 8004a54:	bb0a      	cbnz	r2, 8004a9a <_dtoa_r+0xae2>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	ddec      	ble.n	8004a34 <_dtoa_r+0xa7c>
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 fa52 	bl	8004f08 <__lshift>
 8004a64:	4631      	mov	r1, r6
 8004a66:	4682      	mov	sl, r0
 8004a68:	f000 fa9f 	bl	8004faa <__mcmp>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	dc03      	bgt.n	8004a78 <_dtoa_r+0xac0>
 8004a70:	d1e0      	bne.n	8004a34 <_dtoa_r+0xa7c>
 8004a72:	f019 0f01 	tst.w	r9, #1
 8004a76:	d0dd      	beq.n	8004a34 <_dtoa_r+0xa7c>
 8004a78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a7c:	d1d8      	bne.n	8004a30 <_dtoa_r+0xa78>
 8004a7e:	2339      	movs	r3, #57	; 0x39
 8004a80:	f888 3000 	strb.w	r3, [r8]
 8004a84:	f108 0801 	add.w	r8, r8, #1
 8004a88:	4645      	mov	r5, r8
 8004a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a8e:	2b39      	cmp	r3, #57	; 0x39
 8004a90:	f105 32ff 	add.w	r2, r5, #4294967295
 8004a94:	d03b      	beq.n	8004b0e <_dtoa_r+0xb56>
 8004a96:	3301      	adds	r3, #1
 8004a98:	e040      	b.n	8004b1c <_dtoa_r+0xb64>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f108 0501 	add.w	r5, r8, #1
 8004aa0:	dd05      	ble.n	8004aae <_dtoa_r+0xaf6>
 8004aa2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004aa6:	d0ea      	beq.n	8004a7e <_dtoa_r+0xac6>
 8004aa8:	f109 0901 	add.w	r9, r9, #1
 8004aac:	e7c4      	b.n	8004a38 <_dtoa_r+0xa80>
 8004aae:	9b02      	ldr	r3, [sp, #8]
 8004ab0:	9a04      	ldr	r2, [sp, #16]
 8004ab2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004ab6:	1aeb      	subs	r3, r5, r3
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	46a8      	mov	r8, r5
 8004abc:	f43f af4b 	beq.w	8004956 <_dtoa_r+0x99e>
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	220a      	movs	r2, #10
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f000 f8b0 	bl	8004c2c <__multadd>
 8004acc:	9b03      	ldr	r3, [sp, #12]
 8004ace:	9903      	ldr	r1, [sp, #12]
 8004ad0:	42bb      	cmp	r3, r7
 8004ad2:	4682      	mov	sl, r0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	f04f 020a 	mov.w	r2, #10
 8004adc:	4620      	mov	r0, r4
 8004ade:	d104      	bne.n	8004aea <_dtoa_r+0xb32>
 8004ae0:	f000 f8a4 	bl	8004c2c <__multadd>
 8004ae4:	9003      	str	r0, [sp, #12]
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	e776      	b.n	80049d8 <_dtoa_r+0xa20>
 8004aea:	f000 f89f 	bl	8004c2c <__multadd>
 8004aee:	2300      	movs	r3, #0
 8004af0:	9003      	str	r0, [sp, #12]
 8004af2:	220a      	movs	r2, #10
 8004af4:	4639      	mov	r1, r7
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f898 	bl	8004c2c <__multadd>
 8004afc:	e7f3      	b.n	8004ae6 <_dtoa_r+0xb2e>
 8004afe:	4651      	mov	r1, sl
 8004b00:	2300      	movs	r3, #0
 8004b02:	220a      	movs	r2, #10
 8004b04:	4620      	mov	r0, r4
 8004b06:	f000 f891 	bl	8004c2c <__multadd>
 8004b0a:	4682      	mov	sl, r0
 8004b0c:	e70d      	b.n	800492a <_dtoa_r+0x972>
 8004b0e:	9b02      	ldr	r3, [sp, #8]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d105      	bne.n	8004b20 <_dtoa_r+0xb68>
 8004b14:	9a02      	ldr	r2, [sp, #8]
 8004b16:	f10b 0b01 	add.w	fp, fp, #1
 8004b1a:	2331      	movs	r3, #49	; 0x31
 8004b1c:	7013      	strb	r3, [r2, #0]
 8004b1e:	e6e2      	b.n	80048e6 <_dtoa_r+0x92e>
 8004b20:	4615      	mov	r5, r2
 8004b22:	e7b2      	b.n	8004a8a <_dtoa_r+0xad2>
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <_dtoa_r+0xb94>)
 8004b26:	f7ff baae 	b.w	8004086 <_dtoa_r+0xce>
 8004b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f47f aa88 	bne.w	8004042 <_dtoa_r+0x8a>
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <_dtoa_r+0xb98>)
 8004b34:	f7ff baa7 	b.w	8004086 <_dtoa_r+0xce>
 8004b38:	9b04      	ldr	r3, [sp, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f73f aef4 	bgt.w	8004928 <_dtoa_r+0x970>
 8004b40:	9b07      	ldr	r3, [sp, #28]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	f77f aef0 	ble.w	8004928 <_dtoa_r+0x970>
 8004b48:	e6b8      	b.n	80048bc <_dtoa_r+0x904>
 8004b4a:	bf00      	nop
 8004b4c:	080056d5 	.word	0x080056d5
 8004b50:	080056f9 	.word	0x080056f9

08004b54 <_localeconv_r>:
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <_localeconv_r+0x14>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a18      	ldr	r0, [r3, #32]
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <_localeconv_r+0x18>)
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	bf08      	it	eq
 8004b60:	4618      	moveq	r0, r3
 8004b62:	30f0      	adds	r0, #240	; 0xf0
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c
 8004b6c:	20000070 	.word	0x20000070

08004b70 <malloc>:
 8004b70:	4b02      	ldr	r3, [pc, #8]	; (8004b7c <malloc+0xc>)
 8004b72:	4601      	mov	r1, r0
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f000 bb3b 	b.w	80051f0 <_malloc_r>
 8004b7a:	bf00      	nop
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <memcpy>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	1e43      	subs	r3, r0, #1
 8004b84:	440a      	add	r2, r1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	d100      	bne.n	8004b8c <memcpy+0xc>
 8004b8a:	bd10      	pop	{r4, pc}
 8004b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b94:	e7f7      	b.n	8004b86 <memcpy+0x6>

08004b96 <_Balloc>:
 8004b96:	b570      	push	{r4, r5, r6, lr}
 8004b98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460e      	mov	r6, r1
 8004b9e:	b93d      	cbnz	r5, 8004bb0 <_Balloc+0x1a>
 8004ba0:	2010      	movs	r0, #16
 8004ba2:	f7ff ffe5 	bl	8004b70 <malloc>
 8004ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8004ba8:	6045      	str	r5, [r0, #4]
 8004baa:	6085      	str	r5, [r0, #8]
 8004bac:	6005      	str	r5, [r0, #0]
 8004bae:	60c5      	str	r5, [r0, #12]
 8004bb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004bb2:	68eb      	ldr	r3, [r5, #12]
 8004bb4:	b183      	cbz	r3, 8004bd8 <_Balloc+0x42>
 8004bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004bbe:	b9b8      	cbnz	r0, 8004bf0 <_Balloc+0x5a>
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	fa01 f506 	lsl.w	r5, r1, r6
 8004bc6:	1d6a      	adds	r2, r5, #5
 8004bc8:	0092      	lsls	r2, r2, #2
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 fab4 	bl	8005138 <_calloc_r>
 8004bd0:	b160      	cbz	r0, 8004bec <_Balloc+0x56>
 8004bd2:	6046      	str	r6, [r0, #4]
 8004bd4:	6085      	str	r5, [r0, #8]
 8004bd6:	e00e      	b.n	8004bf6 <_Balloc+0x60>
 8004bd8:	2221      	movs	r2, #33	; 0x21
 8004bda:	2104      	movs	r1, #4
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 faab 	bl	8005138 <_calloc_r>
 8004be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be4:	60e8      	str	r0, [r5, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e4      	bne.n	8004bb6 <_Balloc+0x20>
 8004bec:	2000      	movs	r0, #0
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	6802      	ldr	r2, [r0, #0]
 8004bf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6103      	str	r3, [r0, #16]
 8004bfa:	60c3      	str	r3, [r0, #12]
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}

08004bfe <_Bfree>:
 8004bfe:	b570      	push	{r4, r5, r6, lr}
 8004c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c02:	4606      	mov	r6, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	b93c      	cbnz	r4, 8004c18 <_Bfree+0x1a>
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f7ff ffb1 	bl	8004b70 <malloc>
 8004c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8004c10:	6044      	str	r4, [r0, #4]
 8004c12:	6084      	str	r4, [r0, #8]
 8004c14:	6004      	str	r4, [r0, #0]
 8004c16:	60c4      	str	r4, [r0, #12]
 8004c18:	b13d      	cbz	r5, 8004c2a <_Bfree+0x2c>
 8004c1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c1c:	686a      	ldr	r2, [r5, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c24:	6029      	str	r1, [r5, #0]
 8004c26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}

08004c2c <__multadd>:
 8004c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	690d      	ldr	r5, [r1, #16]
 8004c32:	461f      	mov	r7, r3
 8004c34:	4606      	mov	r6, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	f101 0e14 	add.w	lr, r1, #20
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8de 0000 	ldr.w	r0, [lr]
 8004c42:	b281      	uxth	r1, r0
 8004c44:	fb02 7101 	mla	r1, r2, r1, r7
 8004c48:	0c0f      	lsrs	r7, r1, #16
 8004c4a:	0c00      	lsrs	r0, r0, #16
 8004c4c:	fb02 7000 	mla	r0, r2, r0, r7
 8004c50:	b289      	uxth	r1, r1
 8004c52:	3301      	adds	r3, #1
 8004c54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004c5e:	f84e 1b04 	str.w	r1, [lr], #4
 8004c62:	dcec      	bgt.n	8004c3e <__multadd+0x12>
 8004c64:	b1d7      	cbz	r7, 8004c9c <__multadd+0x70>
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	429d      	cmp	r5, r3
 8004c6a:	db12      	blt.n	8004c92 <__multadd+0x66>
 8004c6c:	6861      	ldr	r1, [r4, #4]
 8004c6e:	4630      	mov	r0, r6
 8004c70:	3101      	adds	r1, #1
 8004c72:	f7ff ff90 	bl	8004b96 <_Balloc>
 8004c76:	6922      	ldr	r2, [r4, #16]
 8004c78:	3202      	adds	r2, #2
 8004c7a:	f104 010c 	add.w	r1, r4, #12
 8004c7e:	4680      	mov	r8, r0
 8004c80:	0092      	lsls	r2, r2, #2
 8004c82:	300c      	adds	r0, #12
 8004c84:	f7ff ff7c 	bl	8004b80 <memcpy>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ffb7 	bl	8004bfe <_Bfree>
 8004c90:	4644      	mov	r4, r8
 8004c92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c96:	3501      	adds	r5, #1
 8004c98:	615f      	str	r7, [r3, #20]
 8004c9a:	6125      	str	r5, [r4, #16]
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ca2 <__hi0bits>:
 8004ca2:	0c02      	lsrs	r2, r0, #16
 8004ca4:	0412      	lsls	r2, r2, #16
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	b9b2      	cbnz	r2, 8004cd8 <__hi0bits+0x36>
 8004caa:	0403      	lsls	r3, r0, #16
 8004cac:	2010      	movs	r0, #16
 8004cae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004cb2:	bf04      	itt	eq
 8004cb4:	021b      	lsleq	r3, r3, #8
 8004cb6:	3008      	addeq	r0, #8
 8004cb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004cbc:	bf04      	itt	eq
 8004cbe:	011b      	lsleq	r3, r3, #4
 8004cc0:	3004      	addeq	r0, #4
 8004cc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004cc6:	bf04      	itt	eq
 8004cc8:	009b      	lsleq	r3, r3, #2
 8004cca:	3002      	addeq	r0, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	db06      	blt.n	8004cde <__hi0bits+0x3c>
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	d503      	bpl.n	8004cdc <__hi0bits+0x3a>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	4770      	bx	lr
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e7e8      	b.n	8004cae <__hi0bits+0xc>
 8004cdc:	2020      	movs	r0, #32
 8004cde:	4770      	bx	lr

08004ce0 <__lo0bits>:
 8004ce0:	6803      	ldr	r3, [r0, #0]
 8004ce2:	f013 0207 	ands.w	r2, r3, #7
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	d00b      	beq.n	8004d02 <__lo0bits+0x22>
 8004cea:	07da      	lsls	r2, r3, #31
 8004cec:	d423      	bmi.n	8004d36 <__lo0bits+0x56>
 8004cee:	0798      	lsls	r0, r3, #30
 8004cf0:	bf49      	itett	mi
 8004cf2:	085b      	lsrmi	r3, r3, #1
 8004cf4:	089b      	lsrpl	r3, r3, #2
 8004cf6:	2001      	movmi	r0, #1
 8004cf8:	600b      	strmi	r3, [r1, #0]
 8004cfa:	bf5c      	itt	pl
 8004cfc:	600b      	strpl	r3, [r1, #0]
 8004cfe:	2002      	movpl	r0, #2
 8004d00:	4770      	bx	lr
 8004d02:	b298      	uxth	r0, r3
 8004d04:	b9a8      	cbnz	r0, 8004d32 <__lo0bits+0x52>
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	2010      	movs	r0, #16
 8004d0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d0e:	bf04      	itt	eq
 8004d10:	0a1b      	lsreq	r3, r3, #8
 8004d12:	3008      	addeq	r0, #8
 8004d14:	071a      	lsls	r2, r3, #28
 8004d16:	bf04      	itt	eq
 8004d18:	091b      	lsreq	r3, r3, #4
 8004d1a:	3004      	addeq	r0, #4
 8004d1c:	079a      	lsls	r2, r3, #30
 8004d1e:	bf04      	itt	eq
 8004d20:	089b      	lsreq	r3, r3, #2
 8004d22:	3002      	addeq	r0, #2
 8004d24:	07da      	lsls	r2, r3, #31
 8004d26:	d402      	bmi.n	8004d2e <__lo0bits+0x4e>
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	d006      	beq.n	8004d3a <__lo0bits+0x5a>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	4770      	bx	lr
 8004d32:	4610      	mov	r0, r2
 8004d34:	e7e9      	b.n	8004d0a <__lo0bits+0x2a>
 8004d36:	2000      	movs	r0, #0
 8004d38:	4770      	bx	lr
 8004d3a:	2020      	movs	r0, #32
 8004d3c:	4770      	bx	lr

08004d3e <__i2b>:
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	460c      	mov	r4, r1
 8004d42:	2101      	movs	r1, #1
 8004d44:	f7ff ff27 	bl	8004b96 <_Balloc>
 8004d48:	2201      	movs	r2, #1
 8004d4a:	6144      	str	r4, [r0, #20]
 8004d4c:	6102      	str	r2, [r0, #16]
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <__multiply>:
 8004d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	4614      	mov	r4, r2
 8004d56:	690a      	ldr	r2, [r1, #16]
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	bfb8      	it	lt
 8004d5e:	460b      	movlt	r3, r1
 8004d60:	4689      	mov	r9, r1
 8004d62:	bfbc      	itt	lt
 8004d64:	46a1      	movlt	r9, r4
 8004d66:	461c      	movlt	r4, r3
 8004d68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004d70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004d74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004d78:	eb07 060a 	add.w	r6, r7, sl
 8004d7c:	429e      	cmp	r6, r3
 8004d7e:	bfc8      	it	gt
 8004d80:	3101      	addgt	r1, #1
 8004d82:	f7ff ff08 	bl	8004b96 <_Balloc>
 8004d86:	f100 0514 	add.w	r5, r0, #20
 8004d8a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d8e:	462b      	mov	r3, r5
 8004d90:	2200      	movs	r2, #0
 8004d92:	4543      	cmp	r3, r8
 8004d94:	d316      	bcc.n	8004dc4 <__multiply+0x74>
 8004d96:	f104 0214 	add.w	r2, r4, #20
 8004d9a:	f109 0114 	add.w	r1, r9, #20
 8004d9e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004da2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	9c01      	ldr	r4, [sp, #4]
 8004daa:	4294      	cmp	r4, r2
 8004dac:	4613      	mov	r3, r2
 8004dae:	d80c      	bhi.n	8004dca <__multiply+0x7a>
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	dd03      	ble.n	8004dbc <__multiply+0x6c>
 8004db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d054      	beq.n	8004e66 <__multiply+0x116>
 8004dbc:	6106      	str	r6, [r0, #16]
 8004dbe:	b003      	add	sp, #12
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	f843 2b04 	str.w	r2, [r3], #4
 8004dc8:	e7e3      	b.n	8004d92 <__multiply+0x42>
 8004dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8004dce:	3204      	adds	r2, #4
 8004dd0:	f1ba 0f00 	cmp.w	sl, #0
 8004dd4:	d020      	beq.n	8004e18 <__multiply+0xc8>
 8004dd6:	46ae      	mov	lr, r5
 8004dd8:	4689      	mov	r9, r1
 8004dda:	f04f 0c00 	mov.w	ip, #0
 8004dde:	f859 4b04 	ldr.w	r4, [r9], #4
 8004de2:	f8be b000 	ldrh.w	fp, [lr]
 8004de6:	b2a3      	uxth	r3, r4
 8004de8:	fb0a b303 	mla	r3, sl, r3, fp
 8004dec:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004df0:	f8de 4000 	ldr.w	r4, [lr]
 8004df4:	4463      	add	r3, ip
 8004df6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004dfa:	fb0a c40b 	mla	r4, sl, fp, ip
 8004dfe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004e08:	454f      	cmp	r7, r9
 8004e0a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004e0e:	f84e 3b04 	str.w	r3, [lr], #4
 8004e12:	d8e4      	bhi.n	8004dde <__multiply+0x8e>
 8004e14:	f8ce c000 	str.w	ip, [lr]
 8004e18:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004e1c:	f1b9 0f00 	cmp.w	r9, #0
 8004e20:	d01f      	beq.n	8004e62 <__multiply+0x112>
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	46ae      	mov	lr, r5
 8004e26:	468c      	mov	ip, r1
 8004e28:	f04f 0a00 	mov.w	sl, #0
 8004e2c:	f8bc 4000 	ldrh.w	r4, [ip]
 8004e30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004e34:	fb09 b404 	mla	r4, r9, r4, fp
 8004e38:	44a2      	add	sl, r4
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004e40:	f84e 3b04 	str.w	r3, [lr], #4
 8004e44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e48:	f8be 4000 	ldrh.w	r4, [lr]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	fb09 4303 	mla	r3, r9, r3, r4
 8004e52:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004e56:	4567      	cmp	r7, ip
 8004e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e5c:	d8e6      	bhi.n	8004e2c <__multiply+0xdc>
 8004e5e:	f8ce 3000 	str.w	r3, [lr]
 8004e62:	3504      	adds	r5, #4
 8004e64:	e7a0      	b.n	8004da8 <__multiply+0x58>
 8004e66:	3e01      	subs	r6, #1
 8004e68:	e7a2      	b.n	8004db0 <__multiply+0x60>
	...

08004e6c <__pow5mult>:
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e70:	4615      	mov	r5, r2
 8004e72:	f012 0203 	ands.w	r2, r2, #3
 8004e76:	4606      	mov	r6, r0
 8004e78:	460f      	mov	r7, r1
 8004e7a:	d007      	beq.n	8004e8c <__pow5mult+0x20>
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	4c21      	ldr	r4, [pc, #132]	; (8004f04 <__pow5mult+0x98>)
 8004e80:	2300      	movs	r3, #0
 8004e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e86:	f7ff fed1 	bl	8004c2c <__multadd>
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	10ad      	asrs	r5, r5, #2
 8004e8e:	d035      	beq.n	8004efc <__pow5mult+0x90>
 8004e90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004e92:	b93c      	cbnz	r4, 8004ea4 <__pow5mult+0x38>
 8004e94:	2010      	movs	r0, #16
 8004e96:	f7ff fe6b 	bl	8004b70 <malloc>
 8004e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8004e9c:	6044      	str	r4, [r0, #4]
 8004e9e:	6084      	str	r4, [r0, #8]
 8004ea0:	6004      	str	r4, [r0, #0]
 8004ea2:	60c4      	str	r4, [r0, #12]
 8004ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004eac:	b94c      	cbnz	r4, 8004ec2 <__pow5mult+0x56>
 8004eae:	f240 2171 	movw	r1, #625	; 0x271
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ff43 	bl	8004d3e <__i2b>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	6003      	str	r3, [r0, #0]
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	07eb      	lsls	r3, r5, #31
 8004ec8:	d50a      	bpl.n	8004ee0 <__pow5mult+0x74>
 8004eca:	4639      	mov	r1, r7
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7ff ff3e 	bl	8004d50 <__multiply>
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4681      	mov	r9, r0
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff fe90 	bl	8004bfe <_Bfree>
 8004ede:	464f      	mov	r7, r9
 8004ee0:	106d      	asrs	r5, r5, #1
 8004ee2:	d00b      	beq.n	8004efc <__pow5mult+0x90>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	b938      	cbnz	r0, 8004ef8 <__pow5mult+0x8c>
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4621      	mov	r1, r4
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7ff ff2f 	bl	8004d50 <__multiply>
 8004ef2:	6020      	str	r0, [r4, #0]
 8004ef4:	f8c0 8000 	str.w	r8, [r0]
 8004ef8:	4604      	mov	r4, r0
 8004efa:	e7e4      	b.n	8004ec6 <__pow5mult+0x5a>
 8004efc:	4638      	mov	r0, r7
 8004efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f02:	bf00      	nop
 8004f04:	080057f8 	.word	0x080057f8

08004f08 <__lshift>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	6849      	ldr	r1, [r1, #4]
 8004f16:	eb0a 0903 	add.w	r9, sl, r3
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	4616      	mov	r6, r2
 8004f20:	f109 0501 	add.w	r5, r9, #1
 8004f24:	42ab      	cmp	r3, r5
 8004f26:	db31      	blt.n	8004f8c <__lshift+0x84>
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff fe34 	bl	8004b96 <_Balloc>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	4680      	mov	r8, r0
 8004f32:	f100 0314 	add.w	r3, r0, #20
 8004f36:	4611      	mov	r1, r2
 8004f38:	4552      	cmp	r2, sl
 8004f3a:	db2a      	blt.n	8004f92 <__lshift+0x8a>
 8004f3c:	6920      	ldr	r0, [r4, #16]
 8004f3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f42:	f104 0114 	add.w	r1, r4, #20
 8004f46:	f016 021f 	ands.w	r2, r6, #31
 8004f4a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004f4e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004f52:	d022      	beq.n	8004f9a <__lshift+0x92>
 8004f54:	f1c2 0c20 	rsb	ip, r2, #32
 8004f58:	2000      	movs	r0, #0
 8004f5a:	680e      	ldr	r6, [r1, #0]
 8004f5c:	4096      	lsls	r6, r2
 8004f5e:	4330      	orrs	r0, r6
 8004f60:	f843 0b04 	str.w	r0, [r3], #4
 8004f64:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f68:	458e      	cmp	lr, r1
 8004f6a:	fa20 f00c 	lsr.w	r0, r0, ip
 8004f6e:	d8f4      	bhi.n	8004f5a <__lshift+0x52>
 8004f70:	6018      	str	r0, [r3, #0]
 8004f72:	b108      	cbz	r0, 8004f78 <__lshift+0x70>
 8004f74:	f109 0502 	add.w	r5, r9, #2
 8004f78:	3d01      	subs	r5, #1
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f80:	4621      	mov	r1, r4
 8004f82:	f7ff fe3c 	bl	8004bfe <_Bfree>
 8004f86:	4640      	mov	r0, r8
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	3101      	adds	r1, #1
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	e7c8      	b.n	8004f24 <__lshift+0x1c>
 8004f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f96:	3201      	adds	r2, #1
 8004f98:	e7ce      	b.n	8004f38 <__lshift+0x30>
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004fa0:	f843 2f04 	str.w	r2, [r3, #4]!
 8004fa4:	458e      	cmp	lr, r1
 8004fa6:	d8f9      	bhi.n	8004f9c <__lshift+0x94>
 8004fa8:	e7e6      	b.n	8004f78 <__lshift+0x70>

08004faa <__mcmp>:
 8004faa:	6903      	ldr	r3, [r0, #16]
 8004fac:	690a      	ldr	r2, [r1, #16]
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	b530      	push	{r4, r5, lr}
 8004fb2:	d10c      	bne.n	8004fce <__mcmp+0x24>
 8004fb4:	0092      	lsls	r2, r2, #2
 8004fb6:	3014      	adds	r0, #20
 8004fb8:	3114      	adds	r1, #20
 8004fba:	1884      	adds	r4, r0, r2
 8004fbc:	4411      	add	r1, r2
 8004fbe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fc6:	4295      	cmp	r5, r2
 8004fc8:	d003      	beq.n	8004fd2 <__mcmp+0x28>
 8004fca:	d305      	bcc.n	8004fd8 <__mcmp+0x2e>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	bd30      	pop	{r4, r5, pc}
 8004fd2:	42a0      	cmp	r0, r4
 8004fd4:	d3f3      	bcc.n	8004fbe <__mcmp+0x14>
 8004fd6:	e7fa      	b.n	8004fce <__mcmp+0x24>
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fdc:	e7f7      	b.n	8004fce <__mcmp+0x24>

08004fde <__mdiff>:
 8004fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4628      	mov	r0, r5
 8004fea:	4614      	mov	r4, r2
 8004fec:	f7ff ffdd 	bl	8004faa <__mcmp>
 8004ff0:	1e06      	subs	r6, r0, #0
 8004ff2:	d108      	bne.n	8005006 <__mdiff+0x28>
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f7ff fdcd 	bl	8004b96 <_Balloc>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	6103      	str	r3, [r0, #16]
 8005000:	6146      	str	r6, [r0, #20]
 8005002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005006:	bfa4      	itt	ge
 8005008:	4623      	movge	r3, r4
 800500a:	462c      	movge	r4, r5
 800500c:	4638      	mov	r0, r7
 800500e:	6861      	ldr	r1, [r4, #4]
 8005010:	bfa6      	itte	ge
 8005012:	461d      	movge	r5, r3
 8005014:	2600      	movge	r6, #0
 8005016:	2601      	movlt	r6, #1
 8005018:	f7ff fdbd 	bl	8004b96 <_Balloc>
 800501c:	692b      	ldr	r3, [r5, #16]
 800501e:	60c6      	str	r6, [r0, #12]
 8005020:	6926      	ldr	r6, [r4, #16]
 8005022:	f105 0914 	add.w	r9, r5, #20
 8005026:	f104 0214 	add.w	r2, r4, #20
 800502a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800502e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005032:	f100 0514 	add.w	r5, r0, #20
 8005036:	f04f 0c00 	mov.w	ip, #0
 800503a:	f852 ab04 	ldr.w	sl, [r2], #4
 800503e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005042:	fa1c f18a 	uxtah	r1, ip, sl
 8005046:	b2a3      	uxth	r3, r4
 8005048:	1ac9      	subs	r1, r1, r3
 800504a:	0c23      	lsrs	r3, r4, #16
 800504c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005050:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005054:	b289      	uxth	r1, r1
 8005056:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800505a:	45c8      	cmp	r8, r9
 800505c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005060:	4696      	mov	lr, r2
 8005062:	f845 3b04 	str.w	r3, [r5], #4
 8005066:	d8e8      	bhi.n	800503a <__mdiff+0x5c>
 8005068:	45be      	cmp	lr, r7
 800506a:	d305      	bcc.n	8005078 <__mdiff+0x9a>
 800506c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005070:	b18b      	cbz	r3, 8005096 <__mdiff+0xb8>
 8005072:	6106      	str	r6, [r0, #16]
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	f85e 1b04 	ldr.w	r1, [lr], #4
 800507c:	fa1c f381 	uxtah	r3, ip, r1
 8005080:	141a      	asrs	r2, r3, #16
 8005082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005086:	b29b      	uxth	r3, r3
 8005088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800508c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005090:	f845 3b04 	str.w	r3, [r5], #4
 8005094:	e7e8      	b.n	8005068 <__mdiff+0x8a>
 8005096:	3e01      	subs	r6, #1
 8005098:	e7e8      	b.n	800506c <__mdiff+0x8e>

0800509a <__d2b>:
 800509a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800509e:	460e      	mov	r6, r1
 80050a0:	2101      	movs	r1, #1
 80050a2:	ec59 8b10 	vmov	r8, r9, d0
 80050a6:	4615      	mov	r5, r2
 80050a8:	f7ff fd75 	bl	8004b96 <_Balloc>
 80050ac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050b0:	4607      	mov	r7, r0
 80050b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050b6:	bb34      	cbnz	r4, 8005106 <__d2b+0x6c>
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	f1b8 0f00 	cmp.w	r8, #0
 80050be:	d027      	beq.n	8005110 <__d2b+0x76>
 80050c0:	a802      	add	r0, sp, #8
 80050c2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80050c6:	f7ff fe0b 	bl	8004ce0 <__lo0bits>
 80050ca:	9900      	ldr	r1, [sp, #0]
 80050cc:	b1f0      	cbz	r0, 800510c <__d2b+0x72>
 80050ce:	9a01      	ldr	r2, [sp, #4]
 80050d0:	f1c0 0320 	rsb	r3, r0, #32
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	430b      	orrs	r3, r1
 80050da:	40c2      	lsrs	r2, r0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	9201      	str	r2, [sp, #4]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2102      	movne	r1, #2
 80050ea:	2101      	moveq	r1, #1
 80050ec:	6139      	str	r1, [r7, #16]
 80050ee:	b1c4      	cbz	r4, 8005122 <__d2b+0x88>
 80050f0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80050f4:	4404      	add	r4, r0
 80050f6:	6034      	str	r4, [r6, #0]
 80050f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050fc:	6028      	str	r0, [r5, #0]
 80050fe:	4638      	mov	r0, r7
 8005100:	b003      	add	sp, #12
 8005102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510a:	e7d5      	b.n	80050b8 <__d2b+0x1e>
 800510c:	6179      	str	r1, [r7, #20]
 800510e:	e7e7      	b.n	80050e0 <__d2b+0x46>
 8005110:	a801      	add	r0, sp, #4
 8005112:	f7ff fde5 	bl	8004ce0 <__lo0bits>
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	2101      	movs	r1, #1
 800511c:	6139      	str	r1, [r7, #16]
 800511e:	3020      	adds	r0, #32
 8005120:	e7e5      	b.n	80050ee <__d2b+0x54>
 8005122:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005126:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800512a:	6030      	str	r0, [r6, #0]
 800512c:	6918      	ldr	r0, [r3, #16]
 800512e:	f7ff fdb8 	bl	8004ca2 <__hi0bits>
 8005132:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005136:	e7e1      	b.n	80050fc <__d2b+0x62>

08005138 <_calloc_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	fb02 f401 	mul.w	r4, r2, r1
 800513e:	4621      	mov	r1, r4
 8005140:	f000 f856 	bl	80051f0 <_malloc_r>
 8005144:	4605      	mov	r5, r0
 8005146:	b118      	cbz	r0, 8005150 <_calloc_r+0x18>
 8005148:	4622      	mov	r2, r4
 800514a:	2100      	movs	r1, #0
 800514c:	f7fe fa10 	bl	8003570 <memset>
 8005150:	4628      	mov	r0, r5
 8005152:	bd38      	pop	{r3, r4, r5, pc}

08005154 <_free_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4605      	mov	r5, r0
 8005158:	2900      	cmp	r1, #0
 800515a:	d045      	beq.n	80051e8 <_free_r+0x94>
 800515c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005160:	1f0c      	subs	r4, r1, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	bfb8      	it	lt
 8005166:	18e4      	addlt	r4, r4, r3
 8005168:	f000 fa2c 	bl	80055c4 <__malloc_lock>
 800516c:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <_free_r+0x98>)
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	4610      	mov	r0, r2
 8005172:	b933      	cbnz	r3, 8005182 <_free_r+0x2e>
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	6014      	str	r4, [r2, #0]
 8005178:	4628      	mov	r0, r5
 800517a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800517e:	f000 ba22 	b.w	80055c6 <__malloc_unlock>
 8005182:	42a3      	cmp	r3, r4
 8005184:	d90c      	bls.n	80051a0 <_free_r+0x4c>
 8005186:	6821      	ldr	r1, [r4, #0]
 8005188:	1862      	adds	r2, r4, r1
 800518a:	4293      	cmp	r3, r2
 800518c:	bf04      	itt	eq
 800518e:	681a      	ldreq	r2, [r3, #0]
 8005190:	685b      	ldreq	r3, [r3, #4]
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	bf04      	itt	eq
 8005196:	1852      	addeq	r2, r2, r1
 8005198:	6022      	streq	r2, [r4, #0]
 800519a:	6004      	str	r4, [r0, #0]
 800519c:	e7ec      	b.n	8005178 <_free_r+0x24>
 800519e:	4613      	mov	r3, r2
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	b10a      	cbz	r2, 80051a8 <_free_r+0x54>
 80051a4:	42a2      	cmp	r2, r4
 80051a6:	d9fa      	bls.n	800519e <_free_r+0x4a>
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	1858      	adds	r0, r3, r1
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d10b      	bne.n	80051c8 <_free_r+0x74>
 80051b0:	6820      	ldr	r0, [r4, #0]
 80051b2:	4401      	add	r1, r0
 80051b4:	1858      	adds	r0, r3, r1
 80051b6:	4282      	cmp	r2, r0
 80051b8:	6019      	str	r1, [r3, #0]
 80051ba:	d1dd      	bne.n	8005178 <_free_r+0x24>
 80051bc:	6810      	ldr	r0, [r2, #0]
 80051be:	6852      	ldr	r2, [r2, #4]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	4401      	add	r1, r0
 80051c4:	6019      	str	r1, [r3, #0]
 80051c6:	e7d7      	b.n	8005178 <_free_r+0x24>
 80051c8:	d902      	bls.n	80051d0 <_free_r+0x7c>
 80051ca:	230c      	movs	r3, #12
 80051cc:	602b      	str	r3, [r5, #0]
 80051ce:	e7d3      	b.n	8005178 <_free_r+0x24>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428a      	cmp	r2, r1
 80051d6:	bf04      	itt	eq
 80051d8:	6811      	ldreq	r1, [r2, #0]
 80051da:	6852      	ldreq	r2, [r2, #4]
 80051dc:	6062      	str	r2, [r4, #4]
 80051de:	bf04      	itt	eq
 80051e0:	1809      	addeq	r1, r1, r0
 80051e2:	6021      	streq	r1, [r4, #0]
 80051e4:	605c      	str	r4, [r3, #4]
 80051e6:	e7c7      	b.n	8005178 <_free_r+0x24>
 80051e8:	bd38      	pop	{r3, r4, r5, pc}
 80051ea:	bf00      	nop
 80051ec:	200001fc 	.word	0x200001fc

080051f0 <_malloc_r>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	1ccd      	adds	r5, r1, #3
 80051f4:	f025 0503 	bic.w	r5, r5, #3
 80051f8:	3508      	adds	r5, #8
 80051fa:	2d0c      	cmp	r5, #12
 80051fc:	bf38      	it	cc
 80051fe:	250c      	movcc	r5, #12
 8005200:	2d00      	cmp	r5, #0
 8005202:	4606      	mov	r6, r0
 8005204:	db01      	blt.n	800520a <_malloc_r+0x1a>
 8005206:	42a9      	cmp	r1, r5
 8005208:	d903      	bls.n	8005212 <_malloc_r+0x22>
 800520a:	230c      	movs	r3, #12
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	2000      	movs	r0, #0
 8005210:	bd70      	pop	{r4, r5, r6, pc}
 8005212:	f000 f9d7 	bl	80055c4 <__malloc_lock>
 8005216:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <_malloc_r+0xb4>)
 8005218:	6814      	ldr	r4, [r2, #0]
 800521a:	4621      	mov	r1, r4
 800521c:	b991      	cbnz	r1, 8005244 <_malloc_r+0x54>
 800521e:	4c22      	ldr	r4, [pc, #136]	; (80052a8 <_malloc_r+0xb8>)
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	b91b      	cbnz	r3, 800522c <_malloc_r+0x3c>
 8005224:	4630      	mov	r0, r6
 8005226:	f000 f991 	bl	800554c <_sbrk_r>
 800522a:	6020      	str	r0, [r4, #0]
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f98c 	bl	800554c <_sbrk_r>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d126      	bne.n	8005286 <_malloc_r+0x96>
 8005238:	230c      	movs	r3, #12
 800523a:	6033      	str	r3, [r6, #0]
 800523c:	4630      	mov	r0, r6
 800523e:	f000 f9c2 	bl	80055c6 <__malloc_unlock>
 8005242:	e7e4      	b.n	800520e <_malloc_r+0x1e>
 8005244:	680b      	ldr	r3, [r1, #0]
 8005246:	1b5b      	subs	r3, r3, r5
 8005248:	d41a      	bmi.n	8005280 <_malloc_r+0x90>
 800524a:	2b0b      	cmp	r3, #11
 800524c:	d90f      	bls.n	800526e <_malloc_r+0x7e>
 800524e:	600b      	str	r3, [r1, #0]
 8005250:	50cd      	str	r5, [r1, r3]
 8005252:	18cc      	adds	r4, r1, r3
 8005254:	4630      	mov	r0, r6
 8005256:	f000 f9b6 	bl	80055c6 <__malloc_unlock>
 800525a:	f104 000b 	add.w	r0, r4, #11
 800525e:	1d23      	adds	r3, r4, #4
 8005260:	f020 0007 	bic.w	r0, r0, #7
 8005264:	1ac3      	subs	r3, r0, r3
 8005266:	d01b      	beq.n	80052a0 <_malloc_r+0xb0>
 8005268:	425a      	negs	r2, r3
 800526a:	50e2      	str	r2, [r4, r3]
 800526c:	bd70      	pop	{r4, r5, r6, pc}
 800526e:	428c      	cmp	r4, r1
 8005270:	bf0d      	iteet	eq
 8005272:	6863      	ldreq	r3, [r4, #4]
 8005274:	684b      	ldrne	r3, [r1, #4]
 8005276:	6063      	strne	r3, [r4, #4]
 8005278:	6013      	streq	r3, [r2, #0]
 800527a:	bf18      	it	ne
 800527c:	460c      	movne	r4, r1
 800527e:	e7e9      	b.n	8005254 <_malloc_r+0x64>
 8005280:	460c      	mov	r4, r1
 8005282:	6849      	ldr	r1, [r1, #4]
 8005284:	e7ca      	b.n	800521c <_malloc_r+0x2c>
 8005286:	1cc4      	adds	r4, r0, #3
 8005288:	f024 0403 	bic.w	r4, r4, #3
 800528c:	42a0      	cmp	r0, r4
 800528e:	d005      	beq.n	800529c <_malloc_r+0xac>
 8005290:	1a21      	subs	r1, r4, r0
 8005292:	4630      	mov	r0, r6
 8005294:	f000 f95a 	bl	800554c <_sbrk_r>
 8005298:	3001      	adds	r0, #1
 800529a:	d0cd      	beq.n	8005238 <_malloc_r+0x48>
 800529c:	6025      	str	r5, [r4, #0]
 800529e:	e7d9      	b.n	8005254 <_malloc_r+0x64>
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
 80052a2:	bf00      	nop
 80052a4:	200001fc 	.word	0x200001fc
 80052a8:	20000200 	.word	0x20000200

080052ac <__ssputs_r>:
 80052ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b0:	688e      	ldr	r6, [r1, #8]
 80052b2:	429e      	cmp	r6, r3
 80052b4:	4682      	mov	sl, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	4691      	mov	r9, r2
 80052ba:	4698      	mov	r8, r3
 80052bc:	d835      	bhi.n	800532a <__ssputs_r+0x7e>
 80052be:	898a      	ldrh	r2, [r1, #12]
 80052c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052c4:	d031      	beq.n	800532a <__ssputs_r+0x7e>
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	6909      	ldr	r1, [r1, #16]
 80052ca:	1a6f      	subs	r7, r5, r1
 80052cc:	6965      	ldr	r5, [r4, #20]
 80052ce:	2302      	movs	r3, #2
 80052d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80052d8:	f108 0301 	add.w	r3, r8, #1
 80052dc:	443b      	add	r3, r7
 80052de:	429d      	cmp	r5, r3
 80052e0:	bf38      	it	cc
 80052e2:	461d      	movcc	r5, r3
 80052e4:	0553      	lsls	r3, r2, #21
 80052e6:	d531      	bpl.n	800534c <__ssputs_r+0xa0>
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7ff ff81 	bl	80051f0 <_malloc_r>
 80052ee:	4606      	mov	r6, r0
 80052f0:	b950      	cbnz	r0, 8005308 <__ssputs_r+0x5c>
 80052f2:	230c      	movs	r3, #12
 80052f4:	f8ca 3000 	str.w	r3, [sl]
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005308:	463a      	mov	r2, r7
 800530a:	6921      	ldr	r1, [r4, #16]
 800530c:	f7ff fc38 	bl	8004b80 <memcpy>
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	6126      	str	r6, [r4, #16]
 800531e:	6165      	str	r5, [r4, #20]
 8005320:	443e      	add	r6, r7
 8005322:	1bed      	subs	r5, r5, r7
 8005324:	6026      	str	r6, [r4, #0]
 8005326:	60a5      	str	r5, [r4, #8]
 8005328:	4646      	mov	r6, r8
 800532a:	4546      	cmp	r6, r8
 800532c:	bf28      	it	cs
 800532e:	4646      	movcs	r6, r8
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	f000 f92b 	bl	8005590 <memmove>
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	1b9b      	subs	r3, r3, r6
 800533e:	60a3      	str	r3, [r4, #8]
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	441e      	add	r6, r3
 8005344:	6026      	str	r6, [r4, #0]
 8005346:	2000      	movs	r0, #0
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	462a      	mov	r2, r5
 800534e:	f000 f93b 	bl	80055c8 <_realloc_r>
 8005352:	4606      	mov	r6, r0
 8005354:	2800      	cmp	r0, #0
 8005356:	d1e1      	bne.n	800531c <__ssputs_r+0x70>
 8005358:	6921      	ldr	r1, [r4, #16]
 800535a:	4650      	mov	r0, sl
 800535c:	f7ff fefa 	bl	8005154 <_free_r>
 8005360:	e7c7      	b.n	80052f2 <__ssputs_r+0x46>
	...

08005364 <_svfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	b09d      	sub	sp, #116	; 0x74
 800536a:	4680      	mov	r8, r0
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	898b      	ldrh	r3, [r1, #12]
 8005370:	061c      	lsls	r4, r3, #24
 8005372:	460d      	mov	r5, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d50f      	bpl.n	8005398 <_svfiprintf_r+0x34>
 8005378:	690b      	ldr	r3, [r1, #16]
 800537a:	b96b      	cbnz	r3, 8005398 <_svfiprintf_r+0x34>
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	f7ff ff37 	bl	80051f0 <_malloc_r>
 8005382:	6028      	str	r0, [r5, #0]
 8005384:	6128      	str	r0, [r5, #16]
 8005386:	b928      	cbnz	r0, 8005394 <_svfiprintf_r+0x30>
 8005388:	230c      	movs	r3, #12
 800538a:	f8c8 3000 	str.w	r3, [r8]
 800538e:	f04f 30ff 	mov.w	r0, #4294967295
 8005392:	e0c5      	b.n	8005520 <_svfiprintf_r+0x1bc>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	616b      	str	r3, [r5, #20]
 8005398:	2300      	movs	r3, #0
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
 800539c:	2320      	movs	r3, #32
 800539e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053a2:	2330      	movs	r3, #48	; 0x30
 80053a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053a8:	f04f 0b01 	mov.w	fp, #1
 80053ac:	4637      	mov	r7, r6
 80053ae:	463c      	mov	r4, r7
 80053b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13c      	bne.n	8005432 <_svfiprintf_r+0xce>
 80053b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80053bc:	d00b      	beq.n	80053d6 <_svfiprintf_r+0x72>
 80053be:	4653      	mov	r3, sl
 80053c0:	4632      	mov	r2, r6
 80053c2:	4629      	mov	r1, r5
 80053c4:	4640      	mov	r0, r8
 80053c6:	f7ff ff71 	bl	80052ac <__ssputs_r>
 80053ca:	3001      	adds	r0, #1
 80053cc:	f000 80a3 	beq.w	8005516 <_svfiprintf_r+0x1b2>
 80053d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d2:	4453      	add	r3, sl
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	783b      	ldrb	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 809c 	beq.w	8005516 <_svfiprintf_r+0x1b2>
 80053de:	2300      	movs	r3, #0
 80053e0:	f04f 32ff 	mov.w	r2, #4294967295
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	9307      	str	r3, [sp, #28]
 80053e8:	9205      	str	r2, [sp, #20]
 80053ea:	9306      	str	r3, [sp, #24]
 80053ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053f0:	931a      	str	r3, [sp, #104]	; 0x68
 80053f2:	2205      	movs	r2, #5
 80053f4:	7821      	ldrb	r1, [r4, #0]
 80053f6:	4850      	ldr	r0, [pc, #320]	; (8005538 <_svfiprintf_r+0x1d4>)
 80053f8:	f7fa fefa 	bl	80001f0 <memchr>
 80053fc:	1c67      	adds	r7, r4, #1
 80053fe:	9b04      	ldr	r3, [sp, #16]
 8005400:	b9d8      	cbnz	r0, 800543a <_svfiprintf_r+0xd6>
 8005402:	06d9      	lsls	r1, r3, #27
 8005404:	bf44      	itt	mi
 8005406:	2220      	movmi	r2, #32
 8005408:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800540c:	071a      	lsls	r2, r3, #28
 800540e:	bf44      	itt	mi
 8005410:	222b      	movmi	r2, #43	; 0x2b
 8005412:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005416:	7822      	ldrb	r2, [r4, #0]
 8005418:	2a2a      	cmp	r2, #42	; 0x2a
 800541a:	d016      	beq.n	800544a <_svfiprintf_r+0xe6>
 800541c:	9a07      	ldr	r2, [sp, #28]
 800541e:	2100      	movs	r1, #0
 8005420:	200a      	movs	r0, #10
 8005422:	4627      	mov	r7, r4
 8005424:	3401      	adds	r4, #1
 8005426:	783b      	ldrb	r3, [r7, #0]
 8005428:	3b30      	subs	r3, #48	; 0x30
 800542a:	2b09      	cmp	r3, #9
 800542c:	d951      	bls.n	80054d2 <_svfiprintf_r+0x16e>
 800542e:	b1c9      	cbz	r1, 8005464 <_svfiprintf_r+0x100>
 8005430:	e011      	b.n	8005456 <_svfiprintf_r+0xf2>
 8005432:	2b25      	cmp	r3, #37	; 0x25
 8005434:	d0c0      	beq.n	80053b8 <_svfiprintf_r+0x54>
 8005436:	4627      	mov	r7, r4
 8005438:	e7b9      	b.n	80053ae <_svfiprintf_r+0x4a>
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <_svfiprintf_r+0x1d4>)
 800543c:	1a80      	subs	r0, r0, r2
 800543e:	fa0b f000 	lsl.w	r0, fp, r0
 8005442:	4318      	orrs	r0, r3
 8005444:	9004      	str	r0, [sp, #16]
 8005446:	463c      	mov	r4, r7
 8005448:	e7d3      	b.n	80053f2 <_svfiprintf_r+0x8e>
 800544a:	9a03      	ldr	r2, [sp, #12]
 800544c:	1d11      	adds	r1, r2, #4
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	9103      	str	r1, [sp, #12]
 8005452:	2a00      	cmp	r2, #0
 8005454:	db01      	blt.n	800545a <_svfiprintf_r+0xf6>
 8005456:	9207      	str	r2, [sp, #28]
 8005458:	e004      	b.n	8005464 <_svfiprintf_r+0x100>
 800545a:	4252      	negs	r2, r2
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	9207      	str	r2, [sp, #28]
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	783b      	ldrb	r3, [r7, #0]
 8005466:	2b2e      	cmp	r3, #46	; 0x2e
 8005468:	d10e      	bne.n	8005488 <_svfiprintf_r+0x124>
 800546a:	787b      	ldrb	r3, [r7, #1]
 800546c:	2b2a      	cmp	r3, #42	; 0x2a
 800546e:	f107 0101 	add.w	r1, r7, #1
 8005472:	d132      	bne.n	80054da <_svfiprintf_r+0x176>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	bfb8      	it	lt
 8005480:	f04f 33ff 	movlt.w	r3, #4294967295
 8005484:	3702      	adds	r7, #2
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	4c2c      	ldr	r4, [pc, #176]	; (800553c <_svfiprintf_r+0x1d8>)
 800548a:	7839      	ldrb	r1, [r7, #0]
 800548c:	2203      	movs	r2, #3
 800548e:	4620      	mov	r0, r4
 8005490:	f7fa feae 	bl	80001f0 <memchr>
 8005494:	b138      	cbz	r0, 80054a6 <_svfiprintf_r+0x142>
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	1b00      	subs	r0, r0, r4
 800549a:	fa03 f000 	lsl.w	r0, r3, r0
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	4303      	orrs	r3, r0
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	3701      	adds	r7, #1
 80054a6:	7839      	ldrb	r1, [r7, #0]
 80054a8:	4825      	ldr	r0, [pc, #148]	; (8005540 <_svfiprintf_r+0x1dc>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	1c7e      	adds	r6, r7, #1
 80054b2:	f7fa fe9d 	bl	80001f0 <memchr>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d035      	beq.n	8005526 <_svfiprintf_r+0x1c2>
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <_svfiprintf_r+0x1e0>)
 80054bc:	b9fb      	cbnz	r3, 80054fe <_svfiprintf_r+0x19a>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	3308      	adds	r3, #8
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	444b      	add	r3, r9
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	e76c      	b.n	80053ac <_svfiprintf_r+0x48>
 80054d2:	fb00 3202 	mla	r2, r0, r2, r3
 80054d6:	2101      	movs	r1, #1
 80054d8:	e7a3      	b.n	8005422 <_svfiprintf_r+0xbe>
 80054da:	2300      	movs	r3, #0
 80054dc:	9305      	str	r3, [sp, #20]
 80054de:	4618      	mov	r0, r3
 80054e0:	240a      	movs	r4, #10
 80054e2:	460f      	mov	r7, r1
 80054e4:	3101      	adds	r1, #1
 80054e6:	783a      	ldrb	r2, [r7, #0]
 80054e8:	3a30      	subs	r2, #48	; 0x30
 80054ea:	2a09      	cmp	r2, #9
 80054ec:	d903      	bls.n	80054f6 <_svfiprintf_r+0x192>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ca      	beq.n	8005488 <_svfiprintf_r+0x124>
 80054f2:	9005      	str	r0, [sp, #20]
 80054f4:	e7c8      	b.n	8005488 <_svfiprintf_r+0x124>
 80054f6:	fb04 2000 	mla	r0, r4, r0, r2
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7f1      	b.n	80054e2 <_svfiprintf_r+0x17e>
 80054fe:	ab03      	add	r3, sp, #12
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	462a      	mov	r2, r5
 8005504:	4b10      	ldr	r3, [pc, #64]	; (8005548 <_svfiprintf_r+0x1e4>)
 8005506:	a904      	add	r1, sp, #16
 8005508:	4640      	mov	r0, r8
 800550a:	f7fe f8cf 	bl	80036ac <_printf_float>
 800550e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005512:	4681      	mov	r9, r0
 8005514:	d1d9      	bne.n	80054ca <_svfiprintf_r+0x166>
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	065b      	lsls	r3, r3, #25
 800551a:	f53f af38 	bmi.w	800538e <_svfiprintf_r+0x2a>
 800551e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005520:	b01d      	add	sp, #116	; 0x74
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	ab03      	add	r3, sp, #12
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	462a      	mov	r2, r5
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <_svfiprintf_r+0x1e4>)
 800552e:	a904      	add	r1, sp, #16
 8005530:	4640      	mov	r0, r8
 8005532:	f7fe fb71 	bl	8003c18 <_printf_i>
 8005536:	e7ea      	b.n	800550e <_svfiprintf_r+0x1aa>
 8005538:	08005804 	.word	0x08005804
 800553c:	0800580a 	.word	0x0800580a
 8005540:	0800580e 	.word	0x0800580e
 8005544:	080036ad 	.word	0x080036ad
 8005548:	080052ad 	.word	0x080052ad

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4c06      	ldr	r4, [pc, #24]	; (8005568 <_sbrk_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4605      	mov	r5, r0
 8005554:	4608      	mov	r0, r1
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	f7fd ff76 	bl	8003448 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	2000029c 	.word	0x2000029c

0800556c <__ascii_mbtowc>:
 800556c:	b082      	sub	sp, #8
 800556e:	b901      	cbnz	r1, 8005572 <__ascii_mbtowc+0x6>
 8005570:	a901      	add	r1, sp, #4
 8005572:	b142      	cbz	r2, 8005586 <__ascii_mbtowc+0x1a>
 8005574:	b14b      	cbz	r3, 800558a <__ascii_mbtowc+0x1e>
 8005576:	7813      	ldrb	r3, [r2, #0]
 8005578:	600b      	str	r3, [r1, #0]
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	1c10      	adds	r0, r2, #0
 800557e:	bf18      	it	ne
 8005580:	2001      	movne	r0, #1
 8005582:	b002      	add	sp, #8
 8005584:	4770      	bx	lr
 8005586:	4610      	mov	r0, r2
 8005588:	e7fb      	b.n	8005582 <__ascii_mbtowc+0x16>
 800558a:	f06f 0001 	mvn.w	r0, #1
 800558e:	e7f8      	b.n	8005582 <__ascii_mbtowc+0x16>

08005590 <memmove>:
 8005590:	4288      	cmp	r0, r1
 8005592:	b510      	push	{r4, lr}
 8005594:	eb01 0302 	add.w	r3, r1, r2
 8005598:	d803      	bhi.n	80055a2 <memmove+0x12>
 800559a:	1e42      	subs	r2, r0, #1
 800559c:	4299      	cmp	r1, r3
 800559e:	d10c      	bne.n	80055ba <memmove+0x2a>
 80055a0:	bd10      	pop	{r4, pc}
 80055a2:	4298      	cmp	r0, r3
 80055a4:	d2f9      	bcs.n	800559a <memmove+0xa>
 80055a6:	1881      	adds	r1, r0, r2
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	42d3      	cmn	r3, r2
 80055ac:	d100      	bne.n	80055b0 <memmove+0x20>
 80055ae:	bd10      	pop	{r4, pc}
 80055b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055b8:	e7f7      	b.n	80055aa <memmove+0x1a>
 80055ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055c2:	e7eb      	b.n	800559c <memmove+0xc>

080055c4 <__malloc_lock>:
 80055c4:	4770      	bx	lr

080055c6 <__malloc_unlock>:
 80055c6:	4770      	bx	lr

080055c8 <_realloc_r>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	4607      	mov	r7, r0
 80055cc:	4614      	mov	r4, r2
 80055ce:	460e      	mov	r6, r1
 80055d0:	b921      	cbnz	r1, 80055dc <_realloc_r+0x14>
 80055d2:	4611      	mov	r1, r2
 80055d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055d8:	f7ff be0a 	b.w	80051f0 <_malloc_r>
 80055dc:	b922      	cbnz	r2, 80055e8 <_realloc_r+0x20>
 80055de:	f7ff fdb9 	bl	8005154 <_free_r>
 80055e2:	4625      	mov	r5, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e8:	f000 f821 	bl	800562e <_malloc_usable_size_r>
 80055ec:	4284      	cmp	r4, r0
 80055ee:	d90f      	bls.n	8005610 <_realloc_r+0x48>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4638      	mov	r0, r7
 80055f4:	f7ff fdfc 	bl	80051f0 <_malloc_r>
 80055f8:	4605      	mov	r5, r0
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d0f2      	beq.n	80055e4 <_realloc_r+0x1c>
 80055fe:	4631      	mov	r1, r6
 8005600:	4622      	mov	r2, r4
 8005602:	f7ff fabd 	bl	8004b80 <memcpy>
 8005606:	4631      	mov	r1, r6
 8005608:	4638      	mov	r0, r7
 800560a:	f7ff fda3 	bl	8005154 <_free_r>
 800560e:	e7e9      	b.n	80055e4 <_realloc_r+0x1c>
 8005610:	4635      	mov	r5, r6
 8005612:	e7e7      	b.n	80055e4 <_realloc_r+0x1c>

08005614 <__ascii_wctomb>:
 8005614:	b149      	cbz	r1, 800562a <__ascii_wctomb+0x16>
 8005616:	2aff      	cmp	r2, #255	; 0xff
 8005618:	bf85      	ittet	hi
 800561a:	238a      	movhi	r3, #138	; 0x8a
 800561c:	6003      	strhi	r3, [r0, #0]
 800561e:	700a      	strbls	r2, [r1, #0]
 8005620:	f04f 30ff 	movhi.w	r0, #4294967295
 8005624:	bf98      	it	ls
 8005626:	2001      	movls	r0, #1
 8005628:	4770      	bx	lr
 800562a:	4608      	mov	r0, r1
 800562c:	4770      	bx	lr

0800562e <_malloc_usable_size_r>:
 800562e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005632:	2800      	cmp	r0, #0
 8005634:	f1a0 0004 	sub.w	r0, r0, #4
 8005638:	bfbc      	itt	lt
 800563a:	580b      	ldrlt	r3, [r1, r0]
 800563c:	18c0      	addlt	r0, r0, r3
 800563e:	4770      	bx	lr

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
